{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { history } from \"../../../history\"; // import \"firebase/auth\"\n// import \"firebase/database\"\n\nimport axios from \"axios\"; // import { config } from \"../../../authServices/firebase/firebaseConfig\"\n\nimport { api_query } from \"../../../api/ApiConstant\"; // Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n// let firebaseAuth = firebase.auth()\n// const initAuth0 = new auth0.WebAuth(configAuth)\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\nexport const loginWithJWT = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  return dispatch => {\n    axios.post(\"/api/authenticate/login/user\", {\n      email: user.email,\n      password: user.password\n    }).then(response => {\n      var loggedInUser;\n\n      if (response.data) {\n        loggedInUser = response.data.user;\n        dispatch({\n          type: \"LOGIN_WITH_JWT\",\n          payload: {\n            loggedInUser,\n            loggedInWith: \"jwt\"\n          }\n        });\n        history.push(\"/\");\n      }\n    }).catch(err => console.log(err));\n  };\n};\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_JWT\",\n      payload: {}\n    });\n    history.push(\"/pages/login\");\n  };\n};\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_FIREBASE\",\n      payload: {}\n    });\n    history.push(\"/pages/login\");\n  };\n};\nexport const logoutWithCustom = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_CUSTOM\",\n      payload: {}\n    });\n    history.push(\"/pages/login\");\n  };\n};\nexport const changeRole = role => {\n  return dispatch => dispatch({\n    type: \"CHANGE_ROLE\",\n    userRole: role\n  });\n};\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  console.log('custom : ', user);\n  return dispatch => {\n    let sql = `\n      select * from user where email = '` + user.email + `'\n    `;\n    axios.post(api_query, {\n      query: sql\n    }).then(response => {\n      var loggedInUser;\n      var _tempUser = response.data.response[0];\n      console.log('response login custom : ', response);\n      console.log('response login custom : ', response.data.response[0]);\n\n      if (_tempUser != undefined) {\n        loggedInUser = response.data.response[0];\n        dispatch({\n          type: \"LOGIN_WITH_CUSTOM\",\n          payload: {\n            email: _tempUser.email,\n            name: _tempUser.email,\n            role: _tempUser.role,\n            loggedInWith: \"custom\"\n          }\n        });\n        history.push(\"/\");\n      } // if (response.data) {\n      //   loggedInUser = response.data.user\n      //   dispatch({\n      //     type: \"LOGIN_WITH_CUSTOM\",\n      //     payload: { loggedInUser, loggedInWith: \"custom\" }\n      //   })\n      //   history.push(\"/\")\n      // }\n\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["E:/react/rombak-react-vuexy2/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","api_query","loginWithJWT","user","dispatch","post","email","password","then","response","loggedInUser","data","type","payload","loggedInWith","push","catch","err","console","log","logoutWithJWT","logoutWithFirebase","logoutWithCustom","changeRole","role","userRole","loginWithCustom","sql","query","_tempUser","undefined","name"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,SAAT,QAA0B,0BAA1B,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAClC;AACA,SAAOC,QAAQ,IAAI;AACjBJ,IAAAA,KAAK,CACFK,IADH,CACQ,8BADR,EACwC;AACpCC,MAAAA,KAAK,EAAEH,IAAI,CAACG,KADwB;AAEpCC,MAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAFqB,KADxC,EAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,U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","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\n// import \"firebase/auth\"\n// import \"firebase/database\"\nimport axios from \"axios\"\n// import { config } from \"../../../authServices/firebase/firebaseConfig\"\nimport { api_query } from \"../../../api/ApiConstant\"\n\n// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n\n// let firebaseAuth = firebase.auth()\n\n// const initAuth0 = new auth0.WebAuth(configAuth)\n\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\nexport const loginWithJWT = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/login/user\", {\n        email: user.email,\n        password: user.password\n      })\n      .then(response => {\n        var loggedInUser\n\n        if (response.data) {\n          loggedInUser = response.data.user\n\n          dispatch({\n            type: \"LOGIN_WITH_JWT\",\n            payload: { loggedInUser, loggedInWith: \"jwt\" }\n          })\n\n          history.push(\"/\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const logoutWithCustom = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_CUSTOM\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const changeRole = role => {\n  return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n}\n\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n\n  console.log('custom : ', user)\n\n  return dispatch => {\n\n    let sql = `\n      select * from user where email = '`+user.email+`'\n    `\n\n    axios\n      .post(api_query, {\n        query : sql\n      })\n      .then(response => {\n        var loggedInUser\n        var _tempUser = response.data.response[0]\n        console.log('response login custom : ', response)\n        console.log('response login custom : ', response.data.response[0])\n\n        if (_tempUser != undefined) {\n          loggedInUser = response.data.response[0]\n\n          dispatch({\n            type: \"LOGIN_WITH_CUSTOM\",\n            payload: {\n              email : _tempUser.email,\n              name: _tempUser.email,\n              role: _tempUser.role,\n              loggedInWith: \"custom\"\n            }\n          })\n\n          history.push(\"/\")\n        }\n\n        // if (response.data) {\n        //   loggedInUser = response.data.user\n\n        //   dispatch({\n        //     type: \"LOGIN_WITH_CUSTOM\",\n        //     payload: { loggedInUser, loggedInWith: \"custom\" }\n        //   })\n\n        //   history.push(\"/\")\n        // }\n      })\n      .catch(err => console.log(err))\n  }\n}"]},"metadata":{},"sourceType":"module"}