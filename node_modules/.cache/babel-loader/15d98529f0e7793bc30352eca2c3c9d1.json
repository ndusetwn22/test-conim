{"ast":null,"code":"import _toConsumableArray from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/pandusetiawan/Documents/react/df-v1.2/src/components/@vuexy/autoComplete/AutoCompleteComponent.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { history } from \"../../../history\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { AlertTriangle } from \"react-feather\";\n\nvar Autocomplete = /*#__PURE__*/function (_React$Component) {\n  _inherits(Autocomplete, _React$Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _this.onSuggestionItemClick = function (url, e) {\n      if (_this.props.onSuggestionClick) {\n        _this.props.onSuggestionClick(e);\n      }\n\n      _this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n\n      if (url) history.push(url);\n    };\n\n    _this.onSuggestionItemHover = function (index) {\n      _this.setState({\n        activeSuggestion: index\n      });\n    };\n\n    _this.onChange = function (e) {\n      var userInput = e.currentTarget.value;\n\n      _this.setState({\n        activeSuggestion: 0,\n        showSuggestions: true,\n        userInput: userInput\n      });\n\n      if (e.target.value < 1) {\n        _this.setState({\n          showSuggestions: false\n        });\n      }\n    };\n\n    _this.onInputClick = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          showSuggestions = _this$state.showSuggestions,\n          userInput = _this$state.userInput;\n      var filterKey = _this.props.filterKey;\n      var suggestionList = ReactDOM.findDOMNode(_this.suggestionList); // User pressed the up arrow\n\n      if (e.keyCode === 38 && activeSuggestion !== 0) {\n        _this.setState({\n          activeSuggestion: activeSuggestion - 1\n        });\n\n        if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion <= _this.filteredData.length / 2) {\n          suggestionList.scrollTop = 0;\n        }\n      } // User pressed the down arrow\n      else if (e.keyCode === 40 && activeSuggestion < _this.filteredData.length - 1) {\n          _this.setState({\n            activeSuggestion: activeSuggestion + 1\n          });\n\n          if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion >= _this.filteredData.length / 2) {\n            suggestionList.scrollTop = suggestionList.scrollHeight;\n          }\n        } // User Pressed ESC\n        else if (e.keyCode === 27) {\n            _this.setState({\n              showSuggestions: false,\n              userInput: \"\"\n            });\n          } // User Pressed ENTER\n          else if (e.keyCode === 13 && showSuggestions) {\n              if (typeof _this.filteredData[activeSuggestion] == \"undefined\") {\n                return;\n              } else {\n                _this.onSuggestionItemClick(_this.filteredData[activeSuggestion].link, e);\n\n                _this.setState({\n                  userInput: _this.filteredData[activeSuggestion][filterKey],\n                  showSuggestions: false\n                });\n              }\n            } else {\n              return;\n            } // Custom Keydown Event\n\n\n      if (_this.props.onKeyDown !== undefined && _this.props.onKeyDown !== null && _this.props.onKeyDown) {\n        _this.props.onKeyDown(e, userInput);\n      }\n    };\n\n    _this.renderGroupedSuggestion = function (arr) {\n      var _this$props = _this.props,\n          filterKey = _this$props.filterKey,\n          customRender = _this$props.customRender;\n\n      var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)),\n          onSuggestionItemClick = _assertThisInitialize.onSuggestionItemClick,\n          onSuggestionItemHover = _assertThisInitialize.onSuggestionItemHover,\n          _assertThisInitialize2 = _assertThisInitialize.state,\n          activeSuggestion = _assertThisInitialize2.activeSuggestion,\n          userInput = _assertThisInitialize2.userInput;\n\n      var renderSuggestion = function renderSuggestion(item, i) {\n        if (!customRender) {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: classnames(\"suggestion-item\", {\n              active: _this.filteredData.indexOf(item) === activeSuggestion\n            }),\n            key: item[filterKey],\n            onClick: function onClick(e) {\n              return onSuggestionItemClick(item.link, e);\n            },\n            onMouseEnter: function onMouseEnter() {\n              _this.onSuggestionItemHover(_this.filteredData.indexOf(item));\n            },\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 11\n            }\n          }, item[filterKey]);\n        } else if (customRender) {\n          return customRender(item, i, _this.filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n        } else {\n          return null;\n        }\n      };\n\n      return arr.map(function (item, i) {\n        return renderSuggestion(item, i);\n      });\n    };\n\n    _this.renderUngroupedSuggestions = function () {\n      var _this$filteredData;\n\n      var _this$props2 = _this.props,\n          filterKey = _this$props2.filterKey,\n          suggestions = _this$props2.suggestions,\n          customRender = _this$props2.customRender,\n          suggestionLimit = _this$props2.suggestionLimit;\n\n      var _assertThisInitialize3 = _assertThisInitialized(_assertThisInitialized(_this)),\n          onSuggestionItemClick = _assertThisInitialize3.onSuggestionItemClick,\n          onSuggestionItemHover = _assertThisInitialize3.onSuggestionItemHover,\n          _assertThisInitialize4 = _assertThisInitialize3.state,\n          activeSuggestion = _assertThisInitialize4.activeSuggestion,\n          userInput = _assertThisInitialize4.userInput;\n\n      _this.filteredData = [];\n      var sortSingleData = suggestions.filter(function (i) {\n        var startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n            includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n        if (startCondition) {\n          return startCondition;\n        } else if (!startCondition && includeCondition) {\n          return includeCondition;\n        } else {\n          return null;\n        }\n      }).slice(0, suggestionLimit);\n\n      (_this$filteredData = _this.filteredData).push.apply(_this$filteredData, _toConsumableArray(sortSingleData));\n\n      return sortSingleData.map(function (suggestion, index) {\n        if (!customRender) {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: classnames(\"suggestion-item\", {\n              active: _this.filteredData.indexOf(suggestion) === activeSuggestion\n            }),\n            key: suggestion[filterKey],\n            onClick: function onClick(e) {\n              return onSuggestionItemClick(suggestion.link ? suggestion.link : null, e);\n            },\n            onMouseEnter: function onMouseEnter() {\n              return _this.onSuggestionItemHover(_this.filteredData.indexOf(suggestion));\n            },\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 11\n            }\n          }, suggestion[filterKey]);\n        } else if (customRender) {\n          return customRender(suggestion, index, _this.filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n        } else {\n          return null;\n        }\n      });\n    };\n\n    _this.renderSuggestions = function () {\n      var _this$props3 = _this.props,\n          filterKey = _this$props3.filterKey,\n          grouped = _this$props3.grouped,\n          filterHeaderKey = _this$props3.filterHeaderKey,\n          suggestions = _this$props3.suggestions;\n\n      var _assertThisInitialize5 = _assertThisInitialized(_assertThisInitialized(_this)),\n          renderUngroupedSuggestions = _assertThisInitialize5.renderUngroupedSuggestions,\n          userInput = _assertThisInitialize5.state.userInput; // Checks if suggestions are grouped or not.\n\n\n      if (grouped === undefined || grouped === null || !grouped) {\n        return renderUngroupedSuggestions();\n      } else {\n        _this.filteredData = [];\n        return suggestions.map(function (suggestion) {\n          var _this$filteredData2;\n\n          var sortData = suggestion.data.filter(function (i) {\n            var startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n                includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n            if (startCondition) {\n              return startCondition;\n            } else if (!startCondition && includeCondition) {\n              return includeCondition;\n            } else {\n              return null;\n            }\n          }).slice(0, suggestion.searchLimit);\n\n          (_this$filteredData2 = _this.filteredData).push.apply(_this$filteredData2, _toConsumableArray(sortData));\n\n          return /*#__PURE__*/React.createElement(React.Fragment, {\n            key: suggestion[filterHeaderKey],\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            className: \"suggestion-item suggestion-title text-primary text-bold-600\",\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 13\n            }\n          }, suggestion[filterHeaderKey]), sortData.length ? _this.renderGroupedSuggestion(sortData) : /*#__PURE__*/React.createElement(\"li\", {\n            className: \"suggestion-item no-result\",\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(AlertTriangle, {\n            size: 15,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }\n          }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"align-middle ml-50\",\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }\n          }, \"No Result\")));\n        });\n      }\n    };\n\n    _this.clearInput = function (val) {\n      if (_this.props.clearInput && !val) {\n        _this.setState({\n          userInput: \"\"\n        });\n      }\n    };\n\n    _this.handleExtenalClick = function (e) {\n      var container = _this.refs.container;\n      var target = e.target;\n\n      if (target !== container && !container.contains(target)) {\n        _this.setState({\n          showSuggestions: false\n        });\n\n        if (_this.props.externalClick) _this.props.externalClick(e);\n      }\n    };\n\n    _this.state = {\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: \"\",\n      focused: false,\n      openUp: false\n    };\n    _this.filteredData = [];\n    document.body.addEventListener(\"click\", _this.handleExtenalClick);\n    return _this;\n  } // Suggestion Click Event\n\n\n  _createClass(Autocomplete, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var textInput = ReactDOM.findDOMNode(this.input);\n      var _this$props4 = this.props,\n          autoFocus = _this$props4.autoFocus,\n          onSuggestionsShown = _this$props4.onSuggestionsShown,\n          clearInput = _this$props4.clearInput; // For searchbar focus\n\n      if (textInput !== null && autoFocus) {\n        textInput.focus();\n      }\n\n      if (this.props.defaultSuggestions && prevState.showSuggestions === false && this.state.focused) {\n        this.setState({\n          showSuggestions: true\n        });\n      } // Clear Input\n\n\n      if (clearInput === false && this.state.userInput.length) {\n        this.setState({\n          userInput: \"\"\n        });\n      } // Function on Suggestions Shown\n\n\n      if (onSuggestionsShown && this.state.showSuggestions) {\n        onSuggestionsShown(this.state.userInput);\n      }\n\n      if (this.props.defaultSuggestions && prevState.focused === false && this.state.focused === true) {\n        this.setState({\n          showSuggestions: true\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.defaultSuggestions && this.state.focused) {\n        this.setState({\n          showSuggestions: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeEventListener(\"click\", this.handleExtenalClick);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _onChange = this.onChange,\n          _onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput,\n          openUp = _this$state2.openUp;\n      var suggestionsListComponent;\n\n      if (showSuggestions) {\n        suggestionsListComponent = /*#__PURE__*/React.createElement(PerfectScrollbar, {\n          className: classnames(\"suggestions-list\", {\n            \"open-up\": openUp\n          }),\n          ref: function ref(el) {\n            return _this2.suggestionList = el;\n          },\n          component: \"ul\",\n          options: {\n            wheelPropagation: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 9\n          }\n        }, this.renderSuggestions());\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"vx-autocomplete-container\",\n        ref: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(e) {\n          _onChange(e);\n\n          if (_this2.props.onChange) {\n            _this2.props.onChange(e);\n          }\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _onKeyDown(e);\n        },\n        value: userInput,\n        className: \"vx-autocomplete-search \".concat(this.props.className ? this.props.className : \"\"),\n        placeholder: this.props.placeholder,\n        onClick: this.onInputClick,\n        ref: function ref(el) {\n          return _this2.input = el;\n        },\n        onFocus: function onFocus(e) {\n          _this2.setState({\n            focused: true\n          });\n        },\n        autoFocus: this.props.autoFocus,\n        onBlur: function onBlur(e) {\n          // this.onBlur(e)\n          if (_this2.props.onBlur) _this2.props.onBlur(e);\n\n          _this2.setState({\n            focused: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 9\n        }\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(React.Component);\n\nexport default Autocomplete;\nAutocomplete.propTypes = {\n  suggestions: PropTypes.array.isRequired,\n  filterKey: PropTypes.string.isRequired,\n  filterHeaderKey: PropTypes.string,\n  placeholder: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func\n};","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/components/@vuexy/autoComplete/AutoCompleteComponent.js"],"names":["React","ReactDOM","PropTypes","classnames","history","PerfectScrollbar","AlertTriangle","Autocomplete","props","onSuggestionItemClick","url","e","onSuggestionClick","setState","activeSuggestion","showSuggestions","userInput","currentTarget","innerText","push","onSuggestionItemHover","index","onChange","value","target","onInputClick","stopPropagation","onKeyDown","state","filterKey","suggestionList","findDOMNode","keyCode","length","filteredData","scrollTop","scrollHeight","link","undefined","renderGroupedSuggestion","arr","customRender","renderSuggestion","item","i","active","indexOf","map","renderUngroupedSuggestions","suggestions","suggestionLimit","sortSingleData","filter","startCondition","toLowerCase","startsWith","includeCondition","includes","slice","suggestion","renderSuggestions","grouped","filterHeaderKey","sortData","data","searchLimit","clearInput","val","handleExtenalClick","container","refs","contains","externalClick","focused","openUp","document","body","addEventListener","prevProps","prevState","textInput","input","autoFocus","onSuggestionsShown","focus","defaultSuggestions","removeEventListener","suggestionsListComponent","el","wheelPropagation","className","placeholder","onBlur","Component","propTypes","array","isRequired","string","number","bool","func"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { history } from \"../../../history\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { AlertTriangle } from \"react-feather\"\nclass Autocomplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: \"\",\n      focused: false,\n      openUp: false\n    }\n\n    this.filteredData = []\n    document.body.addEventListener(\"click\", this.handleExtenalClick)\n  }\n\n  // Suggestion Click Event\n  onSuggestionItemClick = (url, e) => {\n    if (this.props.onSuggestionClick) {\n      this.props.onSuggestionClick(e)\n    }\n    this.setState({\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    })\n    if (url) history.push(url)\n  }\n\n  // Suggestion Hover Event\n  onSuggestionItemHover = index => {\n    this.setState({ activeSuggestion: index })\n  }\n\n  // Input Change\n  onChange = e => {\n    const userInput = e.currentTarget.value\n    this.setState({\n      activeSuggestion: 0,\n      showSuggestions: true,\n      userInput\n    })\n    if (e.target.value < 1) {\n      this.setState({\n        showSuggestions: false\n      })\n    }\n  }\n\n  // Input Click Event\n  onInputClick = e => {\n    e.stopPropagation()\n  }\n\n  // Input's Keydown Event\n  onKeyDown = e => {\n    const { activeSuggestion, showSuggestions, userInput } = this.state\n    const filterKey = this.props.filterKey\n    let suggestionList = ReactDOM.findDOMNode(this.suggestionList)\n\n    // User pressed the up arrow\n    if (e.keyCode === 38 && activeSuggestion !== 0) {\n      this.setState({ activeSuggestion: activeSuggestion - 1 })\n      if (\n        e.target.value.length > -1 &&\n        suggestionList !== null &&\n        activeSuggestion <= this.filteredData.length / 2\n      ) {\n        suggestionList.scrollTop = 0\n      }\n    }\n\n    // User pressed the down arrow\n    else if (\n      e.keyCode === 40 &&\n      activeSuggestion < this.filteredData.length - 1\n    ) {\n      this.setState({ activeSuggestion: activeSuggestion + 1 })\n\n      if (\n        e.target.value.length > -1 &&\n        suggestionList !== null &&\n        activeSuggestion >= this.filteredData.length / 2\n      ) {\n        suggestionList.scrollTop = suggestionList.scrollHeight\n      }\n    }\n\n    // User Pressed ESC\n    else if (e.keyCode === 27) {\n      this.setState({\n        showSuggestions: false,\n        userInput: \"\"\n      })\n    }\n\n    // User Pressed ENTER\n    else if (e.keyCode === 13 && showSuggestions) {\n      if (typeof(this.filteredData[activeSuggestion]) == \"undefined\") {\n        return\n      }else{\n          this.onSuggestionItemClick(this.filteredData[activeSuggestion].link, e)\n          this.setState({\n            userInput: this.filteredData[activeSuggestion][filterKey],\n            showSuggestions: false\n        })\n      }\n    } else {\n      return\n    }\n\n    // Custom Keydown Event\n    if (\n      this.props.onKeyDown !== undefined &&\n      this.props.onKeyDown !== null &&\n      this.props.onKeyDown\n    ) {\n      this.props.onKeyDown(e, userInput)\n    }\n  }\n\n  // Grouped Suggestions\n  renderGroupedSuggestion = arr => {\n    const { filterKey, customRender } = this.props\n    const {\n      onSuggestionItemClick,\n      onSuggestionItemHover,\n      state: { activeSuggestion, userInput }\n    } = this\n\n    let renderSuggestion = (item, i) => {\n      if (!customRender) {\n        return (\n          <li\n            className={classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(item) === activeSuggestion\n            })}\n            key={item[filterKey]}\n            onClick={e => onSuggestionItemClick(item.link, e)}\n            onMouseEnter={() => {\n              this.onSuggestionItemHover(this.filteredData.indexOf(item))\n            }}>\n            {item[filterKey]}\n          </li>\n        )\n      } else if (customRender) {\n        return customRender(\n          item,\n          i,\n          this.filteredData,\n          activeSuggestion,\n          onSuggestionItemClick,\n          onSuggestionItemHover,\n          userInput\n        )\n      } else {\n        return null\n      }\n    }\n\n    return arr.map((item, i) => {\n      return renderSuggestion(item, i)\n    })\n  }\n\n  // Ungrouped Suggestions\n  renderUngroupedSuggestions = () => {\n    const { filterKey, suggestions, customRender, suggestionLimit } = this.props\n    const {\n      onSuggestionItemClick,\n      onSuggestionItemHover,\n      state: { activeSuggestion, userInput }\n    } = this\n\n    this.filteredData = []\n    let sortSingleData = suggestions\n      .filter(i => {\n        let startCondition = i[filterKey]\n            .toLowerCase()\n            .startsWith(userInput.toLowerCase()),\n          includeCondition = i[filterKey]\n            .toLowerCase()\n            .includes(userInput.toLowerCase())\n        if (startCondition) {\n          return startCondition\n        } else if (!startCondition && includeCondition) {\n          return includeCondition\n        } else {\n          return null\n        }\n      })\n      .slice(0, suggestionLimit)\n    this.filteredData.push(...sortSingleData)\n    return sortSingleData.map((suggestion, index) => {\n      if (!customRender) {\n        return (\n          <li\n            className={classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(suggestion) === activeSuggestion\n            })}\n            key={suggestion[filterKey]}\n            onClick={e =>\n              onSuggestionItemClick(suggestion.link ? suggestion.link : null, e)\n            }\n            onMouseEnter={() =>\n              this.onSuggestionItemHover(this.filteredData.indexOf(suggestion))\n            }>\n            {suggestion[filterKey]}\n          </li>\n        )\n      } else if (customRender) {\n        return customRender(\n          suggestion,\n          index,\n          this.filteredData,\n          activeSuggestion,\n          onSuggestionItemClick,\n          onSuggestionItemHover,\n          userInput\n        )\n      } else {\n        return null\n      }\n    })\n  }\n\n  // Renders Suggestions\n  renderSuggestions = () => {\n    const { filterKey, grouped, filterHeaderKey, suggestions } = this.props\n    const {\n      renderUngroupedSuggestions,\n      state: { userInput }\n    } = this\n\n    // Checks if suggestions are grouped or not.\n    if (grouped === undefined || grouped === null || !grouped) {\n      return renderUngroupedSuggestions()\n    } else {\n      this.filteredData = []\n      return suggestions.map(suggestion => {\n        let sortData = suggestion.data\n          .filter(i => {\n            let startCondition = i[filterKey]\n                .toLowerCase()\n                .startsWith(userInput.toLowerCase()),\n              includeCondition = i[filterKey]\n                .toLowerCase()\n                .includes(userInput.toLowerCase())\n            if (startCondition) {\n              return startCondition\n            } else if (!startCondition && includeCondition) {\n              return includeCondition\n            } else {\n              return null\n            }\n          })\n          .slice(0, suggestion.searchLimit)\n\n        this.filteredData.push(...sortData)\n        return (\n          <React.Fragment key={suggestion[filterHeaderKey]}>\n            <li className=\"suggestion-item suggestion-title text-primary text-bold-600\">\n              {suggestion[filterHeaderKey]}\n            </li>\n            {sortData.length ? (\n              this.renderGroupedSuggestion(sortData)\n            ) : (\n              <li className=\"suggestion-item no-result\">\n                <AlertTriangle size={15} />{\" \"}\n                <span className=\"align-middle ml-50\">No Result</span>\n              </li>\n            )}\n          </React.Fragment>\n        )\n      })\n    }\n  }\n\n  // Clears Input\n  clearInput = val => {\n    if (this.props.clearInput && !val) {\n      this.setState({\n        userInput: \"\"\n      })\n    }\n  }\n\n  // Closes Suggestions if clicked outside container (On Blur Basically)\n  handleExtenalClick = e => {\n    let { container } = this.refs\n    const { target } = e\n    if (target !== container && !container.contains(target)) {\n      this.setState({\n        showSuggestions: false\n      })\n      if (this.props.externalClick) this.props.externalClick(e)\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let textInput = ReactDOM.findDOMNode(this.input)\n    let { autoFocus, onSuggestionsShown, clearInput } = this.props\n    // For searchbar focus\n    if (textInput !== null && autoFocus) {\n      textInput.focus()\n    }\n\n    if (\n      this.props.defaultSuggestions &&\n      prevState.showSuggestions === false &&\n      this.state.focused\n    ) {\n      this.setState({ showSuggestions: true })\n    }\n\n    // Clear Input\n    if (clearInput === false && this.state.userInput.length) {\n      this.setState({\n        userInput: \"\"\n      })\n    }\n\n    // Function on Suggestions Shown\n    if (onSuggestionsShown && this.state.showSuggestions) {\n      onSuggestionsShown(this.state.userInput)\n    }\n\n    if (\n      this.props.defaultSuggestions &&\n      prevState.focused === false &&\n      this.state.focused === true\n    ) {\n      this.setState({ showSuggestions: true })\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.defaultSuggestions && this.state.focused) {\n      this.setState({ showSuggestions: true })\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.handleExtenalClick)\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyDown,\n      state: { showSuggestions, userInput, openUp }\n    } = this\n    let suggestionsListComponent\n\n    if (showSuggestions) {\n      suggestionsListComponent = (\n        <PerfectScrollbar\n          className={classnames(\"suggestions-list\", {\n            \"open-up\": openUp\n          })}\n          ref={el => (this.suggestionList = el)}\n          component=\"ul\"\n          options={{ wheelPropagation: false }}>\n          {this.renderSuggestions()}\n        </PerfectScrollbar>\n      )\n    }\n\n    return (\n      <div className=\"vx-autocomplete-container\" ref=\"container\">\n        <input\n          type=\"text\"\n          onChange={e => {\n            onChange(e)\n            if (this.props.onChange) {\n              this.props.onChange(e)\n            }\n          }}\n          onKeyDown={e => onKeyDown(e)}\n          value={userInput}\n          className={`vx-autocomplete-search ${\n            this.props.className ? this.props.className : \"\"\n          }`}\n          placeholder={this.props.placeholder}\n          onClick={this.onInputClick}\n          ref={el => {\n            return (this.input = el)\n          }}\n          onFocus={e => {\n            this.setState({ focused: true })\n          }}\n          autoFocus={this.props.autoFocus}\n          onBlur={e => {\n            // this.onBlur(e)\n            if (this.props.onBlur) this.props.onBlur(e)\n            this.setState({ focused: false })\n          }}\n        />\n        {suggestionsListComponent}\n      </div>\n    )\n  }\n}\n\nexport default Autocomplete\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.array.isRequired,\n  filterKey: PropTypes.string.isRequired,\n  filterHeaderKey: PropTypes.string,\n  placeholder: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func\n}\n"]},"metadata":{},"sourceType":"module"}