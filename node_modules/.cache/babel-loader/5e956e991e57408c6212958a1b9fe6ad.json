{"ast":null,"code":"import _objectSpread from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/pandusetiawan/Documents/react/df-v1.2/src/views/apps/todo/TaskSidebar.js\";\nimport React from \"react\";\nimport { Input, Button, FormGroup, UncontrolledDropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { X, Info, Star, Tag, Check } from \"react-feather\";\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { connect } from \"react-redux\";\nimport { starTask, completeTask, importantTask, updateTask, updateLabel, addNewTask } from \"../../../redux/actions/todo/index\";\n\nvar TaskSidebar = /*#__PURE__*/function (_React$Component) {\n  _inherits(TaskSidebar, _React$Component);\n\n  function TaskSidebar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TaskSidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TaskSidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      taskToUpdate: null,\n      taskTitle: \"\",\n      taskDesc: \"\",\n      taskStatus: false,\n      taskStarred: false,\n      taskImportant: false,\n      newTask: {\n        title: \"\",\n        desc: \"\",\n        tags: [],\n        isCompleted: false,\n        isImportant: false,\n        isStarred: false\n      }\n    };\n\n    _this.handleNewTaskTags = function (tag) {\n      var tagsArr = _this.state.newTask.tags;\n\n      if (tagsArr.includes(tag)) {\n        tagsArr.splice(tagsArr.indexOf(tag), 1);\n      } else {\n        tagsArr.push(tag);\n      }\n\n      _this.setState(_objectSpread({}, _this.state.newTask, {\n        tags: tag\n      }));\n    };\n\n    _this.renderTags = function (taskArr) {\n      return taskArr.map(function (tag, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chip mb-0 mr-50\",\n          key: i,\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chip-body\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"chip-text\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"bullet bullet-\".concat(tag === \"backend\" ? \"warning\" : tag === \"doc\" ? \"success\" : tag === \"bug\" ? \"danger\" : \"primary\", \" bullet-xs\"),\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"text-capitalize ml-25\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }\n        }, tag))));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TaskSidebar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.taskToUpdate !== null && this.state.taskToUpdate !== this.props.taskToUpdate || this.props.taskToUpdate !== null && this.state.taskStatus !== this.props.taskToUpdate.isCompleted || this.props.taskToUpdate !== null && this.state.taskStarred !== this.props.taskToUpdate.isStarred || this.props.taskToUpdate !== null && this.state.taskImportant !== this.props.taskToUpdate.isImportant) {\n        this.setState({\n          taskToUpdate: this.props.taskToUpdate,\n          taskTitle: this.props.taskToUpdate.title,\n          taskDesc: this.props.taskToUpdate.desc,\n          taskStatus: this.props.taskToUpdate.isCompleted,\n          taskStarred: this.props.taskToUpdate.isStarred,\n          taskImportant: this.props.taskToUpdate.isImportant\n        });\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          taskToUpdate = _this$state.taskToUpdate,\n          taskTitle = _this$state.taskTitle,\n          taskDesc = _this$state.taskDesc,\n          newTask = _this$state.newTask,\n          taskStatus = _this$state.taskStatus;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"task-sidebar \".concat(this.props.addTaskState === true ? \"show\" : \"\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"task-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-between\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"task-type-title text-bold-600\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      }, this.props.taskToUpdate && this.props.taskToUpdate.id ? \"Update Task\" : \"Add Task\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"close-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(X, {\n        className: \"cursor-pointer\",\n        size: 20,\n        onClick: function onClick() {\n          return _this2.props.addTask(\"close\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }\n      })))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"task-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-between mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mark-complete\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }\n      }, this.props.taskToUpdate && this.props.taskToUpdate.id && /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"user-checkbox\",\n        icon: /*#__PURE__*/React.createElement(Check, {\n          className: \"vx-icon\",\n          size: 15,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }\n        }),\n        label: \"\",\n        checked: taskStatus,\n        onChange: function onChange(e) {\n          _this2.props.completeTask(_this2.props.taskToUpdate);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 75\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"task-actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Info, {\n        size: 20,\n        className: \"mr-50 \".concat(this.props.taskToUpdate !== null && this.state.taskImportant || newTask.isImportant ? \"text-success\" : \"\"),\n        onClick: function onClick() {\n          if (_this2.props.taskToUpdate !== null) {\n            _this2.props.importantTask(_this2.props.taskToUpdate);\n          } else {\n            _this2.setState({\n              newTask: _objectSpread({}, _this2.state.newTask, {\n                isImportant: !_this2.state.newTask.isImportant\n              })\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Star, {\n        size: 20,\n        className: \"mr-50 \".concat(this.props.taskToUpdate !== null && this.state.taskStarred || newTask.isStarred ? \"text-warning\" : \"\"),\n        onClick: function onClick() {\n          if (_this2.props.taskToUpdate !== null) {\n            _this2.props.starTask(_this2.props.taskToUpdate);\n          } else {\n            _this2.setState({\n              newTask: _objectSpread({}, _this2.state.newTask, {\n                isStarred: !_this2.state.newTask.isStarred\n              })\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n        className: \"d-inline-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(DropdownToggle, {\n        tag: \"span\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Tag, {\n        className: \"mr-50\",\n        size: 20,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(DropdownMenu, {\n        tag: \"ul\",\n        right: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(DropdownItem, {\n        tag: \"li\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"user-checkbox\",\n        icon: /*#__PURE__*/React.createElement(Check, {\n          className: \"vx-icon\",\n          size: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 31\n          }\n        }),\n        label: \"Frontend\",\n        checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"frontend\") || newTask.tags.includes(\"frontend\") ? true : false,\n        size: \"sm\",\n        onChange: function onChange(e) {\n          e.stopPropagation();\n          if (_this2.props.taskToUpdate !== null) _this2.props.updateLabel(taskToUpdate.id, \"frontend\");else _this2.handleNewTaskTags(\"frontend\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(DropdownItem, {\n        tag: \"li\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"user-checkbox\",\n        icon: /*#__PURE__*/React.createElement(Check, {\n          className: \"vx-icon\",\n          size: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 31\n          }\n        }),\n        label: \"Backend\",\n        checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"backend\") || newTask.tags.includes(\"backend\") ? true : false,\n        size: \"sm\",\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        onChange: function onChange(e) {\n          e.stopPropagation();\n          if (_this2.props.taskToUpdate !== null) _this2.props.updateLabel(taskToUpdate.id, \"backend\");else _this2.handleNewTaskTags(\"backend\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(DropdownItem, {\n        tag: \"li\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"user-checkbox\",\n        icon: /*#__PURE__*/React.createElement(Check, {\n          className: \"vx-icon\",\n          size: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 31\n          }\n        }),\n        label: \"Doc\",\n        checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"doc\") || newTask.tags.includes(\"doc\") ? true : false,\n        size: \"sm\",\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        onChange: function onChange(e) {\n          e.stopPropagation();\n          if (_this2.props.taskToUpdate !== null) _this2.props.updateLabel(taskToUpdate.id, \"doc\");else _this2.handleNewTaskTags(\"doc\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(DropdownItem, {\n        tag: \"li\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"user-checkbox\",\n        icon: /*#__PURE__*/React.createElement(Check, {\n          className: \"vx-icon\",\n          size: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 31\n          }\n        }),\n        label: \"Bug\",\n        checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"bug\") || newTask.tags.includes(\"bug\") ? true : false,\n        size: \"sm\",\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        onChange: function onChange(e) {\n          e.stopPropagation();\n          if (_this2.props.taskToUpdate !== null) _this2.props.updateLabel(taskToUpdate.id, \"bug\");else _this2.handleNewTaskTags(\"bug\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 23\n        }\n      })))))), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: this.props.taskToUpdate !== null ? taskTitle : newTask.title,\n        onChange: function onChange(e) {\n          if (_this2.props.taskToUpdate !== null) {\n            _this2.setState({\n              taskTitle: e.target.value\n            });\n          } else {\n            _this2.setState({\n              newTask: _objectSpread({}, _this2.state.newTask, {\n                title: e.target.value\n              })\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"textarea\",\n        placeholder: \"Description\",\n        rows: \"5\",\n        value: this.props.taskToUpdate !== null ? taskDesc : newTask.desc,\n        onChange: function onChange(e) {\n          if (_this2.props.taskToUpdate !== null) {\n            _this2.setState({\n              taskDesc: e.target.value\n            });\n          } else {\n            _this2.setState({\n              newTask: _objectSpread({}, _this2.state.newTask, {\n                desc: e.target.value\n              })\n            });\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chip-wrapper my-1 d-flex flex-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }\n      }, this.props.taskToUpdate !== null && this.props.taskToUpdate.tags && this.props.taskToUpdate.tags.length > 0 ? this.renderTags(this.props.taskToUpdate.tags) : null), /*#__PURE__*/React.createElement(\"hr\", {\n        className: \"my-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button.Ripple, {\n        className: \"mr-50\",\n        color: \"primary\",\n        onClick: function onClick() {\n          if (_this2.props.taskToUpdate !== null) {\n            _this2.props.updateTask(taskToUpdate.id, taskTitle, taskDesc);\n          } else {\n            _this2.props.addNewTask(_this2.state.newTask);\n          }\n\n          _this2.props.addTask(\"close\");\n\n          _this2.setState({\n            newTask: {\n              title: \"\",\n              desc: \"\",\n              tags: [],\n              isCompleted: false,\n              isImportant: false,\n              isStarred: false\n            }\n          });\n        },\n        disabled: taskTitle.length > 0 || newTask.title.length > 0 ? false : true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }\n      }, taskToUpdate && taskToUpdate.id && this.props.taskToUpdate !== null ? \"Update\" : \"Add\"), /*#__PURE__*/React.createElement(Button.Ripple, {\n        color: \"light\",\n        outline: true,\n        onClick: function onClick() {\n          _this2.props.addTask(\"close\");\n\n          _this2.setState({\n            newTask: {\n              title: \"\",\n              desc: \"\",\n              tags: [],\n              isCompleted: false,\n              isImportant: false,\n              isStarred: false\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 15\n        }\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return TaskSidebar;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.todoApp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  completeTask: completeTask,\n  importantTask: importantTask,\n  starTask: starTask,\n  updateTask: updateTask,\n  updateLabel: updateLabel,\n  addNewTask: addNewTask\n})(TaskSidebar);","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/views/apps/todo/TaskSidebar.js"],"names":["React","Input","Button","FormGroup","UncontrolledDropdown","DropdownItem","DropdownMenu","DropdownToggle","X","Info","Star","Tag","Check","Checkbox","PerfectScrollbar","connect","starTask","completeTask","importantTask","updateTask","updateLabel","addNewTask","TaskSidebar","state","taskToUpdate","taskTitle","taskDesc","taskStatus","taskStarred","taskImportant","newTask","title","desc","tags","isCompleted","isImportant","isStarred","handleNewTaskTags","tag","tagsArr","includes","splice","indexOf","push","setState","renderTags","taskArr","map","i","prevProps","prevState","props","addTaskState","id","addTask","e","stopPropagation","target","value","length","Component","mapStateToProps","app","todoApp"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n  Input,\n  Button,\n  FormGroup,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\"\nimport { X, Info, Star, Tag, Check } from \"react-feather\"\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { connect } from \"react-redux\"\nimport {\n  starTask,\n  completeTask,\n  importantTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n} from \"../../../redux/actions/todo/index\"\nclass TaskSidebar extends React.Component {\n\n  // static getDerivedStateFromProps (props, state){\n  //   if (\n  //    ( props.taskToUpdate !== null &&\n  //     props.taskToUpdate.title !== state.taskTitle) ||\n  //     (props.taskToUpdate !== null && props.taskToUpdate.isCompleted !== state.newTask.isCompleted)\n  //   ) {\n  //     let todosArr = props.app.todo.todos\n  //     let receivedTask =\n  //       props.taskToUpdate !== null ? props.taskToUpdate : 1\n  //     let filteredTask = todosArr.filter(i => i.id === receivedTask.id)\n  //     let taskToUpdate, taskTitle, taskDesc\n  //     filteredTask.map(task => {\n  //       return (\n  //         (taskToUpdate = task),\n  //         (taskTitle = task.title),\n  //         (taskDesc = task.desc)\n  //       )\n  //     })\n  //     return {\n  //       taskToUpdate,\n  //       taskTitle,\n  //       taskDesc\n  //     }\n  //   }\n  //   return null\n  // }\n\n  state = {\n    taskToUpdate: null,\n    taskTitle: \"\",\n    taskDesc: \"\",\n    taskStatus : false,\n    taskStarred : false,\n    taskImportant  : false,\n    newTask: {\n      title: \"\",\n      desc: \"\",\n      tags: [],\n      isCompleted: false,\n      isImportant: false,\n      isStarred: false\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(\n      (this.props.taskToUpdate !== null && this.state.taskToUpdate !== this.props.taskToUpdate) || \n      (this.props.taskToUpdate !== null && this.state.taskStatus !== this.props.taskToUpdate.isCompleted) ||\n      (this.props.taskToUpdate !== null && this.state.taskStarred !== this.props.taskToUpdate.isStarred) ||\n      (this.props.taskToUpdate !== null && this.state.taskImportant !== this.props.taskToUpdate.isImportant) \n      ){\n      this.setState({ \n        taskToUpdate : this.props.taskToUpdate, \n        taskTitle :  this.props.taskToUpdate.title,\n        taskDesc :  this.props.taskToUpdate.desc,\n        taskStatus : this.props.taskToUpdate.isCompleted,\n        taskStarred : this.props.taskToUpdate.isStarred,\n        taskImportant : this.props.taskToUpdate.isImportant\n      })\n    }\n    else{\n      return \n    }\n  }\n  \n\n\n  handleNewTaskTags = tag => {\n    let tagsArr = this.state.newTask.tags\n    if (tagsArr.includes(tag)) {\n      tagsArr.splice(tagsArr.indexOf(tag), 1)\n    } else {\n      tagsArr.push(tag)\n    }\n    this.setState({\n      ...this.state.newTask,\n      tags: tag\n    })\n  }\n\n  renderTags = taskArr => {\n    return taskArr.map((tag, i) => (\n      <div className=\"chip mb-0 mr-50\" key={i}>\n        <div className=\"chip-body\">\n          <span className=\"chip-text\">\n            <span\n              className={`bullet bullet-${\n                tag === \"backend\"\n                  ? \"warning\"\n                  : tag === \"doc\"\n                  ? \"success\"\n                  : tag === \"bug\"\n                  ? \"danger\"\n                  : \"primary\"\n              } bullet-xs`}\n            />\n            <span className=\"text-capitalize ml-25\">{tag}</span>\n          </span>\n        </div>\n      </div>\n    ))\n  }\n\n  render() {\n    const { taskToUpdate, taskTitle, taskDesc, newTask, taskStatus } = this.state\n\n    return (\n      <div\n        className={`task-sidebar ${\n          this.props.addTaskState === true ? \"show\" : \"\"\n        }`}\n      >\n        <div className=\"task-header\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"task-type-title text-bold-600\">\n              <h3>\n                {this.props.taskToUpdate && this.props.taskToUpdate.id\n                  ? \"Update Task\"\n                  : \"Add Task\"}\n              </h3>\n            </div>\n            <div className=\"close-icon\">\n              <X\n                className=\"cursor-pointer\"\n                size={20}\n                onClick={() => this.props.addTask(\"close\")}\n              />\n            </div>\n          </div>\n        </div>\n        <PerfectScrollbar>\n          <div className=\"task-body\">\n            <div className=\"d-flex justify-content-between mb-2\">\n              <div className=\"mark-complete\">\n                {this.props.taskToUpdate && this.props.taskToUpdate.id && <Checkbox\n                  color=\"primary\"\n                  className=\"user-checkbox\"\n                  icon={<Check className=\"vx-icon\" size={15} />}\n                  label={\"\"}\n                  checked={ taskStatus }                  \n                  onChange={e =>  {\n                    this.props.completeTask(this.props.taskToUpdate)\n                  }}\n                />}\n              </div>\n              <div className=\"task-actions\">\n                <Info\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null && this.state.taskImportant) ||\n                      newTask.isImportant \n                      ? \"text-success\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.importantTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isImportant : !this.state.newTask.isImportant\n                        }\n                      })\n                    }\n                      \n                  }}\n                />\n                <Star\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null  && this.state.taskStarred) ||\n                      newTask.isStarred \n                      ? \"text-warning\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.starTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isStarred : !this.state.newTask.isStarred\n                        }\n                      })\n                    }\n                    \n                  }}\n                />\n                <UncontrolledDropdown className=\"d-inline-block\">\n                  <DropdownToggle tag=\"span\">\n                    <Tag className=\"mr-50\" size={20} />\n                  </DropdownToggle>\n                  <DropdownMenu tag=\"ul\" right>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Frontend\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"frontend\") )||\n                            (newTask.tags.includes(\"frontend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"frontend\")\n                          else this.handleNewTaskTags(\"frontend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Backend\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"backend\"))||\n                            (newTask.tags.includes(\"backend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"backend\")\n                            else this.handleNewTaskTags(\"backend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Doc\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"doc\"))||\n                            (newTask.tags.includes(\"doc\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"doc\")\n                          else this.handleNewTaskTags(\"doc\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Bug\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"bug\"))||\n                            (newTask.tags.includes(\"bug\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"bug\")\n                          else this.handleNewTaskTags(\"bug\")\n                        }}\n                      />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </div>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Title\"\n                value={\n                  this.props.taskToUpdate !== null ? taskTitle : newTask.title\n                }\n                onChange={e => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.setState({\n                      taskTitle : e.target.value\n                    })\n                  }else{\n                    this.setState({ newTask : {\n                      ...this.state.newTask,\n                      title : e.target.value\n                    } })\n                  }\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                placeholder=\"Description\"\n                rows=\"5\"\n                value={\n                  this.props.taskToUpdate !== null ? taskDesc : newTask.desc\n                }\n                onChange={e => {\n                  if (this.props.taskToUpdate !== null){\n                    this.setState({\n                      taskDesc: e.target.value\n                    })\n                  }\n                  else{\n                    this.setState({ newTask : {\n                      ...this.state.newTask,\n                      desc : e.target.value\n                    } })\n                  }\n                }}\n              />\n            </FormGroup>\n            <div className=\"chip-wrapper my-1 d-flex flex-wrap\">\n              {this.props.taskToUpdate !== null &&\n              this.props.taskToUpdate.tags &&\n              this.props.taskToUpdate.tags.length > 0\n                ? this.renderTags(this.props.taskToUpdate.tags)\n                : null}\n            </div>\n\n            <hr className=\"my-2\" />\n            <div className=\"d-flex justify-content-end\">\n              <Button.Ripple\n                className=\"mr-50\"\n                color=\"primary\"\n                onClick={() => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.props.updateTask(taskToUpdate.id, taskTitle, taskDesc)\n                  } else {\n                    this.props.addNewTask(this.state.newTask)\n                  }\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    newTask: {\n                      title: \"\",\n                      desc: \"\",\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n                disabled={\n                  taskTitle.length > 0 || newTask.title.length > 0\n                    ? false\n                    : true\n                }\n              >\n                {taskToUpdate &&\n                taskToUpdate.id &&\n                this.props.taskToUpdate !== null\n                  ? \"Update\"\n                  : \"Add\"}\n              </Button.Ripple>\n              <Button.Ripple\n                color=\"light\"\n                outline\n                onClick={() => {\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    newTask: {\n                      title: \"\",\n                      desc: \"\",\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n              >\n                Cancel\n              </Button.Ripple>\n            </div> \n          </div>\n        </PerfectScrollbar>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    app: state.todoApp\n  }\n}\n\nexport default connect(mapStateToProps, {\n  completeTask,\n  importantTask,\n  starTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n})(TaskSidebar)\n"]},"metadata":{},"sourceType":"module"}