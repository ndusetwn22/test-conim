{"ast":null,"code":"const initialState = {\n  todos: [],\n  routeParam: null,\n  filteredTodos: []\n};\n\nconst todo = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return { ...state,\n        todos: action.todos,\n        routeParam: action.routeParams\n      };\n\n    case \"UPDATE_TODOS\":\n      let todo = action.todo;\n      let updatedState = { ...state.todos,\n        [todo.id]: { ...todo\n        }\n      };\n      return { ...state,\n        todos: updatedState\n      };\n\n    case \"COMPLETE_TASK\":\n      state.todos.find(i => i.id === action.id).isCompleted = !action.value;\n      return { ...state\n      };\n\n    case \"STAR_TASK\":\n      state.todos.find(i => i.id === action.id).isStarred = !action.value;\n      return { ...state\n      };\n\n    case \"IMPORTANT_TASK\":\n      state.todos.find(i => i.id === action.id).isImportant = !action.value;\n      return { ...state\n      };\n\n    case \"TRASH_TASK\":\n      state.todos.find(i => i.id === action.id).isTrashed = true;\n      return { ...state\n      };\n\n    case \"UPDATE_LABEL\":\n      let taskToUpdate = state.todos.find(i => i.id === action.id).tags;\n      if (!taskToUpdate.includes(action.label)) taskToUpdate.push(action.label);else taskToUpdate.splice(taskToUpdate.indexOf(action.label), 1);\n      return { ...state\n      };\n\n    case \"UPDATE_TASK\":\n      let todoToUpdate = state.todos.find(i => i.id === action.id);\n      todoToUpdate.title = action.title;\n      todoToUpdate.desc = action.desc;\n      return { ...state\n      };\n\n    case \"ADD_TASK\":\n      return { ...state\n      };\n\n    case \"SEARCH_TASK\":\n      if (action.val.length) {\n        let filteredTodos = state.todos.filter(query => {\n          return query.title.toLowerCase().includes(action.val) || query.desc.toLowerCase().includes(action.val);\n        });\n        return { ...state,\n          filteredTodos\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case \"CHANGE_FILTER\":\n      state.routeParam = action.filter;\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todo;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.1/src/redux/reducers/todo/todo.js"],"names":["initialState","todos","routeParam","filteredTodos","todo","state","action","type","routeParams","updatedState","id","find","i","isCompleted","value","isStarred","isImportant","isTrashed","taskToUpdate","tags","includes","label","push","splice","indexOf","todoToUpdate","title","desc","val","length","filter","query","toLowerCase"],"mappings":"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","sourcesContent":["const initialState = {\n  todos: [],\n  routeParam: null,\n  filteredTodos: []\n}\n\nconst todo = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_TODOS\":\n      return { ...state, todos: action.todos, routeParam: action.routeParams }\n    case \"UPDATE_TODOS\":\n      let todo = action.todo\n      let updatedState = { ...state.todos, [todo.id]: { ...todo } }\n      return { ...state, todos: updatedState }\n\n    case \"COMPLETE_TASK\":\n      state.todos.find(i => i.id === action.id).isCompleted = !action.value\n      return { ...state }\n\n    case \"STAR_TASK\":\n      state.todos.find(i => i.id === action.id).isStarred = !action.value\n      return { ...state }\n\n    case \"IMPORTANT_TASK\":\n      state.todos.find(i => i.id === action.id).isImportant = !action.value\n      return { ...state }\n\n    case \"TRASH_TASK\":\n      state.todos.find(i => i.id === action.id).isTrashed = true\n      return { ...state }\n\n    case \"UPDATE_LABEL\":\n      let taskToUpdate = state.todos.find(i => i.id === action.id).tags\n      if (!taskToUpdate.includes(action.label)) taskToUpdate.push(action.label)\n      else taskToUpdate.splice(taskToUpdate.indexOf(action.label), 1)\n      return { ...state }\n\n    case \"UPDATE_TASK\":\n      let todoToUpdate = state.todos.find(i => i.id === action.id)\n      todoToUpdate.title = action.title\n      todoToUpdate.desc = action.desc\n      return { ...state }\n\n    case \"ADD_TASK\":\n      return { ...state }\n\n    case \"SEARCH_TASK\":\n      if (action.val.length) {\n        let filteredTodos = state.todos.filter(query => {\n          return (\n            query.title.toLowerCase().includes(action.val) ||\n            query.desc.toLowerCase().includes(action.val)\n          )\n        })\n        return { ...state, filteredTodos }\n      } else {\n        return { ...state }\n      }\n\n    case \"CHANGE_FILTER\":\n      state.routeParam = action.filter\n      return { ...state }\n\n    default:\n      return state\n  }\n}\n\nexport default todo\n"]},"metadata":{},"sourceType":"module"}