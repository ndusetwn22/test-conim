{"ast":null,"code":"import _classCallCheck from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{Card,CardHeader,CardTitle,CardBody,Row,Col,Table,Collapse,Spinner}from\"reactstrap\";import{ChevronDown,RotateCw,X}from\"react-feather\";import classnames from\"classnames\";import Breadcrumbs from\"../../../../components/@vuexy/breadCrumbs/BreadCrumb\";var CardActions=/*#__PURE__*/function(_React$Component){_inherits(CardActions,_React$Component);var _super=_createSuper(CardActions);function CardActions(){var _this;_classCallCheck(this,CardActions);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={collapse:true,reload:false,isVisible:true,status:\"Opened\",isVisibleAll:true,reloadAll:false,collapseAll:true,statusAll:\"Opened\"};_this.refreshCard=function(){_this.setState({reload:true});setTimeout(function(){_this.setState({reload:false});},2000);};_this.refreshCardAll=function(){_this.setState({reloadAll:true});setTimeout(function(){_this.setState({reloadAll:false});},2000);};_this.toggle=function(){_this.setState(function(state){return{collapse:!state.collapse};});};_this.toggleAll=function(){_this.setState(function(state){return{collapseAll:!state.collapseAll};});};_this.onEntered=function(){_this.setState({status:\"Opened\"});};_this.onEnteredAll=function(){_this.setState({status:\"Opened\"});};_this.onEntering=function(){_this.setState({status:\"Opening...\"});};_this.onEnteringAll=function(){_this.setState({statusAll:\"Opening...\"});};_this.onEnteredAll=function(){_this.setState({statusAll:\"Opened\"});};_this.onExited=function(){_this.setState({status:\"Closed\"});};_this.onExiting=function(){_this.setState({status:\"Closing...\"});};_this.onExitingAll=function(){_this.setState({statusAll:\"Closing...\"});};_this.onExitedAll=function(){_this.setState({statusAll:\"Closed\"});};_this.removeCard=function(){_this.setState({isVisible:false});};_this.removeCardAll=function(){_this.setState({isVisibleAll:false});};return _this;}_createClass(CardActions,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Breadcrumbs,{breadCrumbTitle:\"Card Actions\",breadCrumbParent:\"Card\",breadCrumbActive:\"Card Actions\"}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Card Actions\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Table,{responsive:true,bordered:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Action\"),/*#__PURE__*/React.createElement(\"th\",null,\"Icon\"),/*#__PURE__*/React.createElement(\"th\",null,\"Details\"))),/*#__PURE__*/React.createElement(\"tbody\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"Collapse\"),/*#__PURE__*/React.createElement(\"td\",{className:\"text-center\"},/*#__PURE__*/React.createElement(ChevronDown,{className:\"collapse-icon\",size:15})),/*#__PURE__*/React.createElement(\"td\",null,\" Collapse card content using collapse action.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"Refresh Content\"),/*#__PURE__*/React.createElement(\"td\",{className:\"text-center\"},/*#__PURE__*/React.createElement(RotateCw,{size:15})),/*#__PURE__*/React.createElement(\"td\",null,\"Refresh your card content using refresh action.\")),/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",null,\"Remove Card\"),/*#__PURE__*/React.createElement(\"td\",{className:\"text-center\"},/*#__PURE__*/React.createElement(X,{size:15})),/*#__PURE__*/React.createElement(\"td\",null,\" Remove card from page using remove card action\"))))))),/*#__PURE__*/React.createElement(Col,{md:\"6\",sm:\"12\"},/*#__PURE__*/React.createElement(Card,{className:classnames(\"card-action\",{\"card-collapsed\":this.state.status===\"Closed\",\"card-shown\":this.state.status===\"Opened\",closing:this.state.status===\"Closing...\",opening:this.state.status===\"Opening...\"})},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Collapsible\"),/*#__PURE__*/React.createElement(ChevronDown,{className:\"collapse-icon\",size:15,onClick:this.toggle})),/*#__PURE__*/React.createElement(Collapse,{isOpen:this.state.collapse,onExited:this.onExited,onEntered:this.onEntered,onExiting:this.onExiting,onEntering:this.onEntering},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"p\",null,\"You can create collapsible card using reactstrap's collapse component, to create a collapsible card you'll have to manage it's collapse state.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Click on \",/*#__PURE__*/React.createElement(ChevronDown,{size:15}),\" to see card collapse in action\"))))),/*#__PURE__*/React.createElement(Col,{md:\"6\",sm:\"12\"},/*#__PURE__*/React.createElement(Card,{className:classnames(\"card-reload card-action\",{refreshing:this.state.reload})},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Refresh\"),/*#__PURE__*/React.createElement(RotateCw,{size:15,onClick:this.refreshCard})),/*#__PURE__*/React.createElement(CardBody,null,this.state.reload?/*#__PURE__*/React.createElement(Spinner,{color:\"primary\",className:\"reload-spinner\"}):\"\",/*#__PURE__*/React.createElement(\"p\",null,\"You can add refresh content action to card by adding class\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\".card-reload\"),\" with your card tag, and add conditional spinner into card body to showp when card is refreshing.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Click on \",/*#__PURE__*/React.createElement(RotateCw,{size:15}),\" to see card refresh in action\")))),/*#__PURE__*/React.createElement(Col,{md:\"6\",sm:\"12\"},/*#__PURE__*/React.createElement(Card,{className:classnames(\"card-action\",{\"d-none\":this.state.isVisible===false})},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Remove Card\"),/*#__PURE__*/React.createElement(X,{size:15,onClick:this.removeCard})),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"p\",null,\"You can create a removable card by managing state\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\"isVisible\"),\", which will add conditional d-none class which clicked on icon to remove your card.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Click on \",/*#__PURE__*/React.createElement(X,{size:15}),\" to see card refresh in action\")))),/*#__PURE__*/React.createElement(Col,{md:\"6\",sm:\"12\"},/*#__PURE__*/React.createElement(Card,{className:classnames(\"card-action card-reload\",{\"d-none\":this.state.isVisibleAll===false,refreshing:this.state.reloadAll,\"card-collapsed\":this.state.statusAll===\"Closed\",closing:this.state.statusAll===\"Closing...\",opening:this.state.statusAll===\"Opening...\"})},/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"All Actions\"),/*#__PURE__*/React.createElement(\"div\",{className:\"actions\"},/*#__PURE__*/React.createElement(ChevronDown,{className:\"collapse-icon mr-50\",size:15,onClick:this.toggleAll}),/*#__PURE__*/React.createElement(RotateCw,{className:\"mr-50\",size:15,onClick:this.refreshCardAll}),/*#__PURE__*/React.createElement(X,{size:15,onClick:this.removeCardAll}))),/*#__PURE__*/React.createElement(Collapse,{isOpen:this.state.collapseAll,onExited:this.onExitedAll,onEntered:this.onEnteredAll,onExiting:this.onExitingAll,onEntering:this.onEnteringAll},/*#__PURE__*/React.createElement(CardBody,null,this.state.reloadAll?/*#__PURE__*/React.createElement(Spinner,{color:\"primary\",className:\"reload-spinner\"}):\"\",\"You can also add all three action together by managing all three actions's required classes and by managing their states.\"))))));}}]);return CardActions;}(React.Component);export default CardActions;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/views/ui-elements/cards/actions/CardActions.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","Row","Col","Table","Collapse","Spinner","ChevronDown","RotateCw","X","classnames","Breadcrumbs","CardActions","state","collapse","reload","isVisible","status","isVisibleAll","reloadAll","collapseAll","statusAll","refreshCard","setState","setTimeout","refreshCardAll","toggle","toggleAll","onEntered","onEnteredAll","onEntering","onEnteringAll","onExited","onExiting","onExitingAll","onExitedAll","removeCard","removeCardAll","closing","opening","refreshing","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Row,\n  Col,\n  Table,\n  Collapse,\n  Spinner\n} from \"reactstrap\"\nimport { ChevronDown, RotateCw, X } from \"react-feather\"\nimport classnames from \"classnames\"\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\"\n\nclass CardActions extends React.Component {\n  state = {\n    collapse: true,\n    reload: false,\n    isVisible: true,\n    status: \"Opened\",\n    isVisibleAll: true,\n    reloadAll: false,\n    collapseAll: true,\n    statusAll: \"Opened\"\n  }\n\n  refreshCard = () => {\n    this.setState({ reload: true })\n    setTimeout(() => {\n      this.setState({ reload: false })\n    }, 2000)\n  }\n  refreshCardAll = () => {\n    this.setState({ reloadAll: true })\n    setTimeout(() => {\n      this.setState({ reloadAll: false })\n    }, 2000)\n  }\n\n  toggle = () => {\n    this.setState(state => ({ collapse: !state.collapse }))\n  }\n  toggleAll = () => {\n    this.setState(state => ({ collapseAll: !state.collapseAll }))\n  }\n  onEntered = () => {\n    this.setState({ status: \"Opened\" })\n  }\n  onEnteredAll = () => {\n    this.setState({ status: \"Opened\" })\n  }\n\n  onEntering = () => {\n    this.setState({ status: \"Opening...\" })\n  }\n  onEnteringAll = () => {\n    this.setState({ statusAll: \"Opening...\" })\n  }\n\n  onEnteredAll = () => {\n    this.setState({ statusAll: \"Opened\" })\n  }\n\n  onExited = () => {\n    this.setState({ status: \"Closed\" })\n  }\n\n  onExiting = () => {\n    this.setState({ status: \"Closing...\" })\n  }\n\n  onExitingAll = () => {\n    this.setState({ statusAll: \"Closing...\" })\n  }\n  onExitedAll = () => {\n    this.setState({ statusAll: \"Closed\" })\n  }\n\n  removeCard = () => {\n    this.setState({ isVisible: false })\n  }\n  removeCardAll = () => {\n    this.setState({ isVisibleAll: false })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Card Actions\"\n          breadCrumbParent=\"Card\"\n          breadCrumbActive=\"Card Actions\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Card Actions</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Table responsive bordered>\n                  <thead>\n                    <tr>\n                      <th>Action</th>\n                      <th>Icon</th>\n                      <th>Details</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>Collapse</td>\n                      <td className=\"text-center\">\n                        <ChevronDown className=\"collapse-icon\" size={15} />\n                      </td>\n                      <td> Collapse card content using collapse action.</td>\n                    </tr>\n                    <tr>\n                      <td>Refresh Content</td>\n                      <td className=\"text-center\">\n                        <RotateCw size={15} />\n                      </td>\n                      <td>Refresh your card content using refresh action.</td>\n                    </tr>\n                    <tr>\n                      <td>Remove Card</td>\n                      <td className=\"text-center\">\n                        <X size={15} />\n                      </td>\n                      <td> Remove card from page using remove card action</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action\", {\n                \"card-collapsed\": this.state.status === \"Closed\",\n                \"card-shown\": this.state.status === \"Opened\",\n                closing: this.state.status === \"Closing...\",\n                opening: this.state.status === \"Opening...\"\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Collapsible</CardTitle>\n                <ChevronDown\n                  className=\"collapse-icon\"\n                  size={15}\n                  onClick={this.toggle}\n                />\n              </CardHeader>\n              <Collapse\n                isOpen={this.state.collapse}\n                onExited={this.onExited}\n                onEntered={this.onEntered}\n                onExiting={this.onExiting}\n                onEntering={this.onEntering}\n              >\n                <CardBody>\n                  <p>\n                    You can create collapsible card using reactstrap's collapse\n                    component, to create a collapsible card you'll have to\n                    manage it's collapse state.\n                  </p>\n                  <p>\n                    Click on <ChevronDown size={15} /> to see card collapse in\n                    action\n                  </p>\n                </CardBody>\n              </Collapse>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-reload card-action\", {\n                refreshing: this.state.reload\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Refresh</CardTitle>\n                <RotateCw size={15} onClick={this.refreshCard} />\n              </CardHeader>\n              <CardBody>\n                {this.state.reload ? (\n                  <Spinner color=\"primary\" className=\"reload-spinner\" />\n                ) : (\n                  \"\"\n                )}\n                <p>\n                  You can add refresh content action to card by adding class{\" \"}\n                  <code>.card-reload</code> with your card tag, and add\n                  conditional spinner into card body to showp when card is\n                  refreshing.\n                </p>\n                <p>\n                  Click on <RotateCw size={15} /> to see card refresh in action\n                </p>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action\", {\n                \"d-none\": this.state.isVisible === false\n              })}\n            >\n              <CardHeader>\n                <CardTitle>Remove Card</CardTitle>\n                <X size={15} onClick={this.removeCard} />\n              </CardHeader>\n              <CardBody>\n                <p>\n                  You can create a removable card by managing state{\" \"}\n                  <code>isVisible</code>, which will add conditional d-none\n                  class which clicked on icon to remove your card.\n                </p>\n                <p>\n                  Click on <X size={15} /> to see card refresh in action\n                </p>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col md=\"6\" sm=\"12\">\n            <Card\n              className={classnames(\"card-action card-reload\", {\n                \"d-none\": this.state.isVisibleAll === false,\n                refreshing: this.state.reloadAll,\n                \"card-collapsed\": this.state.statusAll === \"Closed\",\n                closing: this.state.statusAll === \"Closing...\",\n                opening: this.state.statusAll === \"Opening...\"\n              })}\n            >\n              <CardHeader>\n                <CardTitle>All Actions</CardTitle>\n                <div className=\"actions\">\n                  <ChevronDown\n                    className=\"collapse-icon mr-50\"\n                    size={15}\n                    onClick={this.toggleAll}\n                  />\n                  <RotateCw\n                    className=\"mr-50\"\n                    size={15}\n                    onClick={this.refreshCardAll}\n                  />\n                  <X size={15} onClick={this.removeCardAll} />\n                </div>\n              </CardHeader>\n              <Collapse\n                isOpen={this.state.collapseAll}\n                onExited={this.onExitedAll}\n                onEntered={this.onEnteredAll}\n                onExiting={this.onExitingAll}\n                onEntering={this.onEnteringAll}\n              >\n                <CardBody>\n                  {this.state.reloadAll ? (\n                    <Spinner color=\"primary\" className=\"reload-spinner\" />\n                  ) : (\n                    \"\"\n                  )}\n                  You can also add all three action together by managing all\n                  three actions's required classes and by managing their states.\n                </CardBody>\n              </Collapse>\n            </Card>\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\nexport default CardActions\n"]},"metadata":{},"sourceType":"module"}