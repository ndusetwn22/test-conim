{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\template-belajar-react\\\\src\\\\views\\\\tables\\\\react-tables\\\\NestedTable.js\";\nimport React from \"react\";\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\";\nimport ReactTable from \"react-table\";\nimport treeTableHOC from \"react-table/lib/hoc/treeTable\";\nimport { nestedData } from \"./TableData\";\nconst TreeTable = treeTableHOC(ReactTable);\n\nclass NestedTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: nestedData\n    };\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, \"Nested\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TreeTable, {\n      filterable: true,\n      className: \"nested-table\",\n      defaultFilterMethod: (filter, row, column) => {\n        const id = filter.pivotId || filter.id;\n        return row[id] !== undefined ? String(row[id]).toLowerCase().includes(filter.value.toLowerCase()) : true;\n      },\n      data: data,\n      columns: [// we only require the accessor so TreeTable\n      // can handle the pivot automatically\n      // any other columns we want to display\n      {\n        Header: \"First Name\",\n        accessor: \"first_name\"\n      }, {\n        Header: \"Last Name\",\n        accessor: \"last_name\"\n      }, {\n        Header: \"Company Name\",\n        accessor: \"company_name\"\n      }, {\n        Header: \"Address\",\n        accessor: \"address\"\n      }, {\n        Header: \"Phone 1\",\n        accessor: \"phone1\"\n      }, {\n        Header: \"Email\",\n        accessor: \"email\"\n      }],\n      defaultPageSize: 10,\n      SubComponent: row => {\n        // a SubComponent just for the final detail\n        const columns = [{\n          Header: \"Property\",\n          accessor: \"property\",\n          width: 200,\n          Cell: ci => {\n            return `${ci.value}:`;\n          },\n          style: {\n            backgroundColor: \"#DDD\",\n            textAlign: \"right\",\n            fontWeight: \"bold\"\n          }\n        }, {\n          Header: \"Value\",\n          accessor: \"value\"\n        }];\n        const rowData = Object.keys(row.original).map(key => {\n          return {\n            property: key,\n            value: row.original[key].toString()\n          };\n        });\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            padding: \"10px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(ReactTable, {\n          data: rowData,\n          columns: columns,\n          pageSize: rowData.length,\n          showPagination: false,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default NestedTable;","map":{"version":3,"sources":["E:/react/template-belajar-react/src/views/tables/react-tables/NestedTable.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","ReactTable","treeTableHOC","nestedData","TreeTable","NestedTable","Component","state","data","render","filter","row","column","id","pivotId","undefined","String","toLowerCase","includes","value","Header","accessor","columns","width","Cell","ci","style","backgroundColor","textAlign","fontWeight","rowData","Object","keys","original","map","key","property","toString","padding","length"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\nimport ReactTable from \"react-table\"\nimport treeTableHOC from \"react-table/lib/hoc/treeTable\"\nimport { nestedData } from \"./TableData\"\nconst TreeTable = treeTableHOC(ReactTable)\nclass NestedTable extends React.Component {\n  state = {\n    data: nestedData\n  }\n  render() {\n    const { data } = this.state\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Nested</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TreeTable\n            filterable\n            className=\"nested-table\"\n            defaultFilterMethod={(filter, row, column) => {\n              const id = filter.pivotId || filter.id\n              return row[id] !== undefined\n                ? String(row[id])\n                    .toLowerCase()\n                    .includes(filter.value.toLowerCase())\n                : true\n            }}\n            data={data}\n            columns={[\n              // we only require the accessor so TreeTable\n              // can handle the pivot automatically\n\n              // any other columns we want to display\n              {\n                Header: \"First Name\",\n                accessor: \"first_name\"\n              },\n              {\n                Header: \"Last Name\",\n                accessor: \"last_name\"\n              },\n              {\n                Header: \"Company Name\",\n                accessor: \"company_name\"\n              },\n              {\n                Header: \"Address\",\n                accessor: \"address\"\n              },\n              {\n                Header: \"Phone 1\",\n                accessor: \"phone1\"\n              },\n              {\n                Header: \"Email\",\n                accessor: \"email\"\n              }\n            ]}\n            defaultPageSize={10}\n            SubComponent={row => {\n              // a SubComponent just for the final detail\n              const columns = [\n                {\n                  Header: \"Property\",\n                  accessor: \"property\",\n                  width: 200,\n                  Cell: ci => {\n                    return `${ci.value}:`\n                  },\n                  style: {\n                    backgroundColor: \"#DDD\",\n                    textAlign: \"right\",\n                    fontWeight: \"bold\"\n                  }\n                },\n                { Header: \"Value\", accessor: \"value\" }\n              ]\n              const rowData = Object.keys(row.original).map(key => {\n                return {\n                  property: key,\n                  value: row.original[key].toString()\n                }\n              })\n              return (\n                <div style={{ padding: \"10px\" }}>\n                  <ReactTable\n                    data={rowData}\n                    columns={columns}\n                    pageSize={rowData.length}\n                    showPagination={false}\n                  />\n                </div>\n              )\n            }}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default NestedTable\n"]},"metadata":{},"sourceType":"module"}