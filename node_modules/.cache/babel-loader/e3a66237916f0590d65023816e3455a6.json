{"ast":null,"code":"(function () {\n  if (typeof self === 'undefined' || !self.Prism || !self.document) {\n    return;\n  }\n  /**\n   * Plugin name which is used as a class name for <pre> which is activating the plugin\n   * @type {String}\n   */\n\n\n  var PLUGIN_NAME = 'line-numbers';\n  /**\n   * Regular expression used for determining line breaks\n   * @type {RegExp}\n   */\n\n  var NEW_LINE_EXP = /\\n(?!$)/g;\n  /**\n   * Global exports\n   */\n\n  var config = Prism.plugins.lineNumbers = {\n    /**\n     * Get node for provided line number\n     * @param {Element} element pre element\n     * @param {Number} number line number\n     * @return {Element|undefined}\n     */\n    getLine: function (element, number) {\n      if (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n        return;\n      }\n\n      var lineNumberRows = element.querySelector('.line-numbers-rows');\n      var lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n      var lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n      if (number < lineNumberStart) {\n        number = lineNumberStart;\n      }\n\n      if (number > lineNumberEnd) {\n        number = lineNumberEnd;\n      }\n\n      var lineIndex = number - lineNumberStart;\n      return lineNumberRows.children[lineIndex];\n    },\n\n    /**\n     * Resizes the line numbers of the given element.\n     *\n     * This function will not add line numbers. It will only resize existing ones.\n     * @param {HTMLElement} element A `<pre>` element with line numbers.\n     * @returns {void}\n     */\n    resize: function (element) {\n      resizeElements([element]);\n    },\n\n    /**\n     * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n     * the current viewport.\n     *\n     * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n     *\n     * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n     *\n     * @type {boolean}\n     */\n    assumeViewportIndependence: true\n  };\n  /**\n   * Resizes the given elements.\n   *\n   * @param {HTMLElement[]} elements\n   */\n\n  function resizeElements(elements) {\n    elements = elements.filter(function (e) {\n      var codeStyles = getStyles(e);\n      var whiteSpace = codeStyles['white-space'];\n      return whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n    });\n\n    if (elements.length == 0) {\n      return;\n    }\n\n    var infos = elements.map(function (element) {\n      var codeElement = element.querySelector('code');\n      var lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\n      if (!codeElement || !lineNumbersWrapper) {\n        return undefined;\n      }\n      /** @type {HTMLElement} */\n\n\n      var lineNumberSizer = element.querySelector('.line-numbers-sizer');\n      var codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n      if (!lineNumberSizer) {\n        lineNumberSizer = document.createElement('span');\n        lineNumberSizer.className = 'line-numbers-sizer';\n        codeElement.appendChild(lineNumberSizer);\n      }\n\n      lineNumberSizer.innerHTML = '0';\n      lineNumberSizer.style.display = 'block';\n      var oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n      lineNumberSizer.innerHTML = '';\n      return {\n        element: element,\n        lines: codeLines,\n        lineHeights: [],\n        oneLinerHeight: oneLinerHeight,\n        sizer: lineNumberSizer\n      };\n    }).filter(Boolean);\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var lines = info.lines;\n      var lineHeights = info.lineHeights;\n      var oneLinerHeight = info.oneLinerHeight;\n      lineHeights[lines.length - 1] = undefined;\n      lines.forEach(function (line, index) {\n        if (line && line.length > 1) {\n          var e = lineNumberSizer.appendChild(document.createElement('span'));\n          e.style.display = 'block';\n          e.textContent = line;\n        } else {\n          lineHeights[index] = oneLinerHeight;\n        }\n      });\n    });\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var lineHeights = info.lineHeights;\n      var childIndex = 0;\n\n      for (var i = 0; i < lineHeights.length; i++) {\n        if (lineHeights[i] === undefined) {\n          lineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n        }\n      }\n    });\n    infos.forEach(function (info) {\n      var lineNumberSizer = info.sizer;\n      var wrapper = info.element.querySelector('.line-numbers-rows');\n      lineNumberSizer.style.display = 'none';\n      lineNumberSizer.innerHTML = '';\n      info.lineHeights.forEach(function (height, lineNumber) {\n        wrapper.children[lineNumber].style.height = height + 'px';\n      });\n    });\n  }\n  /**\n   * Returns style declarations for the element\n   * @param {Element} element\n   */\n\n\n  var getStyles = function (element) {\n    if (!element) {\n      return null;\n    }\n\n    return window.getComputedStyle ? getComputedStyle(element) : element.currentStyle || null;\n  };\n\n  var lastWidth = undefined;\n  window.addEventListener('resize', function () {\n    if (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n      return;\n    }\n\n    lastWidth = window.innerWidth;\n    resizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n  });\n  Prism.hooks.add('complete', function (env) {\n    if (!env.code) {\n      return;\n    }\n\n    var code =\n    /** @type {Element} */\n    env.element;\n    var pre =\n    /** @type {HTMLElement} */\n    code.parentNode; // works only for <code> wrapped inside <pre> (not inline)\n\n    if (!pre || !/pre/i.test(pre.nodeName)) {\n      return;\n    } // Abort if line numbers already exists\n\n\n    if (code.querySelector('.line-numbers-rows')) {\n      return;\n    } // only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\n\n    if (!Prism.util.isActive(code, PLUGIN_NAME)) {\n      return;\n    } // Remove the class 'line-numbers' from the <code>\n\n\n    code.classList.remove(PLUGIN_NAME); // Add the class 'line-numbers' to the <pre>\n\n    pre.classList.add(PLUGIN_NAME);\n    var match = env.code.match(NEW_LINE_EXP);\n    var linesNum = match ? match.length + 1 : 1;\n    var lineNumbersWrapper;\n    var lines = new Array(linesNum + 1).join('<span></span>');\n    lineNumbersWrapper = document.createElement('span');\n    lineNumbersWrapper.setAttribute('aria-hidden', 'true');\n    lineNumbersWrapper.className = 'line-numbers-rows';\n    lineNumbersWrapper.innerHTML = lines;\n\n    if (pre.hasAttribute('data-start')) {\n      pre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n    }\n\n    env.element.appendChild(lineNumbersWrapper);\n    resizeElements([pre]);\n    Prism.hooks.run('line-numbers', env);\n  });\n  Prism.hooks.add('line-numbers', function (env) {\n    env.plugins = env.plugins || {};\n    env.plugins.lineNumbers = true;\n  });\n})();","map":{"version":3,"sources":["E:/react/template-belajar-react/node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js"],"names":["self","Prism","document","PLUGIN_NAME","NEW_LINE_EXP","config","plugins","lineNumbers","getLine","element","number","tagName","classList","contains","lineNumberRows","querySelector","lineNumberStart","parseInt","getAttribute","lineNumberEnd","children","length","lineIndex","resize","resizeElements","assumeViewportIndependence","elements","filter","e","codeStyles","getStyles","whiteSpace","infos","map","codeElement","lineNumbersWrapper","undefined","lineNumberSizer","codeLines","textContent","split","createElement","className","appendChild","innerHTML","style","display","oneLinerHeight","getBoundingClientRect","height","lines","lineHeights","sizer","Boolean","forEach","info","line","index","childIndex","i","wrapper","lineNumber","window","getComputedStyle","currentStyle","lastWidth","addEventListener","innerWidth","Array","prototype","slice","call","querySelectorAll","hooks","add","env","code","pre","parentNode","test","nodeName","util","isActive","remove","match","linesNum","join","setAttribute","hasAttribute","counterReset","run"],"mappings":"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","sourcesContent":["(function () {\n\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t * @type {String}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\n\t/**\n\t * Global exports\n\t */\n\tvar config = Prism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t * @param {Element} element pre element\n\t\t * @param {Number} number line number\n\t\t * @return {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t},\n\n\t\t/**\n\t\t * Resizes the line numbers of the given element.\n\t\t *\n\t\t * This function will not add line numbers. It will only resize existing ones.\n\t\t * @param {HTMLElement} element A `<pre>` element with line numbers.\n\t\t * @returns {void}\n\t\t */\n\t\tresize: function (element) {\n\t\t\tresizeElements([element]);\n\t\t},\n\n\t\t/**\n\t\t * Whether the plugin can assume that the units font sizes and margins are not depended on the size of\n\t\t * the current viewport.\n\t\t *\n\t\t * Setting this to `true` will allow the plugin to do certain optimizations for better performance.\n\t\t *\n\t\t * Set this to `false` if you use any of the following CSS units: `vh`, `vw`, `vmin`, `vmax`.\n\t\t *\n\t\t * @type {boolean}\n\t\t */\n\t\tassumeViewportIndependence: true\n\t};\n\n\t/**\n\t * Resizes the given elements.\n\t *\n\t * @param {HTMLElement[]} elements\n\t */\n\tfunction resizeElements(elements) {\n\t\telements = elements.filter(function (e) {\n\t\t\tvar codeStyles = getStyles(e);\n\t\t\tvar whiteSpace = codeStyles['white-space'];\n\t\t\treturn whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line';\n\t\t});\n\n\t\tif (elements.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar infos = elements.map(function (element) {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tif (!codeElement || !lineNumbersWrapper) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t/** @type {HTMLElement} */\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.innerHTML = '0';\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tvar oneLinerHeight = lineNumberSizer.getBoundingClientRect().height;\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\treturn {\n\t\t\t\telement: element,\n\t\t\t\tlines: codeLines,\n\t\t\t\tlineHeights: [],\n\t\t\t\toneLinerHeight: oneLinerHeight,\n\t\t\t\tsizer: lineNumberSizer,\n\t\t\t};\n\t\t}).filter(Boolean);\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lines = info.lines;\n\t\t\tvar lineHeights = info.lineHeights;\n\t\t\tvar oneLinerHeight = info.oneLinerHeight;\n\n\t\t\tlineHeights[lines.length - 1] = undefined;\n\t\t\tlines.forEach(function (line, index) {\n\t\t\t\tif (line && line.length > 1) {\n\t\t\t\t\tvar e = lineNumberSizer.appendChild(document.createElement('span'));\n\t\t\t\t\te.style.display = 'block';\n\t\t\t\t\te.textContent = line;\n\t\t\t\t} else {\n\t\t\t\t\tlineHeights[index] = oneLinerHeight;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar lineHeights = info.lineHeights;\n\n\t\t\tvar childIndex = 0;\n\t\t\tfor (var i = 0; i < lineHeights.length; i++) {\n\t\t\t\tif (lineHeights[i] === undefined) {\n\t\t\t\t\tlineHeights[i] = lineNumberSizer.children[childIndex++].getBoundingClientRect().height;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinfos.forEach(function (info) {\n\t\t\tvar lineNumberSizer = info.sizer;\n\t\t\tvar wrapper = info.element.querySelector('.line-numbers-rows');\n\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t\tlineNumberSizer.innerHTML = '';\n\n\t\t\tinfo.lineHeights.forEach(function (height, lineNumber) {\n\t\t\t\twrapper.children[lineNumber].style.height = height + 'px';\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Returns style declarations for the element\n\t * @param {Element} element\n\t */\n\tvar getStyles = function (element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t};\n\n\tvar lastWidth = undefined;\n\twindow.addEventListener('resize', function () {\n\t\tif (config.assumeViewportIndependence && lastWidth === window.innerWidth) {\n\t\t\treturn;\n\t\t}\n\t\tlastWidth = window.innerWidth;\n\n\t\tresizeElements(Array.prototype.slice.call(document.querySelectorAll('pre.' + PLUGIN_NAME)));\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = /** @type {Element} */ (env.element);\n\t\tvar pre = /** @type {HTMLElement} */ (code.parentNode);\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!Prism.util.isActive(code, PLUGIN_NAME)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.classList.remove(PLUGIN_NAME);\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tpre.classList.add(PLUGIN_NAME);\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\tresizeElements([pre]);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n}());\n"]},"metadata":{},"sourceType":"script"}