{"ast":null,"code":"import _classCallCheck from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pandusetiawan/Documents/react/df-v1.2/src/views/apps/chat/ChatLog.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Input, Button } from \"reactstrap\";\nimport { MessageSquare, Menu, Star, Send } from \"react-feather\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { connect } from \"react-redux\";\nimport { togglePinned, sendMessage } from \"../../../redux/actions/chat/index\";\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\";\n\nvar ChatLog = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChatLog, _React$Component);\n\n  function ChatLog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatLog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatLog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      msg: \"\",\n      activeUser: null,\n      activeChat: null\n    };\n\n    _this.handleSendMessage = function (id, isPinned, text) {\n      if (text.length > 0) {\n        _this.props.sendMessage(id, isPinned, text);\n\n        _this.setState({\n          msg: \"\"\n        });\n      }\n    };\n\n    _this.handleTime = function (time_to, time_from) {\n      var date_time_to = new Date(Date.parse(time_to));\n      var date_time_from = new Date(Date.parse(time_from));\n      return date_time_to.getFullYear() === date_time_from.getFullYear() && date_time_to.getMonth() === date_time_from.getMonth() && date_time_to.getDate() === date_time_from.getDate();\n    };\n\n    _this.scrollToBottom = function () {\n      var chatContainer = ReactDOM.findDOMNode(_this.chatArea);\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatLog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var activeUser = this.state.activeUser;\n      var activeUserUid = activeUser && activeUser.uid ? activeUser.uid : null,\n          activeChat = activeUser && activeUser.uid ? this.props.chat.chats[activeUserUid] : null;\n      var renderChats = activeChat && activeChat !== undefined && activeChat.msg ? activeChat.msg.map(function (chat, i) {\n        var renderSentTime = function renderSentTime() {\n          if (i > 0 && !_this2.handleTime(chat.time, activeChat.msg[i - 1].time)) {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"divider\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"divider-text\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }\n            }, new Date().getDate() + \" \" + new Date().toLocaleString(\"default\", {\n              month: \"short\"\n            })));\n          }\n        };\n\n        var renderAvatar = function renderAvatar() {\n          if (i > 0) {\n            if (chat.isSent === true && activeChat.msg[i - 1].isSent !== true) {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: \"chat-avatar\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 21\n                }\n              }, /*#__PURE__*/React.createElement(\"div\", {\n                className: \"avatar m-0\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }\n              }, /*#__PURE__*/React.createElement(\"img\", {\n                src: userImg,\n                alt: \"chat avatar\",\n                height: \"40\",\n                width: \"40\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 25\n                }\n              })));\n            } else if (chat.isSent !== true) {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                className: \"chat-avatar\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 21\n                }\n              }, /*#__PURE__*/React.createElement(\"div\", {\n                className: \"avatar m-0\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 23\n                }\n              }, /*#__PURE__*/React.createElement(\"img\", {\n                src: activeUser.photoURL,\n                alt: \"chat avatar\",\n                height: \"40\",\n                width: \"40\",\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 25\n                }\n              })));\n            } else {\n              return \"\";\n            }\n          } else {\n            return /*#__PURE__*/React.createElement(\"div\", {\n              className: \"chat-avatar\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"avatar m-0\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"img\", {\n              src: chat.isSent ? userImg : activeUser.photoURL,\n              alt: \"chat avatar\",\n              height: \"40\",\n              width: \"40\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 23\n              }\n            })));\n          }\n        };\n\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          key: i,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }\n        }, renderSentTime(), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chat \".concat(chat.isSent !== true ? \"chat-left\" : \"chat-right\"),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }\n        }, renderAvatar(), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chat-body\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"chat-content\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }\n        }, chat.textContent))));\n      }) : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chat-app-window\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"start-chat-area \".concat(activeUser !== null ? \"d-none\" : \"d-flex\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"mb-1 start-chat-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MessageSquare, {\n        size: 50,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"py-50 px-1 sidebar-toggle start-chat-text\",\n        onClick: function onClick() {\n          if (_this2.props.mql.matches === false) {\n            _this2.props.mainSidebar(true);\n          } else {\n            return null;\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }\n      }, \"Start Conversation\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"active-chat \".concat(activeUser === null ? \"d-none\" : \"d-block\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chat_navbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        className: \"chat_header d-flex justify-content-between align-items-center p-1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sidebar-toggle d-block d-lg-none mr-1\",\n        onClick: function onClick() {\n          return _this2.props.mainSidebar(true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Menu, {\n        size: 24,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"avatar user-profile-toggle m-0 m-0 mr-1\",\n        onClick: function onClick() {\n          return _this2.props.handleReceiverSidebar(\"open\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: activeUser !== null ? activeUser.photoURL : \"\",\n        alt: activeUser !== null ? activeUser.displayName : \"\",\n        height: \"40\",\n        width: \"40\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\\n                    \".concat(activeUser !== null && activeUser.status === \"do not disturb\" ? \"avatar-status-busy\" : activeUser !== null && activeUser.status === \"away\" ? \"avatar-status-away\" : activeUser !== null && activeUser.status === \"offline\" ? \"avatar-status-offline\" : \"avatar-status-online\", \"\\n                    \"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"h6\", {\n        className: \"mb-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 19\n        }\n      }, activeUser !== null ? activeUser.displayName : \"\")), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"favorite\",\n        onClick: function onClick() {\n          if (activeChat) {\n            _this2.props.togglePinned(activeUser.uid, !activeChat.isPinned);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Star, {\n        size: 22,\n        stroke: activeChat && activeChat.isPinned === true ? \"#FF9F43\" : \"#626262\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 19\n        }\n      })))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        className: \"user-chats\",\n        options: {\n          wheelPropagation: false\n        },\n        ref: function ref(el) {\n          _this2.chatArea = el;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chats\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }\n      }, renderChats)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chat-app-form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"chat-app-input d-flex align-items-center\",\n        onSubmit: function onSubmit(e) {\n          e.preventDefault();\n\n          _this2.handleSendMessage(activeUser.uid, false, _this2.state.msg, activeUser);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        className: \"message mr-1 ml-50\",\n        placeholder: \"Type your message\",\n        value: this.state.msg,\n        onChange: function onChange(e) {\n          e.preventDefault();\n\n          _this2.setState({\n            msg: e.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Send, {\n        className: \"d-lg-none\",\n        size: 15,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-lg-block d-none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 19\n        }\n      }, \"Send\")))))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.activeUser !== state.activeChat || props.activeChat !== state.activeChat) {\n        return {\n          activeUser: props.activeUser,\n          activeChat: props.activeChat\n        };\n      } // Return null if the state hasn't changed\n\n\n      return null;\n    }\n  }]);\n\n  return ChatLog;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chat: state.chatApp.chats\n  };\n};\n\nexport default connect(mapStateToProps, {\n  togglePinned: togglePinned,\n  sendMessage: sendMessage\n})(ChatLog);","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/views/apps/chat/ChatLog.js"],"names":["React","ReactDOM","Input","Button","MessageSquare","Menu","Star","Send","PerfectScrollbar","connect","togglePinned","sendMessage","userImg","ChatLog","state","msg","activeUser","activeChat","handleSendMessage","id","isPinned","text","length","props","setState","handleTime","time_to","time_from","date_time_to","Date","parse","date_time_from","getFullYear","getMonth","getDate","scrollToBottom","chatContainer","findDOMNode","chatArea","scrollTop","scrollHeight","activeUserUid","uid","chat","chats","renderChats","undefined","map","i","renderSentTime","time","toLocaleString","month","renderAvatar","isSent","photoURL","textContent","mql","matches","mainSidebar","handleReceiverSidebar","displayName","status","wheelPropagation","el","e","preventDefault","target","value","Component","mapStateToProps","chatApp"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Input, Button } from \"reactstrap\"\nimport { MessageSquare, Menu, Star, Send } from \"react-feather\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { connect } from \"react-redux\"\nimport { togglePinned, sendMessage } from \"../../../redux/actions/chat/index\"\nimport userImg from \"../../../assets/img/portrait/small/avatar-s-11.jpg\"\n\nclass ChatLog extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (\n      props.activeUser !== state.activeChat ||\n      props.activeChat !== state.activeChat\n    ) {\n      return {\n        activeUser: props.activeUser,\n        activeChat: props.activeChat\n      }\n    }\n    // Return null if the state hasn't changed\n    return null\n  }\n  state = {\n    msg: \"\",\n    activeUser: null,\n    activeChat: null\n  }\n\n  handleSendMessage = (id, isPinned, text) => {\n    if (text.length > 0) {\n      this.props.sendMessage(id, isPinned, text)\n      this.setState({\n        msg: \"\"\n      })\n    }\n  }\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  handleTime = (time_to, time_from) => {\n    const date_time_to = new Date(Date.parse(time_to))\n    const date_time_from = new Date(Date.parse(time_from))\n    return (\n      date_time_to.getFullYear() === date_time_from.getFullYear() &&\n      date_time_to.getMonth() === date_time_from.getMonth() &&\n      date_time_to.getDate() === date_time_from.getDate()\n    )\n  }\n\n  scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(this.chatArea)\n    chatContainer.scrollTop = chatContainer.scrollHeight\n  }\n\n  render() {\n    const { activeUser } = this.state\n    let activeUserUid = activeUser && activeUser.uid ? activeUser.uid : null,\n      activeChat =\n        activeUser && activeUser.uid\n          ? this.props.chat.chats[activeUserUid]\n          : null\n\n    let renderChats =\n      activeChat && activeChat !== undefined && activeChat.msg\n        ? activeChat.msg.map((chat, i) => {\n            let renderSentTime = () => {\n              if (\n                i > 0 &&\n                !this.handleTime(chat.time, activeChat.msg[i - 1].time)\n              ) {\n                return (\n                  <div className=\"divider\">\n                    <div className=\"divider-text\">\n                      {new Date().getDate() +\n                        \" \" +\n                        new Date().toLocaleString(\"default\", {\n                          month: \"short\"\n                        })}\n                    </div>\n                  </div>\n                )\n              }\n            }\n            let renderAvatar = () => {\n              if (i > 0) {\n                if (\n                  chat.isSent === true &&\n                  activeChat.msg[i - 1].isSent !== true\n                ) {\n                  return (\n                    <div className=\"chat-avatar\">\n                      <div className=\"avatar m-0\">\n                        <img\n                          src={userImg}\n                          alt=\"chat avatar\"\n                          height=\"40\"\n                          width=\"40\"\n                        />\n                      </div>\n                    </div>\n                  )\n                } else if (chat.isSent !== true) {\n                  return (\n                    <div className=\"chat-avatar\">\n                      <div className=\"avatar m-0\">\n                        <img\n                          src={activeUser.photoURL}\n                          alt=\"chat avatar\"\n                          height=\"40\"\n                          width=\"40\"\n                        />\n                      </div>\n                    </div>\n                  )\n                } else {\n                  return \"\"\n                }\n              } else {\n                return (\n                  <div className=\"chat-avatar\">\n                    <div className=\"avatar m-0\">\n                      <img\n                        src={chat.isSent ? userImg : activeUser.photoURL}\n                        alt=\"chat avatar\"\n                        height=\"40\"\n                        width=\"40\"\n                      />\n                    </div>\n                  </div>\n                )\n              }\n            }\n            return (\n              <React.Fragment key={i}>\n                {renderSentTime()}\n                <div\n                  className={`chat ${\n                    chat.isSent !== true ? \"chat-left\" : \"chat-right\"\n                  }`}>\n                  {renderAvatar()}\n                  <div className=\"chat-body\">\n                    <div className=\"chat-content\">{chat.textContent}</div>\n                  </div>\n                </div>\n              </React.Fragment>\n            )\n          })\n        : null\n\n    return (\n      <div className=\"content-right\">\n        <div className=\"chat-app-window\">\n          <div\n            className={`start-chat-area ${\n              activeUser !== null ? \"d-none\" : \"d-flex\"\n            }`}>\n            <span className=\"mb-1 start-chat-icon\">\n              <MessageSquare size={50} />\n            </span>\n            <h4\n              className=\"py-50 px-1 sidebar-toggle start-chat-text\"\n              onClick={() => {\n                if (this.props.mql.matches === false) {\n                  this.props.mainSidebar(true)\n                } else {\n                  return null\n                }\n              }}>\n              Start Conversation\n            </h4>\n          </div>\n          <div\n            className={`active-chat ${\n              activeUser === null ? \"d-none\" : \"d-block\"\n            }`}>\n            <div className=\"chat_navbar\">\n              <header className=\"chat_header d-flex justify-content-between align-items-center p-1\">\n                <div className=\"d-flex align-items-center\">\n                  <div\n                    className=\"sidebar-toggle d-block d-lg-none mr-1\"\n                    onClick={() => this.props.mainSidebar(true)}>\n                    <Menu size={24} />\n                  </div>\n                  <div\n                    className=\"avatar user-profile-toggle m-0 m-0 mr-1\"\n                    onClick={() => this.props.handleReceiverSidebar(\"open\")}>\n                    <img\n                      src={activeUser !== null ? activeUser.photoURL : \"\"}\n                      alt={activeUser !== null ? activeUser.displayName : \"\"}\n                      height=\"40\"\n                      width=\"40\"\n                    />\n                    <span\n                      className={`\n                    ${\n                      activeUser !== null &&\n                      activeUser.status === \"do not disturb\"\n                        ? \"avatar-status-busy\"\n                        : activeUser !== null && activeUser.status === \"away\"\n                        ? \"avatar-status-away\"\n                        : activeUser !== null && activeUser.status === \"offline\"\n                        ? \"avatar-status-offline\"\n                        : \"avatar-status-online\"\n                    }\n                    `}\n                    />\n                  </div>\n                  <h6 className=\"mb-0\">\n                    {activeUser !== null ? activeUser.displayName : \"\"}\n                  </h6>\n                </div>\n                <span\n                  className=\"favorite\"\n                  onClick={() => {\n                    if (activeChat) {\n                      this.props.togglePinned(\n                        activeUser.uid,\n                        !activeChat.isPinned\n                      )\n                    }\n                  }}>\n                  <Star\n                    size={22}\n                    stroke={\n                      activeChat && activeChat.isPinned === true\n                        ? \"#FF9F43\"\n                        : \"#626262\"\n                    }\n                  />\n                </span>\n              </header>\n            </div>\n            <PerfectScrollbar\n              className=\"user-chats\"\n              options={{\n                wheelPropagation: false\n              }}\n              ref={el => {\n                this.chatArea = el\n              }}>\n              <div className=\"chats\">{renderChats}</div>\n            </PerfectScrollbar>\n            <div className=\"chat-app-form\">\n              <form\n                className=\"chat-app-input d-flex align-items-center\"\n                onSubmit={e => {\n                  e.preventDefault()\n                  this.handleSendMessage(\n                    activeUser.uid,\n                    false,\n                    this.state.msg,\n                    activeUser\n                  )\n                }}>\n                <Input\n                  type=\"text\"\n                  className=\"message mr-1 ml-50\"\n                  placeholder=\"Type your message\"\n                  value={this.state.msg}\n                  onChange={e => {\n                    e.preventDefault()\n                    this.setState({\n                      msg: e.target.value\n                    })\n                  }}\n                />\n                <Button color=\"primary\">\n                  <Send className=\"d-lg-none\" size={15} />\n                  <span className=\"d-lg-block d-none\">Send</span>\n                </Button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    chat: state.chatApp.chats\n  }\n}\nexport default connect(mapStateToProps, { togglePinned, sendMessage })(ChatLog)\n"]},"metadata":{},"sourceType":"module"}