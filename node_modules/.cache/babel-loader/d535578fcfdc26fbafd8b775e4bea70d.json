{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\belajar-react\\\\src\\\\components\\\\@vuexy\\\\autoComplete\\\\AutoCompleteComponent.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport { history } from \"../../../history\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { AlertTriangle } from \"react-feather\";\n\nclass Autocomplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSuggestionItemClick = (url, e) => {\n      if (this.props.onSuggestionClick) {\n        this.props.onSuggestionClick(e);\n      }\n\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n      if (url) history.push(url);\n    };\n\n    this.onSuggestionItemHover = index => {\n      this.setState({\n        activeSuggestion: index\n      });\n    };\n\n    this.onChange = e => {\n      const userInput = e.currentTarget.value;\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: true,\n        userInput\n      });\n\n      if (e.target.value < 1) {\n        this.setState({\n          showSuggestions: false\n        });\n      }\n    };\n\n    this.onInputClick = e => {\n      e.stopPropagation();\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        showSuggestions,\n        userInput\n      } = this.state;\n      const filterKey = this.props.filterKey;\n      let suggestionList = ReactDOM.findDOMNode(this.suggestionList); // User pressed the up arrow\n\n      if (e.keyCode === 38 && activeSuggestion !== 0) {\n        this.setState({\n          activeSuggestion: activeSuggestion - 1\n        });\n\n        if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion <= this.filteredData.length / 2) {\n          suggestionList.scrollTop = 0;\n        }\n      } // User pressed the down arrow\n      else if (e.keyCode === 40 && activeSuggestion < this.filteredData.length - 1) {\n          this.setState({\n            activeSuggestion: activeSuggestion + 1\n          });\n\n          if (e.target.value.length > -1 && suggestionList !== null && activeSuggestion >= this.filteredData.length / 2) {\n            suggestionList.scrollTop = suggestionList.scrollHeight;\n          }\n        } // User Pressed ESC\n        else if (e.keyCode === 27) {\n            this.setState({\n              showSuggestions: false,\n              userInput: \"\"\n            });\n          } // User Pressed ENTER\n          else if (e.keyCode === 13 && showSuggestions) {\n              this.onSuggestionItemClick(this.filteredData[activeSuggestion].link, e);\n              this.setState({\n                userInput: this.filteredData[activeSuggestion][filterKey],\n                showSuggestions: false\n              });\n            } else {\n              return;\n            } // Custom Keydown Event\n\n\n      if (this.props.onKeyDown !== undefined && this.props.onKeyDown !== null && this.props.onKeyDown) {\n        this.props.onKeyDown(e, userInput);\n      }\n    };\n\n    this.renderGroupedSuggestion = arr => {\n      const {\n        filterKey,\n        customRender\n      } = this.props;\n      const {\n        onSuggestionItemClick,\n        onSuggestionItemHover,\n        state: {\n          activeSuggestion,\n          userInput\n        }\n      } = this;\n\n      let renderSuggestion = (item, i) => {\n        if (!customRender) {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(item) === activeSuggestion\n            }),\n            key: item[filterKey],\n            onClick: e => onSuggestionItemClick(item.link, e),\n            onMouseEnter: () => {\n              this.onSuggestionItemHover(this.filteredData.indexOf(item));\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 11\n            }\n          }, item[filterKey]);\n        } else if (customRender) {\n          return customRender(item, i, this.filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n        } else {\n          return null;\n        }\n      };\n\n      return arr.map((item, i) => {\n        return renderSuggestion(item, i);\n      });\n    };\n\n    this.renderUngroupedSuggestions = () => {\n      const {\n        filterKey,\n        suggestions,\n        customRender,\n        suggestionLimit\n      } = this.props;\n      const {\n        onSuggestionItemClick,\n        onSuggestionItemHover,\n        state: {\n          activeSuggestion,\n          userInput\n        }\n      } = this;\n      this.filteredData = [];\n      let sortSingleData = suggestions.filter(i => {\n        let startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n            includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n        if (startCondition) {\n          return startCondition;\n        } else if (!startCondition && includeCondition) {\n          return includeCondition;\n        } else {\n          return null;\n        }\n      }).slice(0, suggestionLimit);\n      this.filteredData.push(...sortSingleData);\n      return sortSingleData.map((suggestion, index) => {\n        if (!customRender) {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(suggestion) === activeSuggestion\n            }),\n            key: suggestion[filterKey],\n            onClick: e => onSuggestionItemClick(suggestion.link ? suggestion.link : null, e),\n            onMouseEnter: () => this.onSuggestionItemHover(this.filteredData.indexOf(suggestion)),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 11\n            }\n          }, suggestion[filterKey]);\n        } else if (customRender) {\n          return customRender(suggestion, index, this.filteredData, activeSuggestion, onSuggestionItemClick, onSuggestionItemHover, userInput);\n        } else {\n          return null;\n        }\n      });\n    };\n\n    this.renderSuggestions = () => {\n      const {\n        filterKey,\n        grouped,\n        filterHeaderKey,\n        suggestions\n      } = this.props;\n      const {\n        renderUngroupedSuggestions,\n        state: {\n          userInput\n        }\n      } = this; // Checks if suggestions are grouped or not.\n\n      if (grouped === undefined || grouped === null || !grouped) {\n        return renderUngroupedSuggestions();\n      } else {\n        this.filteredData = [];\n        return suggestions.map(suggestion => {\n          let sortData = suggestion.data.filter(i => {\n            let startCondition = i[filterKey].toLowerCase().startsWith(userInput.toLowerCase()),\n                includeCondition = i[filterKey].toLowerCase().includes(userInput.toLowerCase());\n\n            if (startCondition) {\n              return startCondition;\n            } else if (!startCondition && includeCondition) {\n              return includeCondition;\n            } else {\n              return null;\n            }\n          }).slice(0, suggestion.searchLimit);\n          this.filteredData.push(...sortData);\n          return /*#__PURE__*/React.createElement(React.Fragment, {\n            key: suggestion[filterHeaderKey],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"li\", {\n            className: \"suggestion-item suggestion-title text-primary text-bold-600\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 13\n            }\n          }, suggestion[filterHeaderKey]), sortData.length ? this.renderGroupedSuggestion(sortData) : /*#__PURE__*/React.createElement(\"li\", {\n            className: \"suggestion-item no-result\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(AlertTriangle, {\n            size: 15,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }\n          }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n            className: \"align-middle ml-50\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }\n          }, \"No Result\")));\n        });\n      }\n    };\n\n    this.clearInput = val => {\n      if (this.props.clearInput && !val) {\n        this.setState({\n          userInput: \"\"\n        });\n      }\n    };\n\n    this.handleExtenalClick = e => {\n      let {\n        container\n      } = this.refs;\n      const {\n        target\n      } = e;\n\n      if (target !== container && !container.contains(target)) {\n        this.setState({\n          showSuggestions: false\n        });\n        if (this.props.externalClick) this.props.externalClick(e);\n      }\n    };\n\n    this.state = {\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: \"\",\n      focused: false,\n      openUp: false\n    };\n    this.filteredData = [];\n    document.body.addEventListener(\"click\", this.handleExtenalClick);\n  } // Suggestion Click Event\n\n\n  componentDidUpdate(prevProps, prevState) {\n    let textInput = ReactDOM.findDOMNode(this.input);\n    let {\n      autoFocus,\n      onSuggestionsShown,\n      clearInput\n    } = this.props; // For searchbar focus\n\n    if (textInput !== null && autoFocus) {\n      textInput.focus();\n    }\n\n    if (this.props.defaultSuggestions && prevState.showSuggestions === false && this.state.focused) {\n      this.setState({\n        showSuggestions: true\n      });\n    } // Clear Input\n\n\n    if (clearInput === false && this.state.userInput.length) {\n      this.setState({\n        userInput: \"\"\n      });\n    } // Function on Suggestions Shown\n\n\n    if (onSuggestionsShown && this.state.showSuggestions) {\n      onSuggestionsShown(this.state.userInput);\n    }\n\n    if (this.props.defaultSuggestions && prevState.focused === false && this.state.focused === true) {\n      this.setState({\n        showSuggestions: true\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.defaultSuggestions && this.state.focused) {\n      this.setState({\n        showSuggestions: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.handleExtenalClick);\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyDown,\n      state: {\n        showSuggestions,\n        userInput,\n        openUp\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions) {\n      suggestionsListComponent = /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        className: classnames(\"suggestions-list\", {\n          \"open-up\": openUp\n        }),\n        ref: el => this.suggestionList = el,\n        component: \"ul\",\n        options: {\n          wheelPropagation: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 9\n        }\n      }, this.renderSuggestions());\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"vx-autocomplete-container\",\n      ref: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => {\n        onChange(e);\n\n        if (this.props.onChange) {\n          this.props.onChange(e);\n        }\n      },\n      onKeyDown: e => onKeyDown(e),\n      value: userInput,\n      className: `vx-autocomplete-search ${this.props.className ? this.props.className : \"\"}`,\n      placeholder: this.props.placeholder,\n      onClick: this.onInputClick,\n      ref: el => {\n        return this.input = el;\n      },\n      onFocus: e => {\n        this.setState({\n          focused: true\n        });\n      },\n      autoFocus: this.props.autoFocus,\n      onBlur: e => {\n        // this.onBlur(e)\n        if (this.props.onBlur) this.props.onBlur(e);\n        this.setState({\n          focused: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }\n    }), suggestionsListComponent);\n  }\n\n}\n\nexport default Autocomplete;\nAutocomplete.propTypes = {\n  suggestions: PropTypes.array.isRequired,\n  filterKey: PropTypes.string.isRequired,\n  filterHeaderKey: PropTypes.string,\n  placeholder: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func\n};","map":{"version":3,"sources":["E:/react/belajar-react/src/components/@vuexy/autoComplete/AutoCompleteComponent.js"],"names":["React","ReactDOM","PropTypes","classnames","history","PerfectScrollbar","AlertTriangle","Autocomplete","Component","constructor","props","onSuggestionItemClick","url","e","onSuggestionClick","setState","activeSuggestion","showSuggestions","userInput","currentTarget","innerText","push","onSuggestionItemHover","index","onChange","value","target","onInputClick","stopPropagation","onKeyDown","state","filterKey","suggestionList","findDOMNode","keyCode","length","filteredData","scrollTop","scrollHeight","link","undefined","renderGroupedSuggestion","arr","customRender","renderSuggestion","item","i","active","indexOf","map","renderUngroupedSuggestions","suggestions","suggestionLimit","sortSingleData","filter","startCondition","toLowerCase","startsWith","includeCondition","includes","slice","suggestion","renderSuggestions","grouped","filterHeaderKey","sortData","data","searchLimit","clearInput","val","handleExtenalClick","container","refs","contains","externalClick","focused","openUp","document","body","addEventListener","componentDidUpdate","prevProps","prevState","textInput","input","autoFocus","onSuggestionsShown","focus","defaultSuggestions","componentDidMount","componentWillUnmount","removeEventListener","render","suggestionsListComponent","el","wheelPropagation","className","placeholder","onBlur","propTypes","array","isRequired","string","number","bool","func"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport PropTypes from \"prop-types\"\nimport classnames from \"classnames\"\nimport { history } from \"../../../history\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { AlertTriangle } from \"react-feather\"\nclass Autocomplete extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: \"\",\n      focused: false,\n      openUp: false\n    }\n\n    this.filteredData = []\n    document.body.addEventListener(\"click\", this.handleExtenalClick)\n  }\n\n  // Suggestion Click Event\n  onSuggestionItemClick = (url, e) => {\n    if (this.props.onSuggestionClick) {\n      this.props.onSuggestionClick(e)\n    }\n    this.setState({\n      activeSuggestion: 0,\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    })\n    if (url) history.push(url)\n  }\n\n  // Suggestion Hover Event\n  onSuggestionItemHover = index => {\n    this.setState({ activeSuggestion: index })\n  }\n\n  // Input Change\n  onChange = e => {\n    const userInput = e.currentTarget.value\n    this.setState({\n      activeSuggestion: 0,\n      showSuggestions: true,\n      userInput\n    })\n    if (e.target.value < 1) {\n      this.setState({\n        showSuggestions: false\n      })\n    }\n  }\n\n  // Input Click Event\n  onInputClick = e => {\n    e.stopPropagation()\n  }\n\n  // Input's Keydown Event\n  onKeyDown = e => {\n    const { activeSuggestion, showSuggestions, userInput } = this.state\n    const filterKey = this.props.filterKey\n    let suggestionList = ReactDOM.findDOMNode(this.suggestionList)\n\n    // User pressed the up arrow\n    if (e.keyCode === 38 && activeSuggestion !== 0) {\n      this.setState({ activeSuggestion: activeSuggestion - 1 })\n      if (\n        e.target.value.length > -1 &&\n        suggestionList !== null &&\n        activeSuggestion <= this.filteredData.length / 2\n      ) {\n        suggestionList.scrollTop = 0\n      }\n    }\n\n    // User pressed the down arrow\n    else if (\n      e.keyCode === 40 &&\n      activeSuggestion < this.filteredData.length - 1\n    ) {\n      this.setState({ activeSuggestion: activeSuggestion + 1 })\n\n      if (\n        e.target.value.length > -1 &&\n        suggestionList !== null &&\n        activeSuggestion >= this.filteredData.length / 2\n      ) {\n        suggestionList.scrollTop = suggestionList.scrollHeight\n      }\n    }\n\n    // User Pressed ESC\n    else if (e.keyCode === 27) {\n      this.setState({\n        showSuggestions: false,\n        userInput: \"\"\n      })\n    }\n\n    // User Pressed ENTER\n    else if (e.keyCode === 13 && showSuggestions) {\n      this.onSuggestionItemClick(this.filteredData[activeSuggestion].link, e)\n      this.setState({\n        userInput: this.filteredData[activeSuggestion][filterKey],\n        showSuggestions: false\n      })\n    } else {\n      return\n    }\n\n    // Custom Keydown Event\n    if (\n      this.props.onKeyDown !== undefined &&\n      this.props.onKeyDown !== null &&\n      this.props.onKeyDown\n    ) {\n      this.props.onKeyDown(e, userInput)\n    }\n  }\n\n  // Grouped Suggestions\n  renderGroupedSuggestion = arr => {\n    const { filterKey, customRender } = this.props\n    const {\n      onSuggestionItemClick,\n      onSuggestionItemHover,\n      state: { activeSuggestion, userInput }\n    } = this\n\n    let renderSuggestion = (item, i) => {\n      if (!customRender) {\n        return (\n          <li\n            className={classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(item) === activeSuggestion\n            })}\n            key={item[filterKey]}\n            onClick={e => onSuggestionItemClick(item.link, e)}\n            onMouseEnter={() => {\n              this.onSuggestionItemHover(this.filteredData.indexOf(item))\n            }}>\n            {item[filterKey]}\n          </li>\n        )\n      } else if (customRender) {\n        return customRender(\n          item,\n          i,\n          this.filteredData,\n          activeSuggestion,\n          onSuggestionItemClick,\n          onSuggestionItemHover,\n          userInput\n        )\n      } else {\n        return null\n      }\n    }\n\n    return arr.map((item, i) => {\n      return renderSuggestion(item, i)\n    })\n  }\n\n  // Ungrouped Suggestions\n  renderUngroupedSuggestions = () => {\n    const { filterKey, suggestions, customRender, suggestionLimit } = this.props\n    const {\n      onSuggestionItemClick,\n      onSuggestionItemHover,\n      state: { activeSuggestion, userInput }\n    } = this\n\n    this.filteredData = []\n    let sortSingleData = suggestions\n      .filter(i => {\n        let startCondition = i[filterKey]\n            .toLowerCase()\n            .startsWith(userInput.toLowerCase()),\n          includeCondition = i[filterKey]\n            .toLowerCase()\n            .includes(userInput.toLowerCase())\n        if (startCondition) {\n          return startCondition\n        } else if (!startCondition && includeCondition) {\n          return includeCondition\n        } else {\n          return null\n        }\n      })\n      .slice(0, suggestionLimit)\n    this.filteredData.push(...sortSingleData)\n    return sortSingleData.map((suggestion, index) => {\n      if (!customRender) {\n        return (\n          <li\n            className={classnames(\"suggestion-item\", {\n              active: this.filteredData.indexOf(suggestion) === activeSuggestion\n            })}\n            key={suggestion[filterKey]}\n            onClick={e =>\n              onSuggestionItemClick(suggestion.link ? suggestion.link : null, e)\n            }\n            onMouseEnter={() =>\n              this.onSuggestionItemHover(this.filteredData.indexOf(suggestion))\n            }>\n            {suggestion[filterKey]}\n          </li>\n        )\n      } else if (customRender) {\n        return customRender(\n          suggestion,\n          index,\n          this.filteredData,\n          activeSuggestion,\n          onSuggestionItemClick,\n          onSuggestionItemHover,\n          userInput\n        )\n      } else {\n        return null\n      }\n    })\n  }\n\n  // Renders Suggestions\n  renderSuggestions = () => {\n    const { filterKey, grouped, filterHeaderKey, suggestions } = this.props\n    const {\n      renderUngroupedSuggestions,\n      state: { userInput }\n    } = this\n\n    // Checks if suggestions are grouped or not.\n    if (grouped === undefined || grouped === null || !grouped) {\n      return renderUngroupedSuggestions()\n    } else {\n      this.filteredData = []\n      return suggestions.map(suggestion => {\n        let sortData = suggestion.data\n          .filter(i => {\n            let startCondition = i[filterKey]\n                .toLowerCase()\n                .startsWith(userInput.toLowerCase()),\n              includeCondition = i[filterKey]\n                .toLowerCase()\n                .includes(userInput.toLowerCase())\n            if (startCondition) {\n              return startCondition\n            } else if (!startCondition && includeCondition) {\n              return includeCondition\n            } else {\n              return null\n            }\n          })\n          .slice(0, suggestion.searchLimit)\n\n        this.filteredData.push(...sortData)\n        return (\n          <React.Fragment key={suggestion[filterHeaderKey]}>\n            <li className=\"suggestion-item suggestion-title text-primary text-bold-600\">\n              {suggestion[filterHeaderKey]}\n            </li>\n            {sortData.length ? (\n              this.renderGroupedSuggestion(sortData)\n            ) : (\n              <li className=\"suggestion-item no-result\">\n                <AlertTriangle size={15} />{\" \"}\n                <span className=\"align-middle ml-50\">No Result</span>\n              </li>\n            )}\n          </React.Fragment>\n        )\n      })\n    }\n  }\n\n  // Clears Input\n  clearInput = val => {\n    if (this.props.clearInput && !val) {\n      this.setState({\n        userInput: \"\"\n      })\n    }\n  }\n\n  // Closes Suggestions if clicked outside container (On Blur Basically)\n  handleExtenalClick = e => {\n    let { container } = this.refs\n    const { target } = e\n    if (target !== container && !container.contains(target)) {\n      this.setState({\n        showSuggestions: false\n      })\n      if (this.props.externalClick) this.props.externalClick(e)\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let textInput = ReactDOM.findDOMNode(this.input)\n    let { autoFocus, onSuggestionsShown, clearInput } = this.props\n    // For searchbar focus\n    if (textInput !== null && autoFocus) {\n      textInput.focus()\n    }\n\n    if (\n      this.props.defaultSuggestions &&\n      prevState.showSuggestions === false &&\n      this.state.focused\n    ) {\n      this.setState({ showSuggestions: true })\n    }\n\n    // Clear Input\n    if (clearInput === false && this.state.userInput.length) {\n      this.setState({\n        userInput: \"\"\n      })\n    }\n\n    // Function on Suggestions Shown\n    if (onSuggestionsShown && this.state.showSuggestions) {\n      onSuggestionsShown(this.state.userInput)\n    }\n\n    if (\n      this.props.defaultSuggestions &&\n      prevState.focused === false &&\n      this.state.focused === true\n    ) {\n      this.setState({ showSuggestions: true })\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.defaultSuggestions && this.state.focused) {\n      this.setState({ showSuggestions: true })\n    }\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener(\"click\", this.handleExtenalClick)\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyDown,\n      state: { showSuggestions, userInput, openUp }\n    } = this\n    let suggestionsListComponent\n\n    if (showSuggestions) {\n      suggestionsListComponent = (\n        <PerfectScrollbar\n          className={classnames(\"suggestions-list\", {\n            \"open-up\": openUp\n          })}\n          ref={el => (this.suggestionList = el)}\n          component=\"ul\"\n          options={{ wheelPropagation: false }}>\n          {this.renderSuggestions()}\n        </PerfectScrollbar>\n      )\n    }\n\n    return (\n      <div className=\"vx-autocomplete-container\" ref=\"container\">\n        <input\n          type=\"text\"\n          onChange={e => {\n            onChange(e)\n            if (this.props.onChange) {\n              this.props.onChange(e)\n            }\n          }}\n          onKeyDown={e => onKeyDown(e)}\n          value={userInput}\n          className={`vx-autocomplete-search ${\n            this.props.className ? this.props.className : \"\"\n          }`}\n          placeholder={this.props.placeholder}\n          onClick={this.onInputClick}\n          ref={el => {\n            return (this.input = el)\n          }}\n          onFocus={e => {\n            this.setState({ focused: true })\n          }}\n          autoFocus={this.props.autoFocus}\n          onBlur={e => {\n            // this.onBlur(e)\n            if (this.props.onBlur) this.props.onBlur(e)\n            this.setState({ focused: false })\n          }}\n        />\n        {suggestionsListComponent}\n      </div>\n    )\n  }\n}\n\nexport default Autocomplete\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.array.isRequired,\n  filterKey: PropTypes.string.isRequired,\n  filterHeaderKey: PropTypes.string,\n  placeholder: PropTypes.string,\n  suggestionLimit: PropTypes.number,\n  grouped: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  onKeyDown: PropTypes.func,\n  onChange: PropTypes.func,\n  onSuggestionsShown: PropTypes.func,\n  onSuggestionItemClick: PropTypes.func\n}\n"]},"metadata":{},"sourceType":"module"}