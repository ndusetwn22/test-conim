{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\template-belajar-react\\\\src\\\\extensions\\\\drag-and-drop\\\\DndCards.js\";\nimport React from \"react\";\nimport { Card, CardHeader, CardBody, CardTitle } from \"reactstrap\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nconst dragItems = [{\n  id: \"1\",\n  title: \"Draggable Card 1\",\n  content: \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n}, {\n  id: \"2\",\n  title: \"Draggable Card 2\",\n  content: \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n}, {\n  id: \"3\",\n  title: \"Draggable Card 3\",\n  content: \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n}, {\n  id: \"4\",\n  title: \"Draggable Card 4\",\n  content: \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n}]; // get data from array\n\nconst getItems = count => dragItems.map(k => ({\n  id: k.id,\n  title: k.title,\n  content: k.content\n})); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nclass DndHorizontal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: getItems(),\n      direction: \"horizontal\",\n      deviceWidth: window.width\n    };\n\n    this.updateDnd = () => {\n      this.setState({\n        deviceWidth: window.innerWidth\n      });\n\n      if (this.state.deviceWidth <= 992) {\n        this.setState({\n          direction: \"vertical\"\n        });\n      } else {\n        this.setState({\n          direction: \"horizontal\"\n        });\n      }\n    };\n\n    this.onDragEnd = result => {\n      // dropped outside the list\n      if (!result.destination) {\n        return;\n      }\n\n      const items = reorder(this.state.items, result.source.index, result.destination.index);\n      this.setState({\n        items\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updateDnd();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    window.addEventListener(\"resize\", this.updateDnd);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      direction: this.state.direction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.droppableProps, {\n      className: \"d-flex flex-sm-wrap flex-lg-nowrap draggable-cards\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }), this.state.items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n      key: item.id,\n      draggableId: item.id,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: `draggable-cards ${item.id !== 4 ? \"mr-1\" : null}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 27\n      }\n    }, item.title)), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, item.content))))), provided.placeholder)));\n  }\n\n}\n\nexport default DndHorizontal;","map":{"version":3,"sources":["E:/react/template-belajar-react/src/extensions/drag-and-drop/DndCards.js"],"names":["React","Card","CardHeader","CardBody","CardTitle","DragDropContext","Droppable","Draggable","dragItems","id","title","content","getItems","count","map","k","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","DndHorizontal","Component","state","items","direction","deviceWidth","window","width","updateDnd","setState","innerWidth","onDragEnd","destination","source","index","componentDidMount","componentDidUpdate","prevProps","prevState","addEventListener","render","provided","snapshot","innerRef","droppableProps","item","draggableProps","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Card, CardHeader, CardBody, CardTitle } from \"reactstrap\"\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"\n\nconst dragItems = [\n  {\n    id: \"1\",\n    title: \"Draggable Card 1\",\n    content:\n      \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n  },\n  {\n    id: \"2\",\n    title: \"Draggable Card 2\",\n    content:\n      \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n  },\n  {\n    id: \"3\",\n    title: \"Draggable Card 3\",\n    content:\n      \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n  },\n  {\n    id: \"4\",\n    title: \"Draggable Card 4\",\n    content:\n      \"Jelly beans sugar plum cheesecake cookie oat cake soufflé.Tootsie roll bonbon liquorice tiramisu pie powder.Donut sweet roll marzipan pastry cookie cake tootsie roll oat cake cookie.\"\n  }\n]\n\n// get data from array\nconst getItems = count =>\n  dragItems.map(k => ({\n    id: k.id,\n    title: k.title,\n    content: k.content\n  }))\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\nclass DndHorizontal extends React.Component {\n  state = {\n    items: getItems(),\n    direction: \"horizontal\",\n    deviceWidth: window.width\n  }\n\n  updateDnd = () => {\n    this.setState({\n      deviceWidth: window.innerWidth\n    })\n    if (this.state.deviceWidth <= 992) {\n      this.setState({\n        direction: \"vertical\"\n      })\n    } else {\n      this.setState({\n        direction: \"horizontal\"\n      })\n    }\n  }\n  componentDidMount() {\n    this.updateDnd()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    window.addEventListener(\"resize\", this.updateDnd)\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    )\n\n    this.setState({\n      items\n    })\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction={this.state.direction}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"d-flex flex-sm-wrap flex-lg-nowrap draggable-cards\"\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <Card\n                        className={`draggable-cards ${\n                          item.id !== 4 ? \"mr-1\" : null\n                        }`}\n                      >\n                        <CardHeader>\n                          <CardTitle>{item.title}</CardTitle>\n                        </CardHeader>\n                        <CardBody>{item.content}</CardBody>\n                      </Card>\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    )\n  }\n}\n\nexport default DndHorizontal\n"]},"metadata":{},"sourceType":"module"}