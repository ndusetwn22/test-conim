{"ast":null,"code":"const initialState = {\n  chats: [],\n  contacts: [],\n  chatContacts: [],\n  pinned: [],\n  status: \"active\",\n  filteredContacts: [],\n  filteredChats: []\n};\n\nconst chats = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_CONTACTS\":\n      return { ...state,\n        chats: action.chats,\n        contacts: action.contacts\n      };\n\n    case \"GET_CHAT_CONTACTS\":\n      return { ...state,\n        chatContacts: action.chats\n      };\n\n    case \"SEND_MESSAGE\":\n      let sendMsg,\n          newChatContacts,\n          oldChatContactsId = state.chatContacts.map(j => j.uid);\n\n      if (state.chats[action.id]) {\n        let oldState = state.chats[action.id].msg;\n        sendMsg = [...oldState, action.msg];\n      } else {\n        sendMsg = { ...state.chats,\n          [action.id]: {\n            isPinned: action.isPinned,\n            msg: [action.msg]\n          }\n        };\n      }\n\n      if (!oldChatContactsId.includes(action.id)) {\n        let extractContactInfo = state.contacts.find(k => k.uid === action.id);\n        newChatContacts = state.chatContacts.concat(extractContactInfo);\n      } else {\n        newChatContacts = state.chatContacts;\n      }\n\n      return { ...state,\n        chats: sendMsg,\n        chatContacts: newChatContacts\n      };\n\n    case \"CHANGE_STATUS\":\n      return { ...state,\n        status: action.status\n      };\n\n    case \"MARK_AS_SEEN\":\n      let marked = state.chats[action.id];\n      marked !== undefined && marked.msg.forEach(msg => {\n        msg.isSeen = true;\n      });\n      return { ...state\n      };\n\n    case \"SEARCH_CONTACTS\":\n      if (action.query.length) {\n        let filteredContacts = state.contacts.filter(contact => {\n          return contact.displayName.toLowerCase().includes(action.query.toLowerCase());\n        });\n        let filteredChats = state.chatContacts.filter(chat => {\n          return chat.displayName.toLowerCase().includes(action.query.toLowerCase());\n        });\n        return { ...state,\n          filteredContacts,\n          filteredChats\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    case \"SET_PINNED\":\n      let pinned = state.chats[action.id];\n\n      if (pinned) {\n        pinned.isPinned = action.value;\n        state.chatContacts.sort((a, b) => b.uid - a.uid);\n        return { ...state\n        };\n      } else {\n        return { ...state\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default chats;","map":{"version":3,"sources":["E:/react/template-belajar-react/src/redux/reducers/chat/chats.js"],"names":["initialState","chats","contacts","chatContacts","pinned","status","filteredContacts","filteredChats","state","action","type","sendMsg","newChatContacts","oldChatContactsId","map","j","uid","id","oldState","msg","isPinned","includes","extractContactInfo","find","k","concat","marked","undefined","forEach","isSeen","query","length","filter","contact","displayName","toLowerCase","chat","value","sort","a","b"],"mappings":"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","sourcesContent":["const initialState = {\n  chats: [],\n  contacts: [],\n  chatContacts: [],\n  pinned: [],\n  status: \"active\",\n  filteredContacts: [],\n  filteredChats: []\n}\n\nconst chats = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_CONTACTS\":\n      return { ...state, chats: action.chats, contacts: action.contacts }\n    case \"GET_CHAT_CONTACTS\":\n      return { ...state, chatContacts: action.chats }\n    case \"SEND_MESSAGE\":\n      let sendMsg,\n        newChatContacts,\n        oldChatContactsId = state.chatContacts.map(j => j.uid)\n      if (state.chats[action.id]) {\n        let oldState = state.chats[action.id].msg\n        sendMsg = [...oldState, action.msg]\n      } else {\n        sendMsg = {\n          ...state.chats,\n          [action.id]: {\n            isPinned: action.isPinned,\n            msg: [action.msg]\n          }\n        }\n      }\n      if (!oldChatContactsId.includes(action.id)) {\n        let extractContactInfo = state.contacts.find(k => k.uid === action.id)\n        newChatContacts = state.chatContacts.concat(extractContactInfo)\n      } else {\n        newChatContacts = state.chatContacts\n      }\n      return { ...state, chats: sendMsg, chatContacts: newChatContacts }\n    case \"CHANGE_STATUS\":\n      return { ...state, status: action.status }\n    case \"MARK_AS_SEEN\":\n      let marked = state.chats[action.id]\n      marked !== undefined &&\n        marked.msg.forEach(msg => {\n          msg.isSeen = true\n        })\n      return { ...state }\n    case \"SEARCH_CONTACTS\":\n      if (action.query.length) {\n        let filteredContacts = state.contacts.filter(contact => {\n          return contact.displayName\n            .toLowerCase()\n            .includes(action.query.toLowerCase())\n        })\n        let filteredChats = state.chatContacts.filter(chat => {\n          return chat.displayName\n            .toLowerCase()\n            .includes(action.query.toLowerCase())\n        })\n        return { ...state, filteredContacts, filteredChats }\n      } else {\n        return { ...state }\n      }\n    case \"SET_PINNED\":\n      let pinned = state.chats[action.id]\n      if (pinned) {\n        pinned.isPinned = action.value\n        state.chatContacts.sort((a, b) => b.uid - a.uid)\n        return { ...state }\n      } else {\n        return { ...state }\n      }\n    default:\n      return { ...state }\n  }\n}\n\nexport default chats\n"]},"metadata":{},"sourceType":"module"}