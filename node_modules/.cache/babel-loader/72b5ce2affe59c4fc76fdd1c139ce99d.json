{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deep_diff_1 = require(\"deep-diff\"); // @ts-ignore\n\n\nvar nested_property_1 = require(\"nested-property\");\n\nfunction isPlainObj() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.every(function (d) {\n    if (!d) {\n      return false;\n    }\n\n    var prototype = Object.getPrototypeOf(d);\n    return Object.prototype.toString.call(d).slice(8, -1) === 'Object' && (prototype === null || prototype === Object.getPrototypeOf({}));\n  });\n}\n\nfunction isArray() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.every(Array.isArray);\n}\n\nfunction isNumber() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.every(function (d) {\n    return typeof d === 'number';\n  });\n}\n\nfunction treeChanges(data, nextData) {\n  if (!data || !nextData) {\n    throw new Error('Missing required parameters');\n  }\n\n  return {\n    changed: function changed(key) {\n      var left = nested_property_1.get(data, key);\n      var right = nested_property_1.get(nextData, key);\n\n      if (isArray(left, right) || isPlainObj(left, right)) {\n        return !!deep_diff_1.diff(left, right);\n      }\n\n      return left !== right;\n    },\n    changedFrom: function changedFrom(key, previous, actual) {\n      if (typeof key === 'undefined') {\n        throw new Error('Key parameter is required');\n      }\n\n      var useActual = typeof previous !== 'undefined' && typeof actual !== 'undefined';\n      var left = nested_property_1.get(data, key);\n      var right = nested_property_1.get(nextData, key);\n      var leftComparator = Array.isArray(previous) ? previous.indexOf(left) >= 0 : left === previous;\n      var rightComparator = Array.isArray(actual) ? actual.indexOf(right) >= 0 : right === actual;\n      return leftComparator && (useActual ? rightComparator : !useActual);\n    },\n    changedTo: function changedTo(key, actual) {\n      if (typeof key === 'undefined') {\n        throw new Error('Key parameter is required');\n      }\n\n      var left = nested_property_1.get(data, key);\n      var right = nested_property_1.get(nextData, key);\n      var leftComparator = Array.isArray(actual) ? actual.indexOf(left) < 0 : left !== actual;\n      var rightComparator = Array.isArray(actual) ? actual.indexOf(right) >= 0 : right === actual;\n      return leftComparator && rightComparator;\n    },\n    increased: function increased(key) {\n      if (typeof key === 'undefined') {\n        throw new Error('Key parameter is required');\n      }\n\n      return isNumber(nested_property_1.get(data, key), nested_property_1.get(nextData, key)) && nested_property_1.get(data, key) < nested_property_1.get(nextData, key);\n    },\n    decreased: function decreased(key) {\n      if (typeof key === 'undefined') {\n        throw new Error('Key parameter is required');\n      }\n\n      return isNumber(nested_property_1.get(data, key), nested_property_1.get(nextData, key)) && nested_property_1.get(data, key) > nested_property_1.get(nextData, key);\n    }\n  };\n}\n\nexports.default = treeChanges;","map":null,"metadata":{},"sourceType":"script"}