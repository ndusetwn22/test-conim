{"ast":null,"code":"// Helper functions for filtering\nexport var defaultMatcher=function defaultMatcher(filterText,node){return node.name.toLowerCase().indexOf(filterText.toLowerCase())!==-1;};export var findNode=function findNode(node,filter,matcher){return matcher(filter,node)||// i match\nnode.children&&// or i have decendents and one of them match\nnode.children.length&&!!node.children.find(function(child){return findNode(child,filter,matcher);});};export var filterTree=function filterTree(node,filter){var matcher=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultMatcher;// If im an exact match then all my children get to stay\nif(matcher(filter,node)||!node.children){return node;}// If not then only keep the ones that match or have matching descendants\nvar filtered=node.children.filter(function(child){return findNode(child,filter,matcher);}).map(function(child){return filterTree(child,filter,matcher);});return Object.assign({},node,{children:filtered});};export var expandFilteredNodes=function expandFilteredNodes(node,filter){var matcher=arguments.length>2&&arguments[2]!==undefined?arguments[2]:defaultMatcher;var children=node.children;if(!children||children.length===0){return Object.assign({},node,{toggled:false});}var childrenWithMatches=node.children.filter(function(child){return findNode(child,filter,matcher);});var shouldExpand=childrenWithMatches.length>0;// If im going to expand, go through all the matches and see if thier children need to expand\nif(shouldExpand){children=childrenWithMatches.map(function(child){return expandFilteredNodes(child,filter,matcher);});}return Object.assign({},node,{children:children,toggled:shouldExpand});};","map":null,"metadata":{},"sourceType":"module"}