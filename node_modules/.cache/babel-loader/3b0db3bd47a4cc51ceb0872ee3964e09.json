{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { history } from \"../../../history\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport axios from \"axios\";\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"; // Init firebase if not already initialized\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nlet firebaseAuth = firebase.auth(); // const initAuth0 = new auth0.WebAuth(configAuth)\n\nexport const submitLoginWithFireBase = (email, password, remember) => {\n  return dispatch => {\n    let userEmail = null,\n        loggedIn = false;\n    firebaseAuth.signInWithEmailAndPassword(email, password).then(result => {\n      firebaseAuth.onAuthStateChanged(user => {\n        result.user.updateProfile({\n          displayName: \"Admin\"\n        });\n        let name = result.user.displayName;\n\n        if (user) {\n          userEmail = user.email;\n          loggedIn = true;\n          dispatch({\n            type: \"LOGIN_WITH_EMAIL\",\n            payload: {\n              email: userEmail,\n              name,\n              isSignedIn: loggedIn,\n              loggedInWith: \"firebase\"\n            }\n          });\n        }\n\n        if (user && remember) {\n          firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION).then(() => {\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn,\n                remember: true,\n                loggedInWith: \"firebase\"\n              }\n            });\n          });\n        }\n\n        history.push(\"/\");\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider();\n    provider.setCustomParameters({\n      display: \"popup\"\n    });\n    firebaseAuth.signInWithPopup(provider).then(result => {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      let token = result.credential.accessToken,\n          // The signed-in user info.\n      user = result.user.email;\n      dispatch({\n        type: \"LOGIN_WITH_FB\",\n        payload: {\n          user,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      if (user) history.push(\"/\");\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_TWITTER\",\n        payload: {\n          user,\n          name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithGoogle = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_GOOGLE\",\n        payload: {\n          email: user,\n          name: name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider();\n    firebaseAuth.signInWithPopup(provider).then(function (result) {\n      let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL;\n      dispatch({\n        type: \"LOGIN_WITH_GITHUB\",\n        payload: {\n          user,\n          name,\n          photoUrl,\n          token,\n          loggedInWith: \"firebase\"\n        }\n      });\n      history.push(\"/\");\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport const loginWithJWT = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  return dispatch => {\n    axios.post(\"/api/authenticate/login/user\", {\n      email: user.email,\n      password: user.password\n    }).then(response => {\n      var loggedInUser;\n\n      if (response.data) {\n        loggedInUser = response.data.user;\n        dispatch({\n          type: \"LOGIN_WITH_JWT\",\n          payload: {\n            loggedInUser,\n            loggedInWith: \"jwt\"\n          }\n        });\n        history.push(\"/\");\n      }\n    }).catch(err => console.log(err));\n  };\n};\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_JWT\",\n      payload: {}\n    });\n    history.push(\"/pages/login\");\n  };\n};\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_FIREBASE\",\n      payload: {}\n    });\n    history.push(\"/pages/login\");\n  };\n};\nexport const changeRole = role => {\n  return dispatch => dispatch({\n    type: \"CHANGE_ROLE\",\n    userRole: role\n  });\n};\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  console.log('custom : ', user); // return dispatch => {\n  //   axios\n  //     .post(\"/api/authenticate/login/user\", {\n  //       email: user.email,\n  //       password: user.password\n  //     })\n  //     .then(response => {\n  //       var loggedInUser\n  //       if (response.data) {\n  //         loggedInUser = response.data.user\n  //         dispatch({\n  //           type: \"LOGIN_WITH_JWT\",\n  //           payload: { loggedInUser, loggedInWith: \"jwt\" }\n  //         })\n  //         history.push(\"/\")\n  //       }\n  //     })\n  //     .catch(err => console.log(err))\n  // }\n};","map":{"version":3,"sources":["E:/react/rombak-react-vuexy/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","config","apps","length","initializeApp","firebaseAuth","auth","submitLoginWithFireBase","email","password","remember","dispatch","userEmail","loggedIn","signInWithEmailAndPassword","then","result","onAuthStateChanged","user","updateProfile","displayName","name","type","payload","isSignedIn","loggedInWith","setPersistence","Auth","Persistence","SESSION","push","catch","error","console","log","loginWithFB","provider","FacebookAuthProvider","setCustomParameters","display","signInWithPopup","token","credential","accessToken","loginWithTwitter","TwitterAuthProvider","photoUrl","photoURL","loginWithGoogle","GoogleAuthProvider","loginWithGithub","GithubAuthProvider","additionalUserInfo","username","loginWithJWT","post","response","loggedInUser","data","err","logoutWithJWT","logoutWithFirebase","changeRole","role","userRole","loginWithCustom"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\nimport \"firebase/auth\"\nimport \"firebase/database\"\nimport axios from \"axios\"\nimport { config } from \"../../../authServices/firebase/firebaseConfig\"\n\n// Init firebase if not already initialized\nif (!firebase.apps.length) {\n  firebase.initializeApp(config)\n}\n\nlet firebaseAuth = firebase.auth()\n\n// const initAuth0 = new auth0.WebAuth(configAuth)\n\nexport const submitLoginWithFireBase = (email, password, remember) => {\n  return dispatch => {\n    let userEmail = null,\n      loggedIn = false\n    firebaseAuth\n      .signInWithEmailAndPassword(email, password)\n      .then(result => {\n        firebaseAuth.onAuthStateChanged(user => {\n          result.user.updateProfile({\n            displayName: \"Admin\"\n          })\n          let name = result.user.displayName\n          if (user) {\n            userEmail = user.email\n            loggedIn = true\n            dispatch({\n              type: \"LOGIN_WITH_EMAIL\",\n              payload: {\n                email: userEmail,\n                name,\n                isSignedIn: loggedIn,\n                loggedInWith: \"firebase\"\n              }\n            })\n          }\n          if (user && remember) {\n            firebase\n              .auth()\n              .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n              .then(() => {\n                dispatch({\n                  type: \"LOGIN_WITH_EMAIL\",\n                  payload: {\n                    email: userEmail,\n                    name,\n                    isSignedIn: loggedIn,\n                    remember: true,\n                    loggedInWith: \"firebase\"\n                  }\n                })\n              })\n          }\n          history.push(\"/\")\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithFB = () => {\n  return dispatch => {\n    let provider = new firebase.auth.FacebookAuthProvider()\n    provider.setCustomParameters({\n      display: \"popup\"\n    })\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(result => {\n        // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n        let token = result.credential.accessToken,\n          // The signed-in user info.\n          user = result.user.email\n        dispatch({\n          type: \"LOGIN_WITH_FB\",\n          payload: {\n            user,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        if (user) history.push(\"/\")\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithTwitter = () => {\n  return dispatch => {\n    let provider = new firebase.auth.TwitterAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_TWITTER\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithGoogle = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GoogleAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.user.displayName,\n          photoUrl = result.user.photoURL\n        dispatch({\n          type: \"LOGIN_WITH_GOOGLE\",\n          payload: {\n            email: user,\n            name: name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithGithub = () => {\n  return dispatch => {\n    let provider = new firebase.auth.GithubAuthProvider()\n    firebaseAuth\n      .signInWithPopup(provider)\n      .then(function(result) {\n        let token = result.credential.accessToken,\n          user = result.user.email,\n          name = result.additionalUserInfo.username,\n          photoUrl = result.user.photoURL\n\n        dispatch({\n          type: \"LOGIN_WITH_GITHUB\",\n          payload: {\n            user,\n            name,\n            photoUrl,\n            token,\n            loggedInWith: \"firebase\"\n          }\n        })\n        history.push(\"/\")\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n}\n\nexport const loginWithJWT = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/login/user\", {\n        email: user.email,\n        password: user.password\n      })\n      .then(response => {\n        var loggedInUser\n\n        if (response.data) {\n          loggedInUser = response.data.user\n\n          dispatch({\n            type: \"LOGIN_WITH_JWT\",\n            payload: { loggedInUser, loggedInWith: \"jwt\" }\n          })\n\n          history.push(\"/\")\n        }\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const logoutWithJWT = () => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const logoutWithFirebase = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n    history.push(\"/pages/login\")\n  }\n}\n\nexport const changeRole = role => {\n  return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n}\n\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n\n  console.log('custom : ', user)\n\n  // return dispatch => {\n  //   axios\n  //     .post(\"/api/authenticate/login/user\", {\n  //       email: user.email,\n  //       password: user.password\n  //     })\n  //     .then(response => {\n  //       var loggedInUser\n\n  //       if (response.data) {\n  //         loggedInUser = response.data.user\n\n  //         dispatch({\n  //           type: \"LOGIN_WITH_JWT\",\n  //           payload: { loggedInUser, loggedInWith: \"jwt\" }\n  //         })\n\n  //         history.push(\"/\")\n  //       }\n  //     })\n  //     .catch(err => console.log(err))\n  // }\n}"]},"metadata":{},"sourceType":"module"}