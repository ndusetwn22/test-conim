{"ast":null,"code":"import _classCallCheck from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import ExtensionsHeader from\"../extensionsHeader\";import{Row,Col,Card,CardHeader,CardBody,CardTitle,Spinner}from\"reactstrap\";import{Treebeard,decorators}from\"react-treebeard\";import Prism from\"prismjs\";import{connect}from\"react-redux\";import*as filters from\"./Filter\";import NodeViewer from\"./NodeViewer\";import{data}from\"./Data\";import{styleLight,styleDark}from\"./Styles\";var Loading=function Loading(props){return/*#__PURE__*/React.createElement(\"div\",{style:props.style.wrapper},/*#__PURE__*/React.createElement(Spinner,{size:\"sm\",color:\"primary\",style:props.style.arrow}));};var TreeView=/*#__PURE__*/function(_React$Component){_inherits(TreeView,_React$Component);var _super=_createSuper(TreeView);function TreeView(){var _this;_classCallCheck(this,TreeView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={data:data};_this.onToggle=function(node,toggled){var _this$state=_this.state,cursor=_this$state.cursor,data=_this$state.data;if(cursor){_this.setState(function(){return{cursor:cursor,active:false};});}node.active=!node.active;if(node.children){node.toggled=toggled;}_this.setState(function(){return{cursor:node,data:Object.assign({},data)};});};_this.onFilterMouseUp=function(_ref){var value=_ref.target.value;var filter=value.trim();if(!filter){return _this.setState(function(){return{data:data};});}var filtered=filters.filterTree(data,filter);filtered=filters.expandFilteredNodes(filtered,filter);_this.setState(function(){return{data:filtered};});};return _this;}_createClass(TreeView,[{key:\"componentDidMount\",value:function componentDidMount(){Prism.highlightAll();}},{key:\"render\",value:function render(){var _this$state2=this.state,data=_this$state2.data,cursor=_this$state2.cursor;decorators.Loading=Loading;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ExtensionsHeader,{title:\"React Treebeard\",subTitle:\"Data-Driven, Fast, Efficient and Customisable tree view component. \",link:\"https://github.com/storybookjs/react-treebeard\"}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Default\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xl:\"6\",lg:\"12\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"form-control mb-1\",onKeyUp:this.onFilterMouseUp}),/*#__PURE__*/React.createElement(Treebeard,{data:data,onToggle:this.onToggle,style:this.props.theme===\"light\"||this.props.theme===\"semi-dark\"?styleLight:styleDark,decorators:decorators,animations:false})),/*#__PURE__*/React.createElement(Col,{xl:\"6\",lg:\"12\",className:\"mt-2 mt-xl-0\"},/*#__PURE__*/React.createElement(NodeViewer,{node:cursor}))))))));}}]);return TreeView;}(React.Component);var mapStateToProps=function mapStateToProps(state){return{theme:state.customizer.customizer.theme};};export default connect(mapStateToProps)(TreeView);","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/extensions/treeview/TreeView.js"],"names":["React","ExtensionsHeader","Row","Col","Card","CardHeader","CardBody","CardTitle","Spinner","Treebeard","decorators","Prism","connect","filters","NodeViewer","data","styleLight","styleDark","Loading","props","style","wrapper","arrow","TreeView","state","onToggle","node","toggled","cursor","setState","active","children","Object","assign","onFilterMouseUp","value","target","filter","trim","filtered","filterTree","expandFilteredNodes","highlightAll","theme","Component","mapStateToProps","customizer"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport ExtensionsHeader from \"../extensionsHeader\"\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  Spinner\n} from \"reactstrap\"\nimport { Treebeard, decorators } from \"react-treebeard\"\nimport Prism from \"prismjs\"\nimport { connect } from \"react-redux\"\nimport * as filters from \"./Filter\"\nimport NodeViewer from \"./NodeViewer\"\nimport { data } from \"./Data\"\nimport { styleLight, styleDark } from \"./Styles\"\nconst Loading = props => {\n  return (\n    <div style={props.style.wrapper}>\n      <Spinner size=\"sm\" color=\"primary\" style={props.style.arrow} />\n    </div>\n  )\n}\n\nclass TreeView extends React.Component {\n  state = {\n    data\n  }\n\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n\n  onToggle = (node, toggled) => {\n    const { cursor, data } = this.state\n\n    if (cursor) {\n      this.setState(() => ({ cursor, active: false }))\n    }\n\n    node.active = !node.active\n    if (node.children) {\n      node.toggled = toggled\n    }\n    this.setState(() => ({ cursor: node, data: Object.assign({}, data) }))\n  }\n\n  onFilterMouseUp = ({ target: { value } }) => {\n    const filter = value.trim()\n    if (!filter) {\n      return this.setState(() => ({ data }))\n    }\n    let filtered = filters.filterTree(data, filter)\n    filtered = filters.expandFilteredNodes(filtered, filter)\n    this.setState(() => ({ data: filtered }))\n  }\n\n  render() {\n    const { data, cursor } = this.state\n    decorators.Loading = Loading\n\n    return (\n      <React.Fragment>\n        <ExtensionsHeader\n          title=\"React Treebeard\"\n          subTitle=\"Data-Driven, Fast, Efficient and Customisable tree view component. \"\n          link=\"https://github.com/storybookjs/react-treebeard\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Default</CardTitle>\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col xl=\"6\" lg=\"12\">\n                    <input\n                      type=\"text\"\n                      className=\"form-control mb-1\"\n                      onKeyUp={this.onFilterMouseUp}\n                    />\n                    <Treebeard\n                      data={data}\n                      onToggle={this.onToggle}\n                      style={\n                        this.props.theme === \"light\" ||\n                        this.props.theme === \"semi-dark\"\n                          ? styleLight\n                          : styleDark\n                      }\n                      decorators={decorators}\n                      animations={false}\n                    />\n                  </Col>\n                  <Col xl=\"6\" lg=\"12\" className=\"mt-2 mt-xl-0\">\n                    <NodeViewer node={cursor} />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    theme: state.customizer.customizer.theme\n  }\n}\n\nexport default connect(mapStateToProps)(TreeView)\n"]},"metadata":{},"sourceType":"module"}