{"ast":null,"code":"import _classCallCheck from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{Card,CardHeader,CardTitle,CardBody}from\"reactstrap\";import ReactTable from\"react-table\";import treeTableHOC from\"react-table/lib/hoc/treeTable\";import{nestedData}from\"./TableData\";var TreeTable=treeTableHOC(ReactTable);var NestedTable=/*#__PURE__*/function(_React$Component){_inherits(NestedTable,_React$Component);var _super=_createSuper(NestedTable);function NestedTable(){var _this;_classCallCheck(this,NestedTable);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={data:nestedData};return _this;}_createClass(NestedTable,[{key:\"render\",value:function render(){var data=this.state.data;return/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Nested\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(TreeTable,{filterable:true,className:\"nested-table\",defaultFilterMethod:function defaultFilterMethod(filter,row,column){var id=filter.pivotId||filter.id;return row[id]!==undefined?String(row[id]).toLowerCase().includes(filter.value.toLowerCase()):true;},data:data,columns:[// we only require the accessor so TreeTable\n// can handle the pivot automatically\n// any other columns we want to display\n{Header:\"First Name\",accessor:\"first_name\"},{Header:\"Last Name\",accessor:\"last_name\"},{Header:\"Company Name\",accessor:\"company_name\"},{Header:\"Address\",accessor:\"address\"},{Header:\"Phone 1\",accessor:\"phone1\"},{Header:\"Email\",accessor:\"email\"}],defaultPageSize:10,SubComponent:function SubComponent(row){// a SubComponent just for the final detail\nvar columns=[{Header:\"Property\",accessor:\"property\",width:200,Cell:function Cell(ci){return\"\".concat(ci.value,\":\");},style:{backgroundColor:\"#DDD\",textAlign:\"right\",fontWeight:\"bold\"}},{Header:\"Value\",accessor:\"value\"}];var rowData=Object.keys(row.original).map(function(key){return{property:key,value:row.original[key].toString()};});return/*#__PURE__*/React.createElement(\"div\",{style:{padding:\"10px\"}},/*#__PURE__*/React.createElement(ReactTable,{data:rowData,columns:columns,pageSize:rowData.length,showPagination:false}));}})));}}]);return NestedTable;}(React.Component);export default NestedTable;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/views/tables/react-tables/NestedTable.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","ReactTable","treeTableHOC","nestedData","TreeTable","NestedTable","state","data","filter","row","column","id","pivotId","undefined","String","toLowerCase","includes","value","Header","accessor","columns","width","Cell","ci","style","backgroundColor","textAlign","fontWeight","rowData","Object","keys","original","map","key","property","toString","padding","length","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\nimport ReactTable from \"react-table\"\nimport treeTableHOC from \"react-table/lib/hoc/treeTable\"\nimport { nestedData } from \"./TableData\"\nconst TreeTable = treeTableHOC(ReactTable)\nclass NestedTable extends React.Component {\n  state = {\n    data: nestedData\n  }\n  render() {\n    const { data } = this.state\n\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Nested</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TreeTable\n            filterable\n            className=\"nested-table\"\n            defaultFilterMethod={(filter, row, column) => {\n              const id = filter.pivotId || filter.id\n              return row[id] !== undefined\n                ? String(row[id])\n                    .toLowerCase()\n                    .includes(filter.value.toLowerCase())\n                : true\n            }}\n            data={data}\n            columns={[\n              // we only require the accessor so TreeTable\n              // can handle the pivot automatically\n\n              // any other columns we want to display\n              {\n                Header: \"First Name\",\n                accessor: \"first_name\"\n              },\n              {\n                Header: \"Last Name\",\n                accessor: \"last_name\"\n              },\n              {\n                Header: \"Company Name\",\n                accessor: \"company_name\"\n              },\n              {\n                Header: \"Address\",\n                accessor: \"address\"\n              },\n              {\n                Header: \"Phone 1\",\n                accessor: \"phone1\"\n              },\n              {\n                Header: \"Email\",\n                accessor: \"email\"\n              }\n            ]}\n            defaultPageSize={10}\n            SubComponent={row => {\n              // a SubComponent just for the final detail\n              const columns = [\n                {\n                  Header: \"Property\",\n                  accessor: \"property\",\n                  width: 200,\n                  Cell: ci => {\n                    return `${ci.value}:`\n                  },\n                  style: {\n                    backgroundColor: \"#DDD\",\n                    textAlign: \"right\",\n                    fontWeight: \"bold\"\n                  }\n                },\n                { Header: \"Value\", accessor: \"value\" }\n              ]\n              const rowData = Object.keys(row.original).map(key => {\n                return {\n                  property: key,\n                  value: row.original[key].toString()\n                }\n              })\n              return (\n                <div style={{ padding: \"10px\" }}>\n                  <ReactTable\n                    data={rowData}\n                    columns={columns}\n                    pageSize={rowData.length}\n                    showPagination={false}\n                  />\n                </div>\n              )\n            }}\n          />\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default NestedTable\n"]},"metadata":{},"sourceType":"module"}