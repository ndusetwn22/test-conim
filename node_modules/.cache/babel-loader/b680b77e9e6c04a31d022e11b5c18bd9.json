{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable */\n\n\nexports.default = function (Component) {\n  var _class, _temp, _initialiseProps;\n\n  var wrapper = (_temp = _class = function (_React$Component) {\n    _inherits(RTTreeTable, _React$Component);\n\n    function RTTreeTable(props) {\n      _classCallCheck(this, RTTreeTable);\n\n      var _this = _possibleConstructorReturn(this, (RTTreeTable.__proto__ || Object.getPrototypeOf(RTTreeTable)).call(this, props));\n\n      _initialiseProps.call(_this);\n\n      _this.getWrappedInstance.bind(_this);\n\n      _this.TrComponent.bind(_this);\n\n      _this.getTrProps.bind(_this);\n\n      return _this;\n    } // this is so we can expose the underlying ReactTable to get at the sortedData for selectAll\n\n\n    _createClass(RTTreeTable, [{\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props = this.props,\n            columns = _props.columns,\n            treeTableIndent = _props.treeTableIndent,\n            rest = _objectWithoutProperties(_props, ['columns', 'treeTableIndent']);\n\n        var TrComponent = this.TrComponent,\n            getTrProps = this.getTrProps;\n        var extra = {\n          columns: columns.map(function (col) {\n            var column = col;\n\n            if (rest.pivotBy && (rest.pivotBy.includes(col.accessor) || rest.pivotBy.includes(col.id))) {\n              column = {\n                id: col.id,\n                accessor: col.accessor,\n                width: treeTableIndent + 'px',\n                show: false,\n                Header: '',\n                Expander: col.Expander,\n                PivotValue: col.PivotValue,\n                Pivot: col.Pivot\n              };\n            }\n\n            return column;\n          }),\n          TrComponent: TrComponent,\n          getTrProps: getTrProps\n        };\n        return _react2.default.createElement(Component, _extends({}, rest, extra, {\n          ref: function ref(r) {\n            return _this2.wrappedInstance = r;\n          }\n        }));\n      }\n    }]);\n\n    return RTTreeTable;\n  }(_react2.default.Component), _initialiseProps = function _initialiseProps() {\n    var _this3 = this;\n\n    this.getWrappedInstance = function () {\n      if (!_this3.wrappedInstance) console.warn('RTTreeTable - No wrapped instance');\n      if (_this3.wrappedInstance.getWrappedInstance) return _this3.wrappedInstance.getWrappedInstance();else return _this3.wrappedInstance;\n    };\n\n    this.TrComponent = function (props) {\n      var ri = props.ri,\n          rest = _objectWithoutProperties(props, ['ri']);\n\n      if (ri && ri.groupedByPivot) {\n        var cell = _extends({}, props.children[ri.level]);\n\n        cell.props.style.flex = 'unset';\n        cell.props.style.width = '100%';\n        cell.props.style.maxWidth = 'unset';\n        cell.props.style.paddingLeft = _this3.props.treeTableIndent * ri.level + 'px'; // cell.props.style.backgroundColor = '#DDD';\n\n        cell.props.style.borderBottom = '1px solid rgba(128,128,128,0.2)';\n        return _react2.default.createElement('div', {\n          className: 'rt-tr ' + rest.className,\n          role: 'row',\n          style: rest.style\n        }, cell);\n      }\n\n      return _react2.default.createElement(Component.defaultProps.TrComponent, rest);\n    };\n\n    this.getTrProps = function (state, ri, ci, instance) {\n      return {\n        ri: ri\n      };\n    };\n  }, _temp);\n  wrapper.displayName = 'RTTreeTable';\n  wrapper.defaultProps = {\n    treeTableIndent: 10\n  };\n  return wrapper;\n};","map":{"version":3,"sources":["../../../src/hoc/treeTable/index.js"],"names":["React","console","ri","rest","props","cell","columns","treeTableIndent","TrComponent","getTrProps","extra","column","col","id","accessor","width","show","Header","Expander","PivotValue","Pivot","wrapper"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport React from 'react'\n\nexport default Component => {\n  const wrapper = class RTTreeTable extends React.Component {\n    constructor(props) {\n      super(props)\n      this.getWrappedInstance.bind(this)\n      this.TrComponent.bind(this)\n      this.getTrProps.bind(this)\n    }\n\n    // this is so we can expose the underlying ReactTable to get at the sortedData for selectAll\n    getWrappedInstance = () => {\n      if (!this.wrappedInstance) console.warn('RTTreeTable - No wrapped instance')\n      if (this.wrappedInstance.getWrappedInstance) return this.wrappedInstance.getWrappedInstance()\n      else return this.wrappedInstance\n    }\n\n    TrComponent = props => {\n      const { ri, ...rest } = props\n      if (ri && ri.groupedByPivot) {\n        const cell = { ...props.children[ri.level] }\n\n        cell.props.style.flex = 'unset'\n        cell.props.style.width = '100%'\n        cell.props.style.maxWidth = 'unset'\n        cell.props.style.paddingLeft = `${this.props.treeTableIndent * ri.level}px`\n        // cell.props.style.backgroundColor = '#DDD';\n        cell.props.style.borderBottom = '1px solid rgba(128,128,128,0.2)'\n\n        return (\n          <div className={`rt-tr ${rest.className}`} role=\"row\" style={rest.style}>\n            {cell}\n          </div>\n        )\n      }\n      return <Component.defaultProps.TrComponent {...rest} />\n    }\n\n    getTrProps = (state, ri, ci, instance) => {\n      return { ri }\n    }\n\n    render() {\n      const { columns, treeTableIndent, ...rest } = this.props\n      const { TrComponent, getTrProps } = this\n      const extra = {\n        columns: columns.map(col => {\n          let column = col\n          if (rest.pivotBy && (rest.pivotBy.includes(col.accessor) || rest.pivotBy.includes(col.id))) {\n            column = {\n              id: col.id,\n              accessor: col.accessor,\n              width: `${treeTableIndent}px`,\n              show: false,\n              Header: '',\n              Expander: col.Expander,\n              PivotValue: col.PivotValue,\n              Pivot: col.Pivot,\n            }\n          }\n          return column\n        }),\n        TrComponent,\n        getTrProps,\n      }\n\n      return <Component {...rest} {...extra} ref={r => (this.wrappedInstance = r)} />\n    }\n  }\n  wrapper.displayName = 'RTTreeTable'\n  wrapper.defaultProps = {\n    treeTableIndent: 10,\n  }\n\n  return wrapper\n}\n"]},"metadata":{},"sourceType":"script"}