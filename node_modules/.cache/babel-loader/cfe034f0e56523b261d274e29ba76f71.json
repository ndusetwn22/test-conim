{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _save = _interopRequireDefault(require(\"../operations/save\"));\n\nvar _restore = _interopRequireDefault(require(\"../operations/restore\"));\n\nvar CONTENT_COLOR = '#a1c6e7';\nvar PADDING_COLOR = '#c4deb9';\nvar MARGIN_COLOR = '#f8cca1';\nvar shouldDebug = R.pathEq(['props', 'debug'], true); // TODO: Draw debug boxes using clipping to enhance quality\n\nvar debugContent = function debugContent(ctx) {\n  return function (node) {\n    var _node$box = node.box,\n        left = _node$box.left,\n        top = _node$box.top,\n        width = _node$box.width,\n        height = _node$box.height,\n        _node$box$paddingLeft = _node$box.paddingLeft,\n        paddingLeft = _node$box$paddingLeft === void 0 ? 0 : _node$box$paddingLeft,\n        _node$box$paddingTop = _node$box.paddingTop,\n        paddingTop = _node$box$paddingTop === void 0 ? 0 : _node$box$paddingTop,\n        _node$box$paddingRigh = _node$box.paddingRight,\n        paddingRight = _node$box$paddingRigh === void 0 ? 0 : _node$box$paddingRigh,\n        _node$box$paddingBott = _node$box.paddingBottom,\n        paddingBottom = _node$box$paddingBott === void 0 ? 0 : _node$box$paddingBott,\n        _node$box$borderLeftW = _node$box.borderLeftWidth,\n        borderLeftWidth = _node$box$borderLeftW === void 0 ? 0 : _node$box$borderLeftW,\n        _node$box$borderTopWi = _node$box.borderTopWidth,\n        borderTopWidth = _node$box$borderTopWi === void 0 ? 0 : _node$box$borderTopWi,\n        _node$box$borderRight = _node$box.borderRightWidth,\n        borderRightWidth = _node$box$borderRight === void 0 ? 0 : _node$box$borderRight,\n        _node$box$borderBotto = _node$box.borderBottomWidth,\n        borderBottomWidth = _node$box$borderBotto === void 0 ? 0 : _node$box$borderBotto;\n    ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();\n    return node;\n  };\n};\n\nvar debugPadding = function debugPadding(ctx) {\n  return function (node) {\n    var _node$box2 = node.box,\n        left = _node$box2.left,\n        top = _node$box2.top,\n        width = _node$box2.width,\n        height = _node$box2.height,\n        _node$box2$paddingLef = _node$box2.paddingLeft,\n        paddingLeft = _node$box2$paddingLef === void 0 ? 0 : _node$box2$paddingLef,\n        _node$box2$paddingTop = _node$box2.paddingTop,\n        paddingTop = _node$box2$paddingTop === void 0 ? 0 : _node$box2$paddingTop,\n        _node$box2$paddingRig = _node$box2.paddingRight,\n        paddingRight = _node$box2$paddingRig === void 0 ? 0 : _node$box2$paddingRig,\n        _node$box2$paddingBot = _node$box2.paddingBottom,\n        paddingBottom = _node$box2$paddingBot === void 0 ? 0 : _node$box2$paddingBot,\n        _node$box2$borderLeft = _node$box2.borderLeftWidth,\n        borderLeftWidth = _node$box2$borderLeft === void 0 ? 0 : _node$box2$borderLeft,\n        _node$box2$borderTopW = _node$box2.borderTopWidth,\n        borderTopWidth = _node$box2$borderTopW === void 0 ? 0 : _node$box2$borderTopW,\n        _node$box2$borderRigh = _node$box2.borderRightWidth,\n        borderRightWidth = _node$box2$borderRigh === void 0 ? 0 : _node$box2$borderRigh,\n        _node$box2$borderBott = _node$box2.borderBottomWidth,\n        borderBottomWidth = _node$box2$borderBott === void 0 ? 0 : _node$box2$borderBott;\n    ctx.fillColor(PADDING_COLOR).opacity(0.5); // Padding top\n\n    ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill(); // Padding left\n\n    ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill(); // Padding right\n\n    ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill(); // Padding bottom\n\n    ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();\n    return node;\n  };\n};\n\nvar debugMargin = function debugMargin(ctx) {\n  return function (node) {\n    var _node$box3 = node.box,\n        left = _node$box3.left,\n        top = _node$box3.top,\n        width = _node$box3.width,\n        height = _node$box3.height,\n        _node$box3$marginLeft = _node$box3.marginLeft,\n        marginLeft = _node$box3$marginLeft === void 0 ? 0 : _node$box3$marginLeft,\n        _node$box3$marginTop = _node$box3.marginTop,\n        marginTop = _node$box3$marginTop === void 0 ? 0 : _node$box3$marginTop,\n        _node$box3$marginRigh = _node$box3.marginRight,\n        marginRight = _node$box3$marginRigh === void 0 ? 0 : _node$box3$marginRigh,\n        _node$box3$marginBott = _node$box3.marginBottom,\n        marginBottom = _node$box3$marginBott === void 0 ? 0 : _node$box3$marginBott;\n    ctx.fillColor(MARGIN_COLOR).opacity(0.5); // Margin top\n\n    ctx.rect(left, top - marginTop, width, marginTop).fill(); // Margin left\n\n    ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill(); // Margin right\n\n    ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill(); // Margin bottom\n\n    ctx.rect(left, top + height, width, marginBottom).fill();\n    return node;\n  };\n};\n\nvar debugText = function debugText(ctx) {\n  return function (node) {\n    var _node$box4 = node.box,\n        left = _node$box4.left,\n        top = _node$box4.top,\n        width = _node$box4.width,\n        height = _node$box4.height,\n        _node$box4$marginLeft = _node$box4.marginLeft,\n        marginLeft = _node$box4$marginLeft === void 0 ? 0 : _node$box4$marginLeft,\n        _node$box4$marginTop = _node$box4.marginTop,\n        marginTop = _node$box4$marginTop === void 0 ? 0 : _node$box4$marginTop,\n        _node$box4$marginRigh = _node$box4.marginRight,\n        marginRight = _node$box4$marginRigh === void 0 ? 0 : _node$box4$marginRigh,\n        _node$box4$marginBott = _node$box4.marginBottom,\n        marginBottom = _node$box4$marginBott === void 0 ? 0 : _node$box4$marginBott;\n    var roundedWidth = Math.round(width + marginLeft + marginRight);\n    var roundedHeight = Math.round(height + marginTop + marginBottom);\n    ctx.fontSize(6).opacity(1).fillColor('black').text(roundedWidth + \" x \" + roundedHeight, left - marginLeft, Math.max(top - marginTop - 4, 1));\n    return node;\n  };\n};\n\nvar debugOrigin = function debugOrigin(ctx) {\n  return function (node) {\n    if (node.origin) {\n      ctx.circle(node.origin.left, node.origin.top, 3).fill('red').circle(node.origin.left, node.origin.top, 5).stroke('red');\n    }\n\n    return node;\n  };\n};\n\nvar renderDebug = function renderDebug(ctx) {\n  return R.tap(R.when(shouldDebug, R.compose((0, _restore.default)(ctx), debugOrigin(ctx), debugText(ctx), debugMargin(ctx), debugPadding(ctx), debugContent(ctx), (0, _save.default)(ctx))));\n};\n\nvar _default = renderDebug;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}