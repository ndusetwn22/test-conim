{"ast":null,"code":"// import React from \"react\"\n// import { Link } from \"react-router-dom\"\n// import classnames from \"classnames\"\n// import navigationConfig from \"../../../../../configs/navigationConfig\"\n// import SideMenuGroup from \"./SideMenuGroup\"\n// import { Badge } from \"reactstrap\"\n// import { ChevronRight } from \"react-feather\"\n// import { FormattedMessage } from \"react-intl\"\n// import { history } from \"../../../../../history\"\n// class SideMenuContent extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.parentArr = []\n//     this.collapsedPath = null\n//     this.redirectUnauthorized = () => {\n//       history.push(\"/misc/not-authorized\")\n//     }\n//   }\n//   state = {\n//     flag: true,\n//     isHovered: false,\n//     activeGroups: [],\n//     currentActiveGroup: [],\n//     tempArr: []\n//   }\n//   handleGroupClick = (id, parent = null, type = \"\") => {\n//     let open_group = this.state.activeGroups\n//     let active_group = this.state.currentActiveGroup\n//     let temp_arr = this.state.tempArr\n//     // Active Group to apply sidebar-group-active class\n//     if (type === \"item\" && parent === null) {\n//       active_group = []\n//       temp_arr = []\n//     } else if (type === \"item\" && parent !== null) {\n//       active_group = []\n//       if (temp_arr.includes(parent)) {\n//         temp_arr.splice(temp_arr.indexOf(parent) + 1, temp_arr.length)\n//       } else {\n//         temp_arr = []\n//         temp_arr.push(parent)\n//       }\n//       active_group = temp_arr.slice(0)\n//     } else if (type === \"collapse\" && parent === null) {\n//       temp_arr = []\n//       temp_arr.push(id)\n//     } else if (type === \"collapse\" && parent !== null) {\n//       if (active_group.includes(parent)) {\n//         temp_arr = active_group.slice(0)\n//       }\n//       if (temp_arr.includes(id)) {\n//         // temp_arr.splice(temp_arr.indexOf(id), 1)\n//         temp_arr.splice(temp_arr.indexOf(id), temp_arr.length)\n//       } else {\n//         temp_arr.push(id)\n//       }\n//     } else {\n//       temp_arr = []\n//     }\n//     if (type === \"collapse\") {\n//       // If open group does not include clicked group item\n//       if (!open_group.includes(id)) {\n//         // Get unmatched items that are not in the active group\n//         let temp = open_group.filter(function(obj) {\n//           return active_group.indexOf(obj) === -1\n//         })\n//         // Remove those unmatched items from open group\n//         if (temp.length > 0 && !open_group.includes(parent)) {\n//           open_group = open_group.filter(function(obj) {\n//             return !temp.includes(obj)\n//           })\n//         }\n//         if (open_group.includes(parent) && active_group.includes(parent)) {\n//           open_group = active_group.slice(0)\n//         }\n//         // Add group item clicked in open group\n//         if (!open_group.includes(id)) {\n//           open_group.push(id)\n//         }\n//       } else {\n//         // If open group includes click group item, remove it from open group\n//         open_group.splice(open_group.indexOf(id), 1)\n//       }\n//     }\n//     if (type === \"item\") {\n//       open_group = active_group.slice(0)\n//     }\n//     this.setState({\n//       activeGroups: open_group,\n//       tempArr: temp_arr,\n//       currentActiveGroup: active_group\n//     })\n//   }\n//   initRender = parentArr => {\n//     this.setState({\n//       activeGroups: parentArr.slice(0),\n//       currentActiveGroup: parentArr.slice(0),\n//       flag: false\n//     })\n//   }\n//   componentDidMount() {\n//     this.initRender(this.parentArr[0] ? this.parentArr[0] : [])\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevProps.activePath !== this.props.activePath) {\n//       if (this.collapsedMenuPaths !== null) {\n//         this.props.collapsedMenuPaths(this.collapsedMenuPaths)\n//       }\n//       this.initRender(\n//         this.parentArr[0] ? this.parentArr[this.parentArr.length - 1] : []\n//       )\n//     }\n//   }\n//   render() {\n//     // Loop over sidebar items\n//     // eslint-disable-next-line\n//     const menuItems = navigationConfig.map(item => {\n//       const CustomAnchorTag = item.type === \"external-link\" ? `a` : Link\n//       // checks if item has groupheader\n//       if (item.type === \"groupHeader\") {\n//         return (\n//           <li\n//             className=\"navigation-header\"\n//             key={`group-header-${item.groupTitle}`}>\n//             <span>{item.groupTitle}</span>\n//           </li>\n//         )\n//       }\n//       let renderItem = (\n//         <li\n//           className={classnames(\"nav-item\", {\n//             \"has-sub\": item.type === \"collapse\",\n//             open: this.state.activeGroups.includes(item.id),\n//             \"sidebar-group-active\": this.state.currentActiveGroup.includes(\n//               item.id\n//             ),\n//             hover: this.props.hoverIndex === item.id,\n//             active:\n//               (this.props.activeItemState === item.navLink &&\n//                 item.type === \"item\") ||\n//               (item.parentOf &&\n//                 item.parentOf.includes(this.props.activeItemState)),\n//             disabled: item.disabled\n//           })}\n//           key={item.id}\n//           onClick={e => {\n//             e.stopPropagation()\n//             if (item.type === \"item\") {\n//               this.props.handleActiveItem(item.navLink)\n//               this.handleGroupClick(item.id, null, item.type)\n//               if (this.props.deviceWidth <= 1200 && item.type === \"item\") {\n//                 this.props.toggleMenu()\n//               }\n//             } else {\n//               this.handleGroupClick(item.id, null, item.type)\n//             }\n//           }}>\n//           <CustomAnchorTag\n//             to={\n//               item.filterBase\n//                 ? item.filterBase\n//                 : item.navLink && item.type === \"item\"\n//                 ? item.navLink\n//                 : \"\"\n//             }\n//             href={item.type === \"external-link\" ? item.navLink : \"\"}\n//             className={`d-flex ${\n//               item.badgeText\n//                 ? \"justify-content-between\"\n//                 : \"justify-content-start\"\n//             }`}\n//             onMouseEnter={() => {\n//               this.props.handleSidebarMouseEnter(item.id)\n//             }}\n//             onMouseLeave={() => {\n//               this.props.handleSidebarMouseEnter(item.id)\n//             }}\n//             key={item.id}\n//             onClick={e => {\n//               return item.type === \"collapse\" ? e.preventDefault() : \"\"\n//             }}\n//             target={item.newTab ? \"_blank\" : undefined}>\n//             <div className=\"menu-text\">\n//               {item.icon}\n//               <span className=\"menu-item menu-title\">\n//                 <FormattedMessage id={item.title} />\n//               </span>\n//             </div>\n//             {item.badge ? (\n//               <div className=\"menu-badge\">\n//                 <Badge color={item.badge} className=\"mr-1\" pill>\n//                   {item.badgeText}\n//                 </Badge>\n//               </div>\n//             ) : (\n//               \"\"\n//             )}\n//             {item.type === \"collapse\" ? (\n//               <ChevronRight className=\"menu-toggle-icon\" size={13} />\n//             ) : (\n//               \"\"\n//             )}\n//           </CustomAnchorTag>\n//           {item.type === \"collapse\" ? (\n//             <SideMenuGroup\n//               group={item}\n//               handleGroupClick={this.handleGroupClick}\n//               activeGroup={this.state.activeGroups}\n//               handleActiveItem={this.props.handleActiveItem}\n//               activeItemState={this.props.activeItemState}\n//               handleSidebarMouseEnter={this.props.handleSidebarMouseEnter}\n//               activePath={this.props.activePath}\n//               hoverIndex={this.props.hoverIndex}\n//               initRender={this.initRender}\n//               parentArr={this.parentArr}\n//               triggerActive={undefined}\n//               currentActiveGroup={this.state.currentActiveGroup}\n//               permission={this.props.permission}\n//               currentUser={this.props.currentUser}\n//               redirectUnauthorized={this.redirectUnauthorized}\n//               collapsedMenuPaths={this.props.collapsedMenuPaths}\n//               toggleMenu={this.props.toggleMenu}\n//               deviceWidth={this.props.deviceWidth}\n//             />\n//           ) : (\n//             \"\"\n//           )}\n//         </li>\n//       )\n//       if (\n//         item.navLink &&\n//         item.collapsed !== undefined &&\n//         item.collapsed === true\n//       ) {\n//         this.collapsedPath = item.navLink\n//         this.props.collapsedMenuPaths(item.navLink)\n//       }\n//       if (\n//         item.type === \"collapse\" ||\n//         item.type === \"external-link\" ||\n//         (item.type === \"item\" ) ||\n//         item.permissions === undefined\n//       ) {\n//         return renderItem\n//       } else if (\n//         item.type === \"item\" &&\n//         item.navLink === this.props.activePath\n//         // &&\n//         // !item.permissions.includes(this.props.currentUser)\n//       ) {\n//         return this.redirectUnauthorized()\n//       }\n//     })\n//     return <React.Fragment>{menuItems}</React.Fragment>\n//   }\n// }\n// export default SideMenuContent","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/rombak-react-vuexy2/src/layouts/components/menu/vertical-menu/sidemenu/SideMenuContent.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from \"react\"\n// import { Link } from \"react-router-dom\"\n// import classnames from \"classnames\"\n// import navigationConfig from \"../../../../../configs/navigationConfig\"\n// import SideMenuGroup from \"./SideMenuGroup\"\n// import { Badge } from \"reactstrap\"\n// import { ChevronRight } from \"react-feather\"\n// import { FormattedMessage } from \"react-intl\"\n// import { history } from \"../../../../../history\"\n\n// class SideMenuContent extends React.Component {\n//   constructor(props) {\n//     super(props)\n\n//     this.parentArr = []\n//     this.collapsedPath = null\n//     this.redirectUnauthorized = () => {\n//       history.push(\"/misc/not-authorized\")\n//     }\n//   }\n//   state = {\n//     flag: true,\n//     isHovered: false,\n//     activeGroups: [],\n//     currentActiveGroup: [],\n//     tempArr: []\n//   }\n\n//   handleGroupClick = (id, parent = null, type = \"\") => {\n//     let open_group = this.state.activeGroups\n//     let active_group = this.state.currentActiveGroup\n//     let temp_arr = this.state.tempArr\n//     // Active Group to apply sidebar-group-active class\n//     if (type === \"item\" && parent === null) {\n//       active_group = []\n//       temp_arr = []\n//     } else if (type === \"item\" && parent !== null) {\n//       active_group = []\n//       if (temp_arr.includes(parent)) {\n//         temp_arr.splice(temp_arr.indexOf(parent) + 1, temp_arr.length)\n//       } else {\n//         temp_arr = []\n//         temp_arr.push(parent)\n//       }\n//       active_group = temp_arr.slice(0)\n//     } else if (type === \"collapse\" && parent === null) {\n//       temp_arr = []\n//       temp_arr.push(id)\n//     } else if (type === \"collapse\" && parent !== null) {\n//       if (active_group.includes(parent)) {\n//         temp_arr = active_group.slice(0)\n//       }\n//       if (temp_arr.includes(id)) {\n//         // temp_arr.splice(temp_arr.indexOf(id), 1)\n//         temp_arr.splice(temp_arr.indexOf(id), temp_arr.length)\n//       } else {\n//         temp_arr.push(id)\n//       }\n//     } else {\n//       temp_arr = []\n//     }\n\n//     if (type === \"collapse\") {\n//       // If open group does not include clicked group item\n//       if (!open_group.includes(id)) {\n//         // Get unmatched items that are not in the active group\n//         let temp = open_group.filter(function(obj) {\n//           return active_group.indexOf(obj) === -1\n//         })\n//         // Remove those unmatched items from open group\n//         if (temp.length > 0 && !open_group.includes(parent)) {\n//           open_group = open_group.filter(function(obj) {\n//             return !temp.includes(obj)\n//           })\n//         }\n//         if (open_group.includes(parent) && active_group.includes(parent)) {\n//           open_group = active_group.slice(0)\n//         }\n//         // Add group item clicked in open group\n//         if (!open_group.includes(id)) {\n//           open_group.push(id)\n//         }\n//       } else {\n//         // If open group includes click group item, remove it from open group\n//         open_group.splice(open_group.indexOf(id), 1)\n//       }\n//     }\n//     if (type === \"item\") {\n//       open_group = active_group.slice(0)\n//     }\n\n//     this.setState({\n//       activeGroups: open_group,\n//       tempArr: temp_arr,\n//       currentActiveGroup: active_group\n//     })\n//   }\n\n//   initRender = parentArr => {\n//     this.setState({\n//       activeGroups: parentArr.slice(0),\n//       currentActiveGroup: parentArr.slice(0),\n//       flag: false\n//     })\n//   }\n\n//   componentDidMount() {\n//     this.initRender(this.parentArr[0] ? this.parentArr[0] : [])\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevProps.activePath !== this.props.activePath) {\n//       if (this.collapsedMenuPaths !== null) {\n//         this.props.collapsedMenuPaths(this.collapsedMenuPaths)\n//       }\n\n//       this.initRender(\n//         this.parentArr[0] ? this.parentArr[this.parentArr.length - 1] : []\n//       )\n//     }\n//   }\n\n//   render() {\n//     // Loop over sidebar items\n//     // eslint-disable-next-line\n//     const menuItems = navigationConfig.map(item => {\n//       const CustomAnchorTag = item.type === \"external-link\" ? `a` : Link\n//       // checks if item has groupheader\n//       if (item.type === \"groupHeader\") {\n//         return (\n//           <li\n//             className=\"navigation-header\"\n//             key={`group-header-${item.groupTitle}`}>\n//             <span>{item.groupTitle}</span>\n//           </li>\n//         )\n//       }\n\n//       let renderItem = (\n//         <li\n//           className={classnames(\"nav-item\", {\n//             \"has-sub\": item.type === \"collapse\",\n//             open: this.state.activeGroups.includes(item.id),\n//             \"sidebar-group-active\": this.state.currentActiveGroup.includes(\n//               item.id\n//             ),\n//             hover: this.props.hoverIndex === item.id,\n//             active:\n//               (this.props.activeItemState === item.navLink &&\n//                 item.type === \"item\") ||\n//               (item.parentOf &&\n//                 item.parentOf.includes(this.props.activeItemState)),\n//             disabled: item.disabled\n//           })}\n//           key={item.id}\n//           onClick={e => {\n//             e.stopPropagation()\n//             if (item.type === \"item\") {\n//               this.props.handleActiveItem(item.navLink)\n//               this.handleGroupClick(item.id, null, item.type)\n//               if (this.props.deviceWidth <= 1200 && item.type === \"item\") {\n//                 this.props.toggleMenu()\n//               }\n//             } else {\n//               this.handleGroupClick(item.id, null, item.type)\n//             }\n//           }}>\n//           <CustomAnchorTag\n//             to={\n//               item.filterBase\n//                 ? item.filterBase\n//                 : item.navLink && item.type === \"item\"\n//                 ? item.navLink\n//                 : \"\"\n//             }\n//             href={item.type === \"external-link\" ? item.navLink : \"\"}\n//             className={`d-flex ${\n//               item.badgeText\n//                 ? \"justify-content-between\"\n//                 : \"justify-content-start\"\n//             }`}\n//             onMouseEnter={() => {\n//               this.props.handleSidebarMouseEnter(item.id)\n//             }}\n//             onMouseLeave={() => {\n//               this.props.handleSidebarMouseEnter(item.id)\n//             }}\n//             key={item.id}\n//             onClick={e => {\n//               return item.type === \"collapse\" ? e.preventDefault() : \"\"\n//             }}\n//             target={item.newTab ? \"_blank\" : undefined}>\n//             <div className=\"menu-text\">\n//               {item.icon}\n//               <span className=\"menu-item menu-title\">\n//                 <FormattedMessage id={item.title} />\n//               </span>\n//             </div>\n\n//             {item.badge ? (\n//               <div className=\"menu-badge\">\n//                 <Badge color={item.badge} className=\"mr-1\" pill>\n//                   {item.badgeText}\n//                 </Badge>\n//               </div>\n//             ) : (\n//               \"\"\n//             )}\n//             {item.type === \"collapse\" ? (\n//               <ChevronRight className=\"menu-toggle-icon\" size={13} />\n//             ) : (\n//               \"\"\n//             )}\n//           </CustomAnchorTag>\n//           {item.type === \"collapse\" ? (\n//             <SideMenuGroup\n//               group={item}\n//               handleGroupClick={this.handleGroupClick}\n//               activeGroup={this.state.activeGroups}\n//               handleActiveItem={this.props.handleActiveItem}\n//               activeItemState={this.props.activeItemState}\n//               handleSidebarMouseEnter={this.props.handleSidebarMouseEnter}\n//               activePath={this.props.activePath}\n//               hoverIndex={this.props.hoverIndex}\n//               initRender={this.initRender}\n//               parentArr={this.parentArr}\n//               triggerActive={undefined}\n//               currentActiveGroup={this.state.currentActiveGroup}\n//               permission={this.props.permission}\n//               currentUser={this.props.currentUser}\n//               redirectUnauthorized={this.redirectUnauthorized}\n//               collapsedMenuPaths={this.props.collapsedMenuPaths}\n//               toggleMenu={this.props.toggleMenu}\n//               deviceWidth={this.props.deviceWidth}\n//             />\n//           ) : (\n//             \"\"\n//           )}\n//         </li>\n//       )\n\n//       if (\n//         item.navLink &&\n//         item.collapsed !== undefined &&\n//         item.collapsed === true\n//       ) {\n//         this.collapsedPath = item.navLink\n//         this.props.collapsedMenuPaths(item.navLink)\n//       }\n\n//       if (\n//         item.type === \"collapse\" ||\n//         item.type === \"external-link\" ||\n//         (item.type === \"item\" ) ||\n//         item.permissions === undefined\n//       ) {\n//         return renderItem\n//       } else if (\n//         item.type === \"item\" &&\n//         item.navLink === this.props.activePath\n//         // &&\n//         // !item.permissions.includes(this.props.currentUser)\n//       ) {\n//         return this.redirectUnauthorized()\n//       }\n//     })\n//     return <React.Fragment>{menuItems}</React.Fragment>\n//   }\n// }\n// export default SideMenuContent\n"]},"metadata":{},"sourceType":"module"}