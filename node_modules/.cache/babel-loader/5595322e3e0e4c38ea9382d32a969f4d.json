{"ast":null,"code":"let initialState = {\n  mails: [],\n  params: null,\n  query: null,\n  selectedEmails: [],\n  filteredMails: []\n};\n\nconst emails = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_MAILS\":\n      let mails = [...state.mails];\n      mails = action.mails;\n      return { ...state,\n        mails,\n        params: action.routeParams\n      };\n\n    case \"SET_STARRED\":\n      state.mails.find(i => i.id === action.mailId).isStarred = !state.mails.find(i => i.id === action.mailId).isStarred;\n      return { ...state\n      };\n\n    case \"SEARCH_MAIL\":\n      let filteredMails = state.mails.filter(val => {\n        if (action.query.length > 0) {\n          return val.sender_name.toLowerCase().includes(action.query) || val.sender.toLowerCase().includes(action.query) || val.message.includes(action.query) || val.subject.toLowerCase().includes(action.query);\n        } else {\n          return state.mails;\n        }\n      });\n      return { ...state,\n        query: action.query,\n        filteredMails\n      };\n\n    case \"SELECT_MAIL\":\n      const mailId = action.id;\n      let selectedEmails = [...state.selectedEmails];\n\n      if (selectedEmails.find(id => id === mailId) !== undefined) {\n        selectedEmails = selectedEmails.filter(id => id !== mailId);\n      } else {\n        selectedEmails = [...selectedEmails, mailId];\n      }\n\n      return { ...state,\n        selectedEmails\n      };\n\n    case \"SELECT_ALL_MAILS\":\n      const arr = Object.keys(state.mails).map(k => {\n        return state.mails[k];\n      });\n      const selectedEmailsID = arr.map(mail => mail.id);\n      return { ...state,\n        selectedEmails: selectedEmailsID\n      };\n\n    case \"DESELECT_ALL_MAILS\":\n      {\n        return { ...state,\n          selectedEmails: []\n        };\n      }\n\n    case \"MOVE_MAIL\":\n      return { ...state,\n        selectedEmails: []\n      };\n\n    case \"SET_UNREAD\":\n      let updatedEmails = action.id.forEach(mailId => {\n        const mailIndex = state.mails.findIndex(mail => mail.id === mailId);\n        if (mailIndex !== -1) state.mails[mailIndex].unread = action.unreadFlag;\n        state.selectedEmails = [];\n      });\n      return { ...state,\n        updatedEmails\n      };\n\n    case \"CHANGE_FILTER\":\n      state.params = action.filter;\n      return { ...state\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default emails;","map":{"version":3,"sources":["E:/react/rombak-react-vuexy/src/redux/reducers/email/emails.js"],"names":["initialState","mails","params","query","selectedEmails","filteredMails","emails","state","action","type","routeParams","find","i","id","mailId","isStarred","filter","val","length","sender_name","toLowerCase","includes","sender","message","subject","undefined","arr","Object","keys","map","k","selectedEmailsID","mail","updatedEmails","forEach","mailIndex","findIndex","unread","unreadFlag"],"mappings":"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","sourcesContent":["let initialState = {\n  mails: [],\n  params: null,\n  query: null,\n  selectedEmails: [],\n  filteredMails: []\n}\n\nconst emails = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_MAILS\":\n      let mails = [...state.mails]\n      mails = action.mails\n      return { ...state, mails, params: action.routeParams }\n\n    case \"SET_STARRED\":\n      state.mails.find(\n        i => i.id === action.mailId\n      ).isStarred = !state.mails.find(i => i.id === action.mailId).isStarred\n      return { ...state }\n\n    case \"SEARCH_MAIL\":\n      let filteredMails = state.mails.filter(val => {\n        if (action.query.length > 0) {\n          return (\n            val.sender_name.toLowerCase().includes(action.query) ||\n            val.sender.toLowerCase().includes(action.query) ||\n            val.message.includes(action.query) ||\n            val.subject.toLowerCase().includes(action.query)\n          )\n        } else {\n          return state.mails\n        }\n      })\n\n      return { ...state, query: action.query, filteredMails }\n\n    case \"SELECT_MAIL\":\n      const mailId = action.id\n      let selectedEmails = [...state.selectedEmails]\n\n      if (selectedEmails.find(id => id === mailId) !== undefined) {\n        selectedEmails = selectedEmails.filter(id => id !== mailId)\n      } else {\n        selectedEmails = [...selectedEmails, mailId]\n      }\n\n      return { ...state, selectedEmails }\n\n    case \"SELECT_ALL_MAILS\":\n      const arr = Object.keys(state.mails).map(k => {\n        return state.mails[k]\n      })\n\n      const selectedEmailsID = arr.map(mail => mail.id)\n      return {\n        ...state,\n        selectedEmails: selectedEmailsID\n      }\n\n    case \"DESELECT_ALL_MAILS\": {\n      return {\n        ...state,\n        selectedEmails: []\n      }\n    }\n    case \"MOVE_MAIL\":\n      return { ...state, selectedEmails: [] }\n    case \"SET_UNREAD\":\n      let updatedEmails = action.id.forEach(mailId => {\n        const mailIndex = state.mails.findIndex(mail => mail.id === mailId)\n        if (mailIndex !== -1) state.mails[mailIndex].unread = action.unreadFlag\n        state.selectedEmails = []\n      })\n      return { ...state, updatedEmails }\n    case \"CHANGE_FILTER\":\n      state.params = action.filter\n      return { ...state }\n    default:\n      return { ...state }\n  }\n}\nexport default emails\n"]},"metadata":{},"sourceType":"module"}