{"ast":null,"code":"import mock from \"../mock\";\nimport jwt from \"jsonwebtoken\";\nlet users = [{\n  id: 1,\n  email: \"demo@demo.com\",\n  password: \"demodemo\",\n  name: \"Demo\"\n}, {\n  id: 2,\n  email: \"admin@admin.com\",\n  password: \"adminadmin\",\n  name: \"Admin\"\n}, {\n  id: 3,\n  email: \"staff@staff.com\",\n  password: \"staff\",\n  name: \"Staff\"\n}];\nconst jwtConfig = {\n  \"secret\": \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n  \"expireTime\": 8000\n}; // POST: Check User Login Details and return user\n\nmock.onPost(\"/api/authenticate/login/user\").reply(request => {\n  let {\n    email,\n    password\n  } = JSON.parse(request.data);\n  let error = \"Something went wrong\";\n  const user = users.find(user => user.email === email && user.password === password);\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      const userData = Object.assign({}, user, {\n        loggedInWith: \"jwt\"\n      });\n      delete userData.password;\n      const response = {\n        user: userData,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = \"Email Or Password Invalid\";\n  }\n\n  return [200, {\n    error\n  }];\n});\nmock.onPost(\"/api/authenticate/register/user\").reply(request => {\n  if (request.data.length > 0) {\n    let {\n      email,\n      password,\n      name\n    } = JSON.parse(request.data);\n    const isEmailAlreadyInUse = users.find(user => user.email === email);\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      name: name === '' ? 'Please enter your name.' : null\n    };\n\n    if (!error.name && !error.email) {\n      let userData = {\n        email: email,\n        password: password,\n        name: name\n      }; // Add user id\n\n      const length = users.length;\n      let lastIndex = 0;\n\n      if (length) {\n        lastIndex = users[length - 1].id;\n      }\n\n      userData.id = lastIndex + 1;\n      users.push(userData);\n      const accessToken = jwt.sign({\n        id: userData.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      let user = Object.assign({}, userData);\n      delete user['password'];\n      const response = {\n        user: user,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } else {\n      return [200, {\n        error\n      }];\n    }\n  }\n});\nmock.onPost('/api/authenticate/refresh-token').reply(request => {\n  const {\n    accessToken\n  } = JSON.parse(request.data);\n\n  try {\n    const {\n      id\n    } = jwt.verify(accessToken, jwtConfig.secret);\n    let userData = Object.assign({}, users.find(user => user.id === id));\n    const newAccessToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    delete userData['password'];\n    const response = {\n      userData: userData,\n      accessToken: newAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    const error = \"Invalid access token\";\n    return [401, {\n      error\n    }];\n  }\n});","map":{"version":3,"sources":["E:/react/rombak-react-vuexy2/src/@fake-db/auth/authentication.js"],"names":["mock","jwt","users","id","email","password","name","jwtConfig","onPost","reply","request","JSON","parse","data","error","user","find","accessToken","sign","secret","expiresIn","expireTime","userData","Object","assign","loggedInWith","response","e","length","isEmailAlreadyInUse","lastIndex","push","verify","newAccessToken"],"mappings":"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","sourcesContent":["import mock from \"../mock\"\nimport jwt from \"jsonwebtoken\"\n\nlet users = [\n  {\n    id: 1,\n    email: \"demo@demo.com\",\n    password: \"demodemo\",\n    name: \"Demo\"\n  },\n  {\n    id: 2,\n    email: \"admin@admin.com\",\n    password: \"adminadmin\",\n    name: \"Admin\"\n  },\n  {\n    id: 3,\n    email: \"staff@staff.com\",\n    password: \"staff\",\n    name: \"Staff\"\n  }\n]\n\nconst jwtConfig = {\n  \"secret\"   : \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n  \"expireTime\": 8000\n}\n\n// POST: Check User Login Details and return user\nmock.onPost(\"/api/authenticate/login/user\").reply( request => {\n\n  let { email, password } = JSON.parse(request.data)\n  let error = \"Something went wrong\"\n\n  const user = users.find(user => user.email === email && user.password === password)\n\n  if (user) {\n\n    try {\n\n      const accessToken = jwt.sign({id: user.id}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      const userData = Object.assign({}, user, {loggedInWith: \"jwt\"})\n\n      delete userData.password\n\n      const response = {\n        user : userData,\n        accessToken: accessToken\n      }\n\n      return [200, response]\n\n    } catch(e) {\n      error = e\n    }\n  }else {\n    error = \"Email Or Password Invalid\"\n  }\n\n  return [200, {error}]\n})\n\nmock.onPost(\"/api/authenticate/register/user\").reply( request => {\n  if(request.data.length > 0){\n\n    let { email, password, name } = JSON.parse(request.data)\n    const isEmailAlreadyInUse = users.find((user) => user.email === email)\n    const error = {\n      email      : isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      name: name === '' ? 'Please enter your name.' : null\n    }\n\n    if ( !error.name && !error.email ) {\n\n      let userData = {\n        email: email,\n        password: password,\n        name: name\n      }\n\n      // Add user id\n      const length = users.length\n      let lastIndex = 0\n      if(length){\n        lastIndex = users[length - 1].id\n      }\n      userData.id = lastIndex + 1\n\n      users.push(userData)\n\n      const accessToken = jwt.sign({id: userData.id}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      let user = Object.assign({}, userData)\n      delete user['password']\n      const response = { user: user, accessToken: accessToken }\n\n      return [200, response]\n    } else {\n      return [200, {error}]\n    }\n\n  }\n\n})\n\nmock.onPost('/api/authenticate/refresh-token').reply((request) => {\n\n  const {accessToken} = JSON.parse(request.data)\n\n  try {\n    const {id} = jwt.verify(accessToken, jwtConfig.secret)\n\n    let userData = Object.assign({}, users.find(user => user.id === id))\n\n    const newAccessToken = jwt.sign({id: userData.id}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn})\n\n    delete userData['password']\n    const response = {\n      userData: userData,\n      accessToken: newAccessToken\n    }\n\n    return [200, response]\n  } catch (e){\n    const error = \"Invalid access token\"\n    return [401, {error}]\n  }\n})\n"]},"metadata":{},"sourceType":"module"}