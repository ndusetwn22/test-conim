{"ast":null,"code":"import _defineProperty from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var initialState={chats:[],contacts:[],chatContacts:[],pinned:[],status:\"active\",filteredContacts:[],filteredChats:[]};var chats=function chats(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"GET_CONTACTS\":return _objectSpread(_objectSpread({},state),{},{chats:action.chats,contacts:action.contacts});case\"GET_CHAT_CONTACTS\":return _objectSpread(_objectSpread({},state),{},{chatContacts:action.chats});case\"SEND_MESSAGE\":var sendMsg,newChatContacts,oldChatContactsId=state.chatContacts.map(function(j){return j.uid;});if(state.chats[action.id]){var oldState=state.chats[action.id].msg;sendMsg=[].concat(_toConsumableArray(oldState),[action.msg]);}else{sendMsg=_objectSpread(_objectSpread({},state.chats),{},_defineProperty({},action.id,{isPinned:action.isPinned,msg:[action.msg]}));}if(!oldChatContactsId.includes(action.id)){var extractContactInfo=state.contacts.find(function(k){return k.uid===action.id;});newChatContacts=state.chatContacts.concat(extractContactInfo);}else{newChatContacts=state.chatContacts;}return _objectSpread(_objectSpread({},state),{},{chats:sendMsg,chatContacts:newChatContacts});case\"CHANGE_STATUS\":return _objectSpread(_objectSpread({},state),{},{status:action.status});case\"MARK_AS_SEEN\":var marked=state.chats[action.id];marked!==undefined&&marked.msg.forEach(function(msg){msg.isSeen=true;});return _objectSpread({},state);case\"SEARCH_CONTACTS\":if(action.query.length){var filteredContacts=state.contacts.filter(function(contact){return contact.displayName.toLowerCase().includes(action.query.toLowerCase());});var filteredChats=state.chatContacts.filter(function(chat){return chat.displayName.toLowerCase().includes(action.query.toLowerCase());});return _objectSpread(_objectSpread({},state),{},{filteredContacts:filteredContacts,filteredChats:filteredChats});}else{return _objectSpread({},state);}case\"SET_PINNED\":var pinned=state.chats[action.id];if(pinned){pinned.isPinned=action.value;state.chatContacts.sort(function(a,b){return b.uid-a.uid;});return _objectSpread({},state);}else{return _objectSpread({},state);}default:return _objectSpread({},state);}};export default chats;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/redux/reducers/chat/chats.js"],"names":["initialState","chats","contacts","chatContacts","pinned","status","filteredContacts","filteredChats","state","action","type","sendMsg","newChatContacts","oldChatContactsId","map","j","uid","id","oldState","msg","isPinned","includes","extractContactInfo","find","k","concat","marked","undefined","forEach","isSeen","query","length","filter","contact","displayName","toLowerCase","chat","value","sort","a","b"],"mappings":"kfAAA,GAAMA,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,EADY,CAEnBC,QAAQ,CAAE,EAFS,CAGnBC,YAAY,CAAE,EAHK,CAInBC,MAAM,CAAE,EAJW,CAKnBC,MAAM,CAAE,QALW,CAMnBC,gBAAgB,CAAE,EANC,CAOnBC,aAAa,CAAE,EAPI,CAArB,CAUA,GAAMN,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAkC,IAAjCO,CAAAA,KAAiC,2DAAzBR,YAAyB,IAAXS,CAAAA,MAAW,2CAC9C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,cAAL,CACE,sCAAYF,KAAZ,MAAmBP,KAAK,CAAEQ,MAAM,CAACR,KAAjC,CAAwCC,QAAQ,CAAEO,MAAM,CAACP,QAAzD,GACF,IAAK,mBAAL,CACE,sCAAYM,KAAZ,MAAmBL,YAAY,CAAEM,MAAM,CAACR,KAAxC,GACF,IAAK,cAAL,CACE,GAAIU,CAAAA,OAAJ,CACEC,eADF,CAEEC,iBAAiB,CAAGL,KAAK,CAACL,YAAN,CAAmBW,GAAnB,CAAuB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,GAAN,EAAxB,CAFtB,CAGA,GAAIR,KAAK,CAACP,KAAN,CAAYQ,MAAM,CAACQ,EAAnB,CAAJ,CAA4B,CAC1B,GAAIC,CAAAA,QAAQ,CAAGV,KAAK,CAACP,KAAN,CAAYQ,MAAM,CAACQ,EAAnB,EAAuBE,GAAtC,CACAR,OAAO,8BAAOO,QAAP,GAAiBT,MAAM,CAACU,GAAxB,EAAP,CACD,CAHD,IAGO,CACLR,OAAO,gCACFH,KAAK,CAACP,KADJ,wBAEJQ,MAAM,CAACQ,EAFH,CAEQ,CACXG,QAAQ,CAAEX,MAAM,CAACW,QADN,CAEXD,GAAG,CAAE,CAACV,MAAM,CAACU,GAAR,CAFM,CAFR,EAAP,CAOD,CACD,GAAI,CAACN,iBAAiB,CAACQ,QAAlB,CAA2BZ,MAAM,CAACQ,EAAlC,CAAL,CAA4C,CAC1C,GAAIK,CAAAA,kBAAkB,CAAGd,KAAK,CAACN,QAAN,CAAeqB,IAAf,CAAoB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACR,GAAF,GAAUP,MAAM,CAACQ,EAArB,EAArB,CAAzB,CACAL,eAAe,CAAGJ,KAAK,CAACL,YAAN,CAAmBsB,MAAnB,CAA0BH,kBAA1B,CAAlB,CACD,CAHD,IAGO,CACLV,eAAe,CAAGJ,KAAK,CAACL,YAAxB,CACD,CACD,sCAAYK,KAAZ,MAAmBP,KAAK,CAAEU,OAA1B,CAAmCR,YAAY,CAAES,eAAjD,GACF,IAAK,eAAL,CACE,sCAAYJ,KAAZ,MAAmBH,MAAM,CAAEI,MAAM,CAACJ,MAAlC,GACF,IAAK,cAAL,CACE,GAAIqB,CAAAA,MAAM,CAAGlB,KAAK,CAACP,KAAN,CAAYQ,MAAM,CAACQ,EAAnB,CAAb,CACAS,MAAM,GAAKC,SAAX,EACED,MAAM,CAACP,GAAP,CAAWS,OAAX,CAAmB,SAAAT,GAAG,CAAI,CACxBA,GAAG,CAACU,MAAJ,CAAa,IAAb,CACD,CAFD,CADF,CAIA,wBAAYrB,KAAZ,EACF,IAAK,iBAAL,CACE,GAAIC,MAAM,CAACqB,KAAP,CAAaC,MAAjB,CAAyB,CACvB,GAAIzB,CAAAA,gBAAgB,CAAGE,KAAK,CAACN,QAAN,CAAe8B,MAAf,CAAsB,SAAAC,OAAO,CAAI,CACtD,MAAOA,CAAAA,OAAO,CAACC,WAAR,CACJC,WADI,GAEJd,QAFI,CAEKZ,MAAM,CAACqB,KAAP,CAAaK,WAAb,EAFL,CAAP,CAGD,CAJsB,CAAvB,CAKA,GAAI5B,CAAAA,aAAa,CAAGC,KAAK,CAACL,YAAN,CAAmB6B,MAAnB,CAA0B,SAAAI,IAAI,CAAI,CACpD,MAAOA,CAAAA,IAAI,CAACF,WAAL,CACJC,WADI,GAEJd,QAFI,CAEKZ,MAAM,CAACqB,KAAP,CAAaK,WAAb,EAFL,CAAP,CAGD,CAJmB,CAApB,CAKA,sCAAY3B,KAAZ,MAAmBF,gBAAgB,CAAhBA,gBAAnB,CAAqCC,aAAa,CAAbA,aAArC,GACD,CAZD,IAYO,CACL,wBAAYC,KAAZ,EACD,CACH,IAAK,YAAL,CACE,GAAIJ,CAAAA,MAAM,CAAGI,KAAK,CAACP,KAAN,CAAYQ,MAAM,CAACQ,EAAnB,CAAb,CACA,GAAIb,MAAJ,CAAY,CACVA,MAAM,CAACgB,QAAP,CAAkBX,MAAM,CAAC4B,KAAzB,CACA7B,KAAK,CAACL,YAAN,CAAmBmC,IAAnB,CAAwB,SAACC,CAAD,CAAIC,CAAJ,QAAUA,CAAAA,CAAC,CAACxB,GAAF,CAAQuB,CAAC,CAACvB,GAApB,EAAxB,EACA,wBAAYR,KAAZ,EACD,CAJD,IAIO,CACL,wBAAYA,KAAZ,EACD,CACH,QACE,wBAAYA,KAAZ,EA/DJ,CAiED,CAlED,CAoEA,cAAeP,CAAAA,KAAf","sourcesContent":["const initialState = {\n  chats: [],\n  contacts: [],\n  chatContacts: [],\n  pinned: [],\n  status: \"active\",\n  filteredContacts: [],\n  filteredChats: []\n}\n\nconst chats = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_CONTACTS\":\n      return { ...state, chats: action.chats, contacts: action.contacts }\n    case \"GET_CHAT_CONTACTS\":\n      return { ...state, chatContacts: action.chats }\n    case \"SEND_MESSAGE\":\n      let sendMsg,\n        newChatContacts,\n        oldChatContactsId = state.chatContacts.map(j => j.uid)\n      if (state.chats[action.id]) {\n        let oldState = state.chats[action.id].msg\n        sendMsg = [...oldState, action.msg]\n      } else {\n        sendMsg = {\n          ...state.chats,\n          [action.id]: {\n            isPinned: action.isPinned,\n            msg: [action.msg]\n          }\n        }\n      }\n      if (!oldChatContactsId.includes(action.id)) {\n        let extractContactInfo = state.contacts.find(k => k.uid === action.id)\n        newChatContacts = state.chatContacts.concat(extractContactInfo)\n      } else {\n        newChatContacts = state.chatContacts\n      }\n      return { ...state, chats: sendMsg, chatContacts: newChatContacts }\n    case \"CHANGE_STATUS\":\n      return { ...state, status: action.status }\n    case \"MARK_AS_SEEN\":\n      let marked = state.chats[action.id]\n      marked !== undefined &&\n        marked.msg.forEach(msg => {\n          msg.isSeen = true\n        })\n      return { ...state }\n    case \"SEARCH_CONTACTS\":\n      if (action.query.length) {\n        let filteredContacts = state.contacts.filter(contact => {\n          return contact.displayName\n            .toLowerCase()\n            .includes(action.query.toLowerCase())\n        })\n        let filteredChats = state.chatContacts.filter(chat => {\n          return chat.displayName\n            .toLowerCase()\n            .includes(action.query.toLowerCase())\n        })\n        return { ...state, filteredContacts, filteredChats }\n      } else {\n        return { ...state }\n      }\n    case \"SET_PINNED\":\n      let pinned = state.chats[action.id]\n      if (pinned) {\n        pinned.isPinned = action.value\n        state.chatContacts.sort((a, b) => b.uid - a.uid)\n        return { ...state }\n      } else {\n        return { ...state }\n      }\n    default:\n      return { ...state }\n  }\n}\n\nexport default chats\n"]},"metadata":{},"sourceType":"module"}