{"ast":null,"code":"import _objectSpread from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var initialState={mails:[],params:null,query:null,selectedEmails:[],filteredMails:[]};var emails=function emails(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"GET_MAILS\":var mails=_toConsumableArray(state.mails);mails=action.mails;return _objectSpread(_objectSpread({},state),{},{mails:mails,params:action.routeParams});case\"SET_STARRED\":state.mails.find(function(i){return i.id===action.mailId;}).isStarred=!state.mails.find(function(i){return i.id===action.mailId;}).isStarred;return _objectSpread({},state);case\"SEARCH_MAIL\":var filteredMails=state.mails.filter(function(val){if(action.query.length>0){return val.sender_name.toLowerCase().includes(action.query)||val.sender.toLowerCase().includes(action.query)||val.message.includes(action.query)||val.subject.toLowerCase().includes(action.query);}else{return state.mails;}});return _objectSpread(_objectSpread({},state),{},{query:action.query,filteredMails:filteredMails});case\"SELECT_MAIL\":var mailId=action.id;var selectedEmails=_toConsumableArray(state.selectedEmails);if(selectedEmails.find(function(id){return id===mailId;})!==undefined){selectedEmails=selectedEmails.filter(function(id){return id!==mailId;});}else{selectedEmails=[].concat(_toConsumableArray(selectedEmails),[mailId]);}return _objectSpread(_objectSpread({},state),{},{selectedEmails:selectedEmails});case\"SELECT_ALL_MAILS\":var arr=Object.keys(state.mails).map(function(k){return state.mails[k];});var selectedEmailsID=arr.map(function(mail){return mail.id;});return _objectSpread(_objectSpread({},state),{},{selectedEmails:selectedEmailsID});case\"DESELECT_ALL_MAILS\":{return _objectSpread(_objectSpread({},state),{},{selectedEmails:[]});}case\"MOVE_MAIL\":return _objectSpread(_objectSpread({},state),{},{selectedEmails:[]});case\"SET_UNREAD\":var updatedEmails=action.id.forEach(function(mailId){var mailIndex=state.mails.findIndex(function(mail){return mail.id===mailId;});if(mailIndex!==-1)state.mails[mailIndex].unread=action.unreadFlag;state.selectedEmails=[];});return _objectSpread(_objectSpread({},state),{},{updatedEmails:updatedEmails});case\"CHANGE_FILTER\":state.params=action.filter;return _objectSpread({},state);default:return _objectSpread({},state);}};export default emails;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/redux/reducers/email/emails.js"],"names":["initialState","mails","params","query","selectedEmails","filteredMails","emails","state","action","type","routeParams","find","i","id","mailId","isStarred","filter","val","length","sender_name","toLowerCase","includes","sender","message","subject","undefined","arr","Object","keys","map","k","selectedEmailsID","mail","updatedEmails","forEach","mailIndex","findIndex","unread","unreadFlag"],"mappings":"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","sourcesContent":["let initialState = {\n  mails: [],\n  params: null,\n  query: null,\n  selectedEmails: [],\n  filteredMails: []\n}\n\nconst emails = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_MAILS\":\n      let mails = [...state.mails]\n      mails = action.mails\n      return { ...state, mails, params: action.routeParams }\n\n    case \"SET_STARRED\":\n      state.mails.find(\n        i => i.id === action.mailId\n      ).isStarred = !state.mails.find(i => i.id === action.mailId).isStarred\n      return { ...state }\n\n    case \"SEARCH_MAIL\":\n      let filteredMails = state.mails.filter(val => {\n        if (action.query.length > 0) {\n          return (\n            val.sender_name.toLowerCase().includes(action.query) ||\n            val.sender.toLowerCase().includes(action.query) ||\n            val.message.includes(action.query) ||\n            val.subject.toLowerCase().includes(action.query)\n          )\n        } else {\n          return state.mails\n        }\n      })\n\n      return { ...state, query: action.query, filteredMails }\n\n    case \"SELECT_MAIL\":\n      const mailId = action.id\n      let selectedEmails = [...state.selectedEmails]\n\n      if (selectedEmails.find(id => id === mailId) !== undefined) {\n        selectedEmails = selectedEmails.filter(id => id !== mailId)\n      } else {\n        selectedEmails = [...selectedEmails, mailId]\n      }\n\n      return { ...state, selectedEmails }\n\n    case \"SELECT_ALL_MAILS\":\n      const arr = Object.keys(state.mails).map(k => {\n        return state.mails[k]\n      })\n\n      const selectedEmailsID = arr.map(mail => mail.id)\n      return {\n        ...state,\n        selectedEmails: selectedEmailsID\n      }\n\n    case \"DESELECT_ALL_MAILS\": {\n      return {\n        ...state,\n        selectedEmails: []\n      }\n    }\n    case \"MOVE_MAIL\":\n      return { ...state, selectedEmails: [] }\n    case \"SET_UNREAD\":\n      let updatedEmails = action.id.forEach(mailId => {\n        const mailIndex = state.mails.findIndex(mail => mail.id === mailId)\n        if (mailIndex !== -1) state.mails[mailIndex].unread = action.unreadFlag\n        state.selectedEmails = []\n      })\n      return { ...state, updatedEmails }\n    case \"CHANGE_FILTER\":\n      state.params = action.filter\n      return { ...state }\n    default:\n      return { ...state }\n  }\n}\nexport default emails\n"]},"metadata":{},"sourceType":"module"}