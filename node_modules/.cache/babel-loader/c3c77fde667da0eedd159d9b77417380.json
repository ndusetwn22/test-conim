{"ast":null,"code":"import _objectSpread from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var initialState={events:[],sidebar:false,selectedEvent:null};var calenderReducer=function calenderReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"FETCH_EVENTS\":return _objectSpread(_objectSpread({},state),{},{events:action.events});case\"ADD_EVENT\":state.events.push(action.event);return _objectSpread({},state);case\"UPDATE_EVENT\":var updatedEvents=state.events.map(function(event){if(event.id===action.event.id){return action.event;}return event;});return _objectSpread(_objectSpread({},state),{},{events:updatedEvents});case\"UPDATE_DRAG\":var eventToDrag=action.event,extractedEvent=state.events.map(function(event){if(event.id===eventToDrag.id){return eventToDrag;}return event;});return _objectSpread(_objectSpread({},state),{},{events:extractedEvent});case\"EVENT_RESIZE\":var eventToResize=action.event,resizeEvent=state.events.map(function(event){if(event.id===eventToResize.id){return eventToResize;}return event;});return _objectSpread(_objectSpread({},state),{},{events:resizeEvent});case\"HANDLE_SIDEBAR\":return _objectSpread(_objectSpread({},state),{},{sidebar:action.status});case\"HANDLE_SELECTED_EVENT\":return _objectSpread(_objectSpread({},state),{},{selectedEvent:action.event});default:return state;}};export default calenderReducer;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/redux/reducers/calendar/index.js"],"names":["initialState","events","sidebar","selectedEvent","calenderReducer","state","action","type","push","event","updatedEvents","map","id","eventToDrag","extractedEvent","eventToResize","resizeEvent","status"],"mappings":"kKAAA,GAAMA,CAAAA,YAAY,CAAG,CACnBC,MAAM,CAAE,EADW,CAEnBC,OAAO,CAAE,KAFU,CAGnBC,aAAa,CAAE,IAHI,CAArB,CAMA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBL,YAAyB,IAAXM,CAAAA,MAAW,2CACxD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,cAAL,CACE,sCAAYF,KAAZ,MAAmBJ,MAAM,CAAEK,MAAM,CAACL,MAAlC,GACF,IAAK,WAAL,CACEI,KAAK,CAACJ,MAAN,CAAaO,IAAb,CAAkBF,MAAM,CAACG,KAAzB,EACA,wBAAYJ,KAAZ,EACF,IAAK,cAAL,CACE,GAAIK,CAAAA,aAAa,CAAGL,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAiB,SAAAF,KAAK,CAAI,CAC5C,GAAIA,KAAK,CAACG,EAAN,GAAaN,MAAM,CAACG,KAAP,CAAaG,EAA9B,CAAkC,CAChC,MAAON,CAAAA,MAAM,CAACG,KAAd,CACD,CACD,MAAOA,CAAAA,KAAP,CACD,CALmB,CAApB,CAMA,sCAAYJ,KAAZ,MAAmBJ,MAAM,CAAES,aAA3B,GACF,IAAK,aAAL,CACE,GAAIG,CAAAA,WAAW,CAAGP,MAAM,CAACG,KAAzB,CACEK,cAAc,CAAGT,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAiB,SAAAF,KAAK,CAAI,CACzC,GAAIA,KAAK,CAACG,EAAN,GAAaC,WAAW,CAACD,EAA7B,CAAiC,CAC/B,MAAOC,CAAAA,WAAP,CACD,CACD,MAAOJ,CAAAA,KAAP,CACD,CALgB,CADnB,CAOA,sCAAYJ,KAAZ,MAAmBJ,MAAM,CAAEa,cAA3B,GACF,IAAK,cAAL,CACE,GAAIC,CAAAA,aAAa,CAAGT,MAAM,CAACG,KAA3B,CACEO,WAAW,CAAGX,KAAK,CAACJ,MAAN,CAAaU,GAAb,CAAiB,SAAAF,KAAK,CAAI,CACtC,GAAIA,KAAK,CAACG,EAAN,GAAaG,aAAa,CAACH,EAA/B,CAAmC,CACjC,MAAOG,CAAAA,aAAP,CACD,CACD,MAAON,CAAAA,KAAP,CACD,CALa,CADhB,CAOA,sCAAYJ,KAAZ,MAAmBJ,MAAM,CAAEe,WAA3B,GACF,IAAK,gBAAL,CACE,sCAAYX,KAAZ,MAAmBH,OAAO,CAAEI,MAAM,CAACW,MAAnC,GACF,IAAK,uBAAL,CACE,sCAAYZ,KAAZ,MAAmBF,aAAa,CAAEG,MAAM,CAACG,KAAzC,GACF,QACE,MAAOJ,CAAAA,KAAP,CArCJ,CAuCD,CAxCD,CA0CA,cAAeD,CAAAA,eAAf","sourcesContent":["const initialState = {\n  events: [],\n  sidebar: false,\n  selectedEvent: null\n}\n\nconst calenderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"FETCH_EVENTS\":\n      return { ...state, events: action.events }\n    case \"ADD_EVENT\":\n      state.events.push(action.event)\n      return { ...state }\n    case \"UPDATE_EVENT\":\n      let updatedEvents = state.events.map(event => {\n        if (event.id === action.event.id) {\n          return action.event\n        }\n        return event\n      })\n      return { ...state, events: updatedEvents }\n    case \"UPDATE_DRAG\":\n      let eventToDrag = action.event,\n        extractedEvent = state.events.map(event => {\n          if (event.id === eventToDrag.id) {\n            return eventToDrag\n          }\n          return event\n        })\n      return { ...state, events: extractedEvent }\n    case \"EVENT_RESIZE\":\n      let eventToResize = action.event,\n        resizeEvent = state.events.map(event => {\n          if (event.id === eventToResize.id) {\n            return eventToResize\n          }\n          return event\n        })\n      return { ...state, events: resizeEvent }\n    case \"HANDLE_SIDEBAR\":\n      return { ...state, sidebar: action.status }\n    case \"HANDLE_SELECTED_EVENT\":\n      return { ...state, selectedEvent: action.event }\n    default:\n      return state\n  }\n}\n\nexport default calenderReducer\n"]},"metadata":{},"sourceType":"module"}