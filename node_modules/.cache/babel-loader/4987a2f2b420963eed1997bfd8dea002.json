{"ast":null,"code":"import _classCallCheck from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{Card,CardHeader,CardTitle,CardBody}from\"reactstrap\";// eslint-disable-next-line\nimport prism from\"prismjs\";var BasicUsage=/*#__PURE__*/function(_React$Component){_inherits(BasicUsage,_React$Component);var _super=_createSuper(BasicUsage);function BasicUsage(){_classCallCheck(this,BasicUsage);return _super.apply(this,arguments);}_createClass(BasicUsage,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Basic Usage\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"p\",null,\"First You will need to import prism.\"),/*#__PURE__*/React.createElement(\"p\",null,\"Prism does its best to encourage good authoring practices. Therefore, it only works with\",/*#__PURE__*/React.createElement(\"code\",null,\"&ltcode&gt\"),\"elements, since marking up code without a\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltcode&gt \"),\"element is semantically invalid.\",/*#__PURE__*/React.createElement(\"a\",{href:\"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\",target:\"_blank\",rel:\"noopener noreferrer\"},\"According to the HTML5 spec\"),\", the recommended way to define a code language is a\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\"language-xxxx\"),\"class, which is what Prism uses. To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltcode&gt \"),\"elements have the same language, you can add the\",/*#__PURE__*/React.createElement(\"code\",null,\"language-xxxx\"),\"class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a \",/*#__PURE__*/React.createElement(\"code\",null,\"language-xxxx\"),\"class on the\",/*#__PURE__*/React.createElement(\"code\",null,\"&ltbody&gt \"),\"or \",/*#__PURE__*/React.createElement(\"code\",null,\"&lthtml&gt\"),\"element.\",\" \"),/*#__PURE__*/React.createElement(\"p\",null,\"If you want to opt-out of highlighting for a\",\" \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltcode&gt\"),\"element that is a descendant of an element with a declared code language, you can add the class \",/*#__PURE__*/React.createElement(\"code\",null,\"language-none\"),\"to it (or any non-existing language, really).\"),/*#__PURE__*/React.createElement(\"p\",null,\"The\",\" \",/*#__PURE__*/React.createElement(\"a\",{href:\"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\",target:\"_blank\",rel:\"noopener noreferrer\"},\"recommended way to mark up a code block\"),\"(both for semantics and for Prism) is a \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltpre&gt\"),\"element with a \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltcode&gt\"),\"element inside, like so:\"),/*#__PURE__*/React.createElement(\"p\",null,\"code:\"),/*#__PURE__*/React.createElement(\"pre\",null,/*#__PURE__*/React.createElement(\"code\",{className:\"language-markup\"},\"\\n<pre>\\n  <code class=\\\"language-css\\\">\\n    p {\\n        color: red\\n      }\\n  </code>\\n</pre>\\n  \")),/*#__PURE__*/React.createElement(\"p\",{className:\"my-1\"},\"Output\"),/*#__PURE__*/React.createElement(\"pre\",null,/*#__PURE__*/React.createElement(\"code\",{className:\"language-css\"},\"\\np {\\n  color: red\\n}\\n                \")),/*#__PURE__*/React.createElement(\"p\",{className:\"mt-1\"},\"If you use that pattern, the \",/*#__PURE__*/React.createElement(\"code\",null,\"&ltpre&gt\"),\"will automatically get the \",/*#__PURE__*/React.createElement(\"code\",null,\"language-xxxx\"),\"class (if it doesn't already have it) and will be styled as a code block.\")));}}]);return BasicUsage;}(React.Component);export default BasicUsage;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/views/ui-elements/syntax-highlighter/BasicUsage.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","prism","BasicUsage","Component"],"mappings":"4nBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,UAAf,CAA2BC,SAA3B,CAAsCC,QAAtC,KAAsD,YAAtD,CACA;AACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,GACMC,CAAAA,U,6PACJ,iBAAS,CACP,mBACE,oBAAC,IAAD,mBACE,oBAAC,UAAD,mBACE,oBAAC,SAAD,oBADF,CADF,cAIE,oBAAC,QAAD,mBACE,oEADF,cAEE,qIAGE,6CAHF,6CAGmE,GAHnE,cAIE,8CAJF,iDAKE,yBACE,IAAI,CAAC,uEADP,CAEE,MAAM,CAAC,QAFT,CAGE,GAAG,CAAC,qBAHN,gCALF,wDAYuD,GAZvD,cAaE,gDAbF,kKAeuC,8CAfvC,iEAiBE,gDAjBF,qIAmBW,gDAnBX,6BAoBE,8CApBF,oBAoB6B,6CApB7B,YAoB6D,GApB7D,CAFF,cAwBE,4EAC+C,GAD/C,cAEE,6CAFF,iHAIkC,gDAJlC,iDAxBF,cA+BE,mCACM,GADN,cAEE,yBACE,IAAI,CAAC,mEADP,CAEE,MAAM,CAAC,QAFT,CAGE,GAAG,CAAC,qBAHN,4CAFF,yDAS0C,4CAT1C,gCAUiB,6CAVjB,4BA/BF,cA2CE,qCA3CF,cA4CE,4CACE,4BAAM,SAAS,CAAC,iBAAhB,0GADF,CA5CF,cAyDE,yBAAG,SAAS,CAAC,MAAb,WAzDF,cA0DE,4CACE,4BAAM,SAAS,CAAC,cAAhB,6CADF,CA1DF,cAmEE,yBAAG,SAAS,CAAC,MAAb,+CAC+B,4CAD/B,4CAEwB,gDAFxB,6EAnEF,CAJF,CADF,CAgFD,C,wBAlFsBN,KAAK,CAACO,S,EAoF/B,cAAeD,CAAAA,UAAf","sourcesContent":["import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\n// eslint-disable-next-line\nimport prism from \"prismjs\"\nclass BasicUsage extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic Usage</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>First You will need to import prism.</p>\n          <p>\n            Prism does its best to encourage good authoring practices.\n            Therefore, it only works with\n            <code>&ltcode&gt</code>elements, since marking up code without a{\" \"}\n            <code>&ltcode&gt </code>element is semantically invalid.\n            <a\n              href=\"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              According to the HTML5 spec\n            </a>\n            , the recommended way to define a code language is a{\" \"}\n            <code>language-xxxx</code>class, which is what Prism uses. To make\n            things easier however, Prism assumes that this language definition\n            is inherited. Therefore, if multiple <code>&ltcode&gt </code>\n            elements have the same language, you can add the\n            <code>language-xxxx</code>class on one of their common ancestors.\n            This way, you can also define a document-wide default language, by\n            adding a <code>language-xxxx</code>class on the\n            <code>&ltbody&gt </code>or <code>&lthtml&gt</code>element.{\" \"}\n          </p>\n          <p>\n            If you want to opt-out of highlighting for a{\" \"}\n            <code>&ltcode&gt</code>\n            element that is a descendant of an element with a declared code\n            language, you can add the class <code>language-none</code>to it (or\n            any non-existing language, really).\n          </p>\n          <p>\n            The{\" \"}\n            <a\n              href=\"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              recommended way to mark up a code block\n            </a>\n            (both for semantics and for Prism) is a <code>&ltpre&gt</code>\n            element with a <code>&ltcode&gt</code>element inside, like so:\n          </p>\n          <p>code:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-css\">\n    p {\n        color: red\n      }\n  </code>\n</pre>\n  `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output</p>\n          <pre>\n            <code className=\"language-css\">\n              {`\np {\n  color: red\n}\n                `}\n            </code>\n          </pre>\n          <p className=\"mt-1\">\n            If you use that pattern, the <code>&ltpre&gt</code>will\n            automatically get the <code>language-xxxx</code>class (if it doesn't\n            already have it) and will be styled as a code block.\n          </p>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default BasicUsage\n"]},"metadata":{},"sourceType":"module"}