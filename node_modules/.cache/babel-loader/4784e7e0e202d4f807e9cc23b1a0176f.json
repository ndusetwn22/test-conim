{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\template-belajar-react\\\\src\\\\views\\\\apps\\\\todo\\\\TaskSidebar.js\";\nimport React from \"react\";\nimport { Input, Button, FormGroup, UncontrolledDropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { X, Info, Star, Tag, Check } from \"react-feather\";\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { connect } from \"react-redux\";\nimport { starTask, completeTask, importantTask, updateTask, updateLabel, addNewTask } from \"../../../redux/actions/todo/index\";\n\nclass TaskSidebar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      taskToUpdate: null,\n      taskTitle: \"\",\n      taskDesc: \"\",\n      taskStatus: false,\n      taskStarred: false,\n      taskImportant: false,\n      newTask: {\n        title: \"\",\n        desc: \"\",\n        tags: [],\n        isCompleted: false,\n        isImportant: false,\n        isStarred: false\n      }\n    };\n\n    this.handleNewTaskTags = tag => {\n      let tagsArr = this.state.newTask.tags;\n\n      if (tagsArr.includes(tag)) {\n        tagsArr.splice(tagsArr.indexOf(tag), 1);\n      } else {\n        tagsArr.push(tag);\n      }\n\n      this.setState({ ...this.state.newTask,\n        tags: tag\n      });\n    };\n\n    this.renderTags = taskArr => {\n      return taskArr.map((tag, i) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chip mb-0 mr-50\",\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chip-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"chip-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: `bullet bullet-${tag === \"backend\" ? \"warning\" : tag === \"doc\" ? \"success\" : tag === \"bug\" ? \"danger\" : \"primary\"} bullet-xs`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text-capitalize ml-25\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, tag)))));\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.taskToUpdate !== null && this.state.taskToUpdate !== this.props.taskToUpdate || this.props.taskToUpdate !== null && this.state.taskStatus !== this.props.taskToUpdate.isCompleted || this.props.taskToUpdate !== null && this.state.taskStarred !== this.props.taskToUpdate.isStarred || this.props.taskToUpdate !== null && this.state.taskImportant !== this.props.taskToUpdate.isImportant) {\n      this.setState({\n        taskToUpdate: this.props.taskToUpdate,\n        taskTitle: this.props.taskToUpdate.title,\n        taskDesc: this.props.taskToUpdate.desc,\n        taskStatus: this.props.taskToUpdate.isCompleted,\n        taskStarred: this.props.taskToUpdate.isStarred,\n        taskImportant: this.props.taskToUpdate.isImportant\n      });\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const {\n      taskToUpdate,\n      taskTitle,\n      taskDesc,\n      newTask,\n      taskStatus\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `task-sidebar ${this.props.addTaskState === true ? \"show\" : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-type-title text-bold-600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, this.props.taskToUpdate && this.props.taskToUpdate.id ? \"Update Task\" : \"Add Task\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"close-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(X, {\n      className: \"cursor-pointer\",\n      size: 20,\n      onClick: () => this.props.addTask(\"close\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-between mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mark-complete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }, this.props.taskToUpdate && this.props.taskToUpdate.id && /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"user-checkbox\",\n      icon: /*#__PURE__*/React.createElement(Check, {\n        className: \"vx-icon\",\n        size: 15,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }),\n      label: \"\",\n      checked: taskStatus,\n      onChange: e => {\n        this.props.completeTask(this.props.taskToUpdate);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 75\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Info, {\n      size: 20,\n      className: `mr-50 ${this.props.taskToUpdate !== null && this.state.taskImportant || newTask.isImportant ? \"text-success\" : \"\"}`,\n      onClick: () => {\n        if (this.props.taskToUpdate !== null) {\n          this.props.importantTask(this.props.taskToUpdate);\n        } else {\n          this.setState({\n            newTask: { ...this.state.newTask,\n              isImportant: !this.state.newTask.isImportant\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Star, {\n      size: 20,\n      className: `mr-50 ${this.props.taskToUpdate !== null && this.state.taskStarred || newTask.isStarred ? \"text-warning\" : \"\"}`,\n      onClick: () => {\n        if (this.props.taskToUpdate !== null) {\n          this.props.starTask(this.props.taskToUpdate);\n        } else {\n          this.setState({\n            newTask: { ...this.state.newTask,\n              isStarred: !this.state.newTask.isStarred\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      className: \"d-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      tag: \"span\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Tag, {\n      className: \"mr-50\",\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DropdownMenu, {\n      tag: \"ul\",\n      right: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(DropdownItem, {\n      tag: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"user-checkbox\",\n      icon: /*#__PURE__*/React.createElement(Check, {\n        className: \"vx-icon\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 31\n        }\n      }),\n      label: \"Frontend\",\n      checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"frontend\") || newTask.tags.includes(\"frontend\") ? true : false,\n      size: \"sm\",\n      onChange: e => {\n        e.stopPropagation();\n        if (this.props.taskToUpdate !== null) this.props.updateLabel(taskToUpdate.id, \"frontend\");else this.handleNewTaskTags(\"frontend\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(DropdownItem, {\n      tag: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"user-checkbox\",\n      icon: /*#__PURE__*/React.createElement(Check, {\n        className: \"vx-icon\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 31\n        }\n      }),\n      label: \"Backend\",\n      checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"backend\") || newTask.tags.includes(\"backend\") ? true : false,\n      size: \"sm\",\n      onClick: e => e.stopPropagation(),\n      onChange: e => {\n        e.stopPropagation();\n        if (this.props.taskToUpdate !== null) this.props.updateLabel(taskToUpdate.id, \"backend\");else this.handleNewTaskTags(\"backend\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(DropdownItem, {\n      tag: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"user-checkbox\",\n      icon: /*#__PURE__*/React.createElement(Check, {\n        className: \"vx-icon\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 31\n        }\n      }),\n      label: \"Doc\",\n      checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"doc\") || newTask.tags.includes(\"doc\") ? true : false,\n      size: \"sm\",\n      onClick: e => e.stopPropagation(),\n      onChange: e => {\n        e.stopPropagation();\n        if (this.props.taskToUpdate !== null) this.props.updateLabel(taskToUpdate.id, \"doc\");else this.handleNewTaskTags(\"doc\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(DropdownItem, {\n      tag: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"user-checkbox\",\n      icon: /*#__PURE__*/React.createElement(Check, {\n        className: \"vx-icon\",\n        size: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 31\n        }\n      }),\n      label: \"Bug\",\n      checked: this.props.taskToUpdate !== null && this.props.taskToUpdate.tags.includes(\"bug\") || newTask.tags.includes(\"bug\") ? true : false,\n      size: \"sm\",\n      onClick: e => e.stopPropagation(),\n      onChange: e => {\n        e.stopPropagation();\n        if (this.props.taskToUpdate !== null) this.props.updateLabel(taskToUpdate.id, \"bug\");else this.handleNewTaskTags(\"bug\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 23\n      }\n    })))))), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: this.props.taskToUpdate !== null ? taskTitle : newTask.title,\n      onChange: e => {\n        if (this.props.taskToUpdate !== null) {\n          this.setState({\n            taskTitle: e.target.value\n          });\n        } else {\n          this.setState({\n            newTask: { ...this.state.newTask,\n              title: e.target.value\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      placeholder: \"Description\",\n      rows: \"5\",\n      value: this.props.taskToUpdate !== null ? taskDesc : newTask.desc,\n      onChange: e => {\n        if (this.props.taskToUpdate !== null) {\n          this.setState({\n            taskDesc: e.target.value\n          });\n        } else {\n          this.setState({\n            newTask: { ...this.state.newTask,\n              desc: e.target.value\n            }\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chip-wrapper my-1 d-flex flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }\n    }, this.props.taskToUpdate !== null && this.props.taskToUpdate.tags && this.props.taskToUpdate.tags.length > 0 ? this.renderTags(this.props.taskToUpdate.tags) : null), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"my-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button.Ripple, {\n      className: \"mr-50\",\n      color: \"primary\",\n      onClick: () => {\n        if (this.props.taskToUpdate !== null) {\n          this.props.updateTask(taskToUpdate.id, taskTitle, taskDesc);\n        } else {\n          this.props.addNewTask(this.state.newTask);\n        }\n\n        this.props.addTask(\"close\");\n        this.setState({\n          newTask: {\n            title: \"\",\n            desc: \"\",\n            tags: [],\n            isCompleted: false,\n            isImportant: false,\n            isStarred: false\n          }\n        });\n      },\n      disabled: taskTitle.length > 0 || newTask.title.length > 0 ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 15\n      }\n    }, taskToUpdate && taskToUpdate.id && this.props.taskToUpdate !== null ? \"Update\" : \"Add\"), /*#__PURE__*/React.createElement(Button.Ripple, {\n      color: \"light\",\n      outline: true,\n      onClick: () => {\n        this.props.addTask(\"close\");\n        this.setState({\n          newTask: {\n            title: \"\",\n            desc: \"\",\n            tags: [],\n            isCompleted: false,\n            isImportant: false,\n            isStarred: false\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    }, \"Cancel\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    app: state.todoApp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  completeTask,\n  importantTask,\n  starTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n})(TaskSidebar);","map":{"version":3,"sources":["E:/react/template-belajar-react/src/views/apps/todo/TaskSidebar.js"],"names":["React","Input","Button","FormGroup","UncontrolledDropdown","DropdownItem","DropdownMenu","DropdownToggle","X","Info","Star","Tag","Check","Checkbox","PerfectScrollbar","connect","starTask","completeTask","importantTask","updateTask","updateLabel","addNewTask","TaskSidebar","Component","state","taskToUpdate","taskTitle","taskDesc","taskStatus","taskStarred","taskImportant","newTask","title","desc","tags","isCompleted","isImportant","isStarred","handleNewTaskTags","tag","tagsArr","includes","splice","indexOf","push","setState","renderTags","taskArr","map","i","componentDidUpdate","prevProps","prevState","props","render","addTaskState","id","addTask","e","stopPropagation","target","value","length","mapStateToProps","app","todoApp"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n  Input,\n  Button,\n  FormGroup,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\"\nimport { X, Info, Star, Tag, Check } from \"react-feather\"\nimport Checkbox from \"../../../components/@vuexy/checkbox/CheckboxesVuexy\"\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\nimport { connect } from \"react-redux\"\nimport {\n  starTask,\n  completeTask,\n  importantTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n} from \"../../../redux/actions/todo/index\"\nclass TaskSidebar extends React.Component {\n\n  // static getDerivedStateFromProps (props, state){\n  //   if (\n  //    ( props.taskToUpdate !== null &&\n  //     props.taskToUpdate.title !== state.taskTitle) ||\n  //     (props.taskToUpdate !== null && props.taskToUpdate.isCompleted !== state.newTask.isCompleted)\n  //   ) {\n  //     let todosArr = props.app.todo.todos\n  //     let receivedTask =\n  //       props.taskToUpdate !== null ? props.taskToUpdate : 1\n  //     let filteredTask = todosArr.filter(i => i.id === receivedTask.id)\n  //     let taskToUpdate, taskTitle, taskDesc\n  //     filteredTask.map(task => {\n  //       return (\n  //         (taskToUpdate = task),\n  //         (taskTitle = task.title),\n  //         (taskDesc = task.desc)\n  //       )\n  //     })\n  //     return {\n  //       taskToUpdate,\n  //       taskTitle,\n  //       taskDesc\n  //     }\n  //   }\n  //   return null\n  // }\n\n  state = {\n    taskToUpdate: null,\n    taskTitle: \"\",\n    taskDesc: \"\",\n    taskStatus : false,\n    taskStarred : false,\n    taskImportant  : false,\n    newTask: {\n      title: \"\",\n      desc: \"\",\n      tags: [],\n      isCompleted: false,\n      isImportant: false,\n      isStarred: false\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(\n      (this.props.taskToUpdate !== null && this.state.taskToUpdate !== this.props.taskToUpdate) || \n      (this.props.taskToUpdate !== null && this.state.taskStatus !== this.props.taskToUpdate.isCompleted) ||\n      (this.props.taskToUpdate !== null && this.state.taskStarred !== this.props.taskToUpdate.isStarred) ||\n      (this.props.taskToUpdate !== null && this.state.taskImportant !== this.props.taskToUpdate.isImportant) \n      ){\n      this.setState({ \n        taskToUpdate : this.props.taskToUpdate, \n        taskTitle :  this.props.taskToUpdate.title,\n        taskDesc :  this.props.taskToUpdate.desc,\n        taskStatus : this.props.taskToUpdate.isCompleted,\n        taskStarred : this.props.taskToUpdate.isStarred,\n        taskImportant : this.props.taskToUpdate.isImportant\n      })\n    }\n    else{\n      return \n    }\n  }\n  \n\n\n  handleNewTaskTags = tag => {\n    let tagsArr = this.state.newTask.tags\n    if (tagsArr.includes(tag)) {\n      tagsArr.splice(tagsArr.indexOf(tag), 1)\n    } else {\n      tagsArr.push(tag)\n    }\n    this.setState({\n      ...this.state.newTask,\n      tags: tag\n    })\n  }\n\n  renderTags = taskArr => {\n    return taskArr.map((tag, i) => (\n      <div className=\"chip mb-0 mr-50\" key={i}>\n        <div className=\"chip-body\">\n          <span className=\"chip-text\">\n            <span\n              className={`bullet bullet-${\n                tag === \"backend\"\n                  ? \"warning\"\n                  : tag === \"doc\"\n                  ? \"success\"\n                  : tag === \"bug\"\n                  ? \"danger\"\n                  : \"primary\"\n              } bullet-xs`}\n            />\n            <span className=\"text-capitalize ml-25\">{tag}</span>\n          </span>\n        </div>\n      </div>\n    ))\n  }\n\n  render() {\n    const { taskToUpdate, taskTitle, taskDesc, newTask, taskStatus } = this.state\n\n    return (\n      <div\n        className={`task-sidebar ${\n          this.props.addTaskState === true ? \"show\" : \"\"\n        }`}\n      >\n        <div className=\"task-header\">\n          <div className=\"d-flex justify-content-between\">\n            <div className=\"task-type-title text-bold-600\">\n              <h3>\n                {this.props.taskToUpdate && this.props.taskToUpdate.id\n                  ? \"Update Task\"\n                  : \"Add Task\"}\n              </h3>\n            </div>\n            <div className=\"close-icon\">\n              <X\n                className=\"cursor-pointer\"\n                size={20}\n                onClick={() => this.props.addTask(\"close\")}\n              />\n            </div>\n          </div>\n        </div>\n        <PerfectScrollbar>\n          <div className=\"task-body\">\n            <div className=\"d-flex justify-content-between mb-2\">\n              <div className=\"mark-complete\">\n                {this.props.taskToUpdate && this.props.taskToUpdate.id && <Checkbox\n                  color=\"primary\"\n                  className=\"user-checkbox\"\n                  icon={<Check className=\"vx-icon\" size={15} />}\n                  label={\"\"}\n                  checked={ taskStatus }                  \n                  onChange={e =>  {\n                    this.props.completeTask(this.props.taskToUpdate)\n                  }}\n                />}\n              </div>\n              <div className=\"task-actions\">\n                <Info\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null && this.state.taskImportant) ||\n                      newTask.isImportant \n                      ? \"text-success\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.importantTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isImportant : !this.state.newTask.isImportant\n                        }\n                      })\n                    }\n                      \n                  }}\n                />\n                <Star\n                  size={20}\n                  className={`mr-50 ${\n                      (this.props.taskToUpdate !== null  && this.state.taskStarred) ||\n                      newTask.isStarred \n                      ? \"text-warning\"\n                      : \"\"\n                  }`}\n                  onClick={() => {\n                    if (this.props.taskToUpdate !== null){\n                      this.props.starTask(this.props.taskToUpdate)\n                    }\n                    else{\n                      this.setState({\n                        newTask : {\n                          ...this.state.newTask,\n                          isStarred : !this.state.newTask.isStarred\n                        }\n                      })\n                    }\n                    \n                  }}\n                />\n                <UncontrolledDropdown className=\"d-inline-block\">\n                  <DropdownToggle tag=\"span\">\n                    <Tag className=\"mr-50\" size={20} />\n                  </DropdownToggle>\n                  <DropdownMenu tag=\"ul\" right>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Frontend\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"frontend\") )||\n                            (newTask.tags.includes(\"frontend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"frontend\")\n                          else this.handleNewTaskTags(\"frontend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Backend\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"backend\"))||\n                            (newTask.tags.includes(\"backend\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"backend\")\n                            else this.handleNewTaskTags(\"backend\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Doc\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"doc\"))||\n                            (newTask.tags.includes(\"doc\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"doc\")\n                          else this.handleNewTaskTags(\"doc\")\n                        }}\n                      />\n                    </DropdownItem>\n                    <DropdownItem tag=\"li\">\n                      <Checkbox\n                        color=\"primary\"\n                        className=\"user-checkbox\"\n                        icon={<Check className=\"vx-icon\" size={12} />}\n                        label={\"Bug\"}\n                        checked={\n                            (this.props.taskToUpdate !== null &&\n                            this.props.taskToUpdate.tags.includes(\"bug\"))||\n                            (newTask.tags.includes(\"bug\"))\n                            ? true\n                            : false\n                        }\n                        size=\"sm\"\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                          e.stopPropagation()\n                          if (this.props.taskToUpdate !== null)\n                            this.props.updateLabel(taskToUpdate.id, \"bug\")\n                          else this.handleNewTaskTags(\"bug\")\n                        }}\n                      />\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </div>\n            <FormGroup>\n              <Input\n                type=\"text\"\n                placeholder=\"Title\"\n                value={\n                  this.props.taskToUpdate !== null ? taskTitle : newTask.title\n                }\n                onChange={e => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.setState({\n                      taskTitle : e.target.value\n                    })\n                  }else{\n                    this.setState({ newTask : {\n                      ...this.state.newTask,\n                      title : e.target.value\n                    } })\n                  }\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                placeholder=\"Description\"\n                rows=\"5\"\n                value={\n                  this.props.taskToUpdate !== null ? taskDesc : newTask.desc\n                }\n                onChange={e => {\n                  if (this.props.taskToUpdate !== null){\n                    this.setState({\n                      taskDesc: e.target.value\n                    })\n                  }\n                  else{\n                    this.setState({ newTask : {\n                      ...this.state.newTask,\n                      desc : e.target.value\n                    } })\n                  }\n                }}\n              />\n            </FormGroup>\n            <div className=\"chip-wrapper my-1 d-flex flex-wrap\">\n              {this.props.taskToUpdate !== null &&\n              this.props.taskToUpdate.tags &&\n              this.props.taskToUpdate.tags.length > 0\n                ? this.renderTags(this.props.taskToUpdate.tags)\n                : null}\n            </div>\n\n            <hr className=\"my-2\" />\n            <div className=\"d-flex justify-content-end\">\n              <Button.Ripple\n                className=\"mr-50\"\n                color=\"primary\"\n                onClick={() => {\n                  if (this.props.taskToUpdate !== null) {\n                    this.props.updateTask(taskToUpdate.id, taskTitle, taskDesc)\n                  } else {\n                    this.props.addNewTask(this.state.newTask)\n                  }\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    newTask: {\n                      title: \"\",\n                      desc: \"\",\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n                disabled={\n                  taskTitle.length > 0 || newTask.title.length > 0\n                    ? false\n                    : true\n                }\n              >\n                {taskToUpdate &&\n                taskToUpdate.id &&\n                this.props.taskToUpdate !== null\n                  ? \"Update\"\n                  : \"Add\"}\n              </Button.Ripple>\n              <Button.Ripple\n                color=\"light\"\n                outline\n                onClick={() => {\n                  this.props.addTask(\"close\")\n                  this.setState({\n                    newTask: {\n                      title: \"\",\n                      desc: \"\",\n                      tags: [],\n                      isCompleted: false,\n                      isImportant: false,\n                      isStarred: false\n                    }\n                  })\n                }}\n              >\n                Cancel\n              </Button.Ripple>\n            </div> \n          </div>\n        </PerfectScrollbar>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    app: state.todoApp\n  }\n}\n\nexport default connect(mapStateToProps, {\n  completeTask,\n  importantTask,\n  starTask,\n  updateTask,\n  updateLabel,\n  addNewTask\n})(TaskSidebar)\n"]},"metadata":{},"sourceType":"module"}