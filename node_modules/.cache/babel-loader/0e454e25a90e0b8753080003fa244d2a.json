{"ast":null,"code":"import*as firebase from\"firebase/app\";import{history}from\"../../../history\";// import \"firebase/auth\"\n// import \"firebase/database\"\nimport axios from\"axios\";// import { config } from \"../../../authServices/firebase/firebaseConfig\"\nimport{api_query}from\"../../../api/ApiConstant\";// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n// let firebaseAuth = firebase.auth()\n// const initAuth0 = new auth0.WebAuth(configAuth)\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithJWT = user => {\n//   // ngambil dari loginJWT, dia ngirim params semua statenya\n//   return dispatch => {\n//     axios\n//       .post(\"/api/authenticate/login/user\", {\n//         email: user.email,\n//         password: user.password\n//       })\n//       .then(response => {\n//         var loggedInUser\n//         if (response.data) {\n//           loggedInUser = response.data.user\n//           dispatch({\n//             type: \"LOGIN_WITH_JWT\",\n//             payload: { loggedInUser, loggedInWith: \"jwt\" }\n//           })\n//           history.push(\"/\")\n//         }\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n// export const logoutWithJWT = () => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n// export const logoutWithFirebase = user => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\nexport var logoutWithCustom=function logoutWithCustom(user){return function(dispatch){dispatch({type:\"LOGOUT_WITH_CUSTOM\",payload:{}});window.localStorage.clear();localStorage.removeItem('account');sessionStorage.clear();// window.localStorage.setItem('account', null)\n// window.location.reload();\n// console.log('mylocal ', localStorage.getItem('account'))\nhistory.push(\"/pages/login\");// window.location.reload();\n};};// export const changeRole = role => {\n//   return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n// }\nexport var loginWithCustom=function loginWithCustom(user){// ngambil dari loginJWT, dia ngirim params semua statenya\nconsole.log('custom log: ',user);return function(dispatch){var sql=\"\\n        select\\n          dmu.id,\\n          dmu.nik,\\n          dmu.name,\\n          convert_from(df_decrypt(password), 'UTF8') as \\\"password\\\" ,\\n          role,\\n          job_level,\\n          departement_id,\\n          active,\\n          dmu.create_by,\\n          dmu.create_date,\\n          dmu.update_by,\\n          dmu.update_date,\\n          dmd.nama_departemen\\n      from df_master_user dmu\\n      left join df_master_departement dmd\\n      on dmd.id = dmu.departement_id\\n      where dmu.nik = '\"+user.nik+\"'\\n    \";// let sql = `\n//   select id,\n//         nik,\n//         name,\n//         convert_from(df_decrypt(password), 'UTF8') as \"password\" ,\n//         role,\n//         job_level,\n//         departement_id,\n//         active,\n//         create_by,\n//         create_date,\n//         update_by,\n//         update_date\n//   from df_master_user dmu\n//   join df_master_departement dmd\n//   on\n//   where nik = '`+user.nik+`'\n// `\n// let sql = `\n// \tselect id, name, email, convert_from(df_decrypt(password), 'UTF8') as \"password\" , role from df_master_user dmu where email = '`+user.email+`'\n// `\naxios.post(api_query,{query:sql}).then(function(response){var loggedInUser;// var _tempUser = response.data.response[0]\nvar _tempUser=response.data.response.rows[0];console.log('response login custom : ',response.data.response.rows[0]);// console.log('response login custom : ', response.data.response[0])\nif(_tempUser!=undefined){if(_tempUser.password==user.password){if(_tempUser.active=='Y'){// loggedInUser = response.data.response[0]\nloggedInUser=response.data.response.rows[0];dispatch({type:\"LOGIN_WITH_CUSTOM\",payload:{id:_tempUser.id,nik:_tempUser.nik,name:_tempUser.name,role:_tempUser.role,job_level:_tempUser.job_level,departement_id:_tempUser.departement_id,nama_departemen:_tempUser.nama_departemen,loggedInWith:\"custom\"}});history.push(\"/home\");window.location.reload(false);}else{history.push(\"/pages/login/?status=user_not_active\");window.location.reload(false);}}else{console.log('Password salah');history.push(\"/pages/login/?status=wrong_password\");window.location.reload(false);// dispatch({\n//   type: \"default\",\n//   payload: {\n//     status: \"Password Salah\",\n//   }\n// })\n}}else{console.log('User tidak ada');history.push(\"/pages/login/?status=user_not_found\");window.location.reload(false);}// if (response.data) {\n//   loggedInUser = response.data.user\n//   dispatch({\n//     type: \"LOGIN_WITH_CUSTOM\",\n//     payload: { loggedInUser, loggedInWith: \"custom\" }\n//   })\n//   history.push(\"/\")\n// }\n}).catch(function(err){return console.log(err);});};};","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","api_query","logoutWithCustom","user","dispatch","type","payload","window","localStorage","clear","removeItem","sessionStorage","push","loginWithCustom","console","log","sql","nik","post","query","then","response","loggedInUser","_tempUser","data","rows","undefined","password","active","id","name","role","job_level","departement_id","nama_departemen","loggedInWith","location","reload","catch","err"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,QAAZ,KAA0B,cAA1B,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA;AACA;AACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA,OAASC,SAAT,KAA0B,0BAA1B,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAAC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","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\n// import \"firebase/auth\"\n// import \"firebase/database\"\nimport axios from \"axios\"\n// import { config } from \"../../../authServices/firebase/firebaseConfig\"\nimport { api_query } from \"../../../api/ApiConstant\"\n\n// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n\n// let firebaseAuth = firebase.auth()\n\n// const initAuth0 = new auth0.WebAuth(configAuth)\n\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithJWT = user => {\n//   // ngambil dari loginJWT, dia ngirim params semua statenya\n//   return dispatch => {\n//     axios\n//       .post(\"/api/authenticate/login/user\", {\n//         email: user.email,\n//         password: user.password\n//       })\n//       .then(response => {\n//         var loggedInUser\n\n//         if (response.data) {\n//           loggedInUser = response.data.user\n\n//           dispatch({\n//             type: \"LOGIN_WITH_JWT\",\n//             payload: { loggedInUser, loggedInWith: \"jwt\" }\n//           })\n\n//           history.push(\"/\")\n//         }\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\n// export const logoutWithJWT = () => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n\n// export const logoutWithFirebase = user => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n\nexport const logoutWithCustom = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_CUSTOM\", payload: {} })\n    window.localStorage.clear();\n    localStorage.removeItem('account');\n    sessionStorage.clear();\n    // window.localStorage.setItem('account', null)\n    // window.location.reload();\n    // console.log('mylocal ', localStorage.getItem('account'))\n    history.push(\"/pages/login\")\n\n    // window.location.reload();\n  }\n}\n\n// export const changeRole = role => {\n//   return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n// }\n\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n\n  console.log('custom log: ', user)\n\n  return dispatch => {\n\n    let sql = `\n        select\n          dmu.id,\n          dmu.nik,\n          dmu.name,\n          convert_from(df_decrypt(password), 'UTF8') as \"password\" ,\n          role,\n          job_level,\n          departement_id,\n          active,\n          dmu.create_by,\n          dmu.create_date,\n          dmu.update_by,\n          dmu.update_date,\n          dmd.nama_departemen\n      from df_master_user dmu\n      left join df_master_departement dmd\n      on dmd.id = dmu.departement_id\n      where dmu.nik = '`+user.nik+`'\n    `\n\n    // let sql = `\n    //   select id,\n    //         nik,\n    //         name,\n    //         convert_from(df_decrypt(password), 'UTF8') as \"password\" ,\n    //         role,\n    //         job_level,\n    //         departement_id,\n    //         active,\n    //         create_by,\n    //         create_date,\n    //         update_by,\n    //         update_date\n    //   from df_master_user dmu\n    //   join df_master_departement dmd\n    //   on\n    //   where nik = '`+user.nik+`'\n    // `\n\n    // let sql = `\n  \t// \tselect id, name, email, convert_from(df_decrypt(password), 'UTF8') as \"password\" , role from df_master_user dmu where email = '`+user.email+`'\n    // `\n\n    axios\n      .post(api_query, {\n        query : sql\n      })\n      .then(response => {\n        var loggedInUser\n        // var _tempUser = response.data.response[0]\n        var _tempUser = response.data.response.rows[0]\n        console.log('response login custom : ', response.data.response.rows[0])\n        // console.log('response login custom : ', response.data.response[0])\n\n        if (_tempUser != undefined) {\n          if(_tempUser.password == user.password){\n            if(_tempUser.active == 'Y'){\n              // loggedInUser = response.data.response[0]\n              loggedInUser = response.data.response.rows[0]\n\n\n              dispatch({\n                type: \"LOGIN_WITH_CUSTOM\",\n                payload: {\n                  id: _tempUser.id,\n                  nik : _tempUser.nik,\n                  name: _tempUser.name,\n                  role: _tempUser.role,\n                  job_level: _tempUser.job_level,\n                  departement_id: _tempUser.departement_id,\n                  nama_departemen: _tempUser.nama_departemen,\n                  loggedInWith: \"custom\"\n                }\n              })\n\n              history.push(\"/home\")\n\n              window.location.reload(false);\n            }else{\n              history.push(\"/pages/login/?status=user_not_active\")\n              window.location.reload(false);\n            }\n          }else{\n            console.log('Password salah')\n            history.push(\"/pages/login/?status=wrong_password\")\n            window.location.reload(false);\n            // dispatch({\n            //   type: \"default\",\n            //   payload: {\n            //     status: \"Password Salah\",\n            //   }\n            // })\n          }\n        }else{\n          console.log('User tidak ada')\n          history.push(\"/pages/login/?status=user_not_found\")\n          window.location.reload(false);\n        }\n\n        // if (response.data) {\n        //   loggedInUser = response.data.user\n\n        //   dispatch({\n        //     type: \"LOGIN_WITH_CUSTOM\",\n        //     payload: { loggedInUser, loggedInWith: \"custom\" }\n        //   })\n\n        //   history.push(\"/\")\n        // }\n      })\n      .catch(err => console.log(err))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}