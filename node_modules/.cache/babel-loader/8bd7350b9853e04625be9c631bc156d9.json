{"ast":null,"code":"import * as firebase from \"firebase/app\";\nimport { history } from \"../../../history\"; // import \"firebase/auth\"\n// import \"firebase/database\"\n\nimport axios from \"axios\"; // import { config } from \"../../../authServices/firebase/firebaseConfig\"\n\nimport { api_query } from \"../../../api/ApiConstant\"; // Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n// let firebaseAuth = firebase.auth()\n// const initAuth0 = new auth0.WebAuth(configAuth)\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n// export const loginWithJWT = user => {\n//   // ngambil dari loginJWT, dia ngirim params semua statenya\n//   return dispatch => {\n//     axios\n//       .post(\"/api/authenticate/login/user\", {\n//         email: user.email,\n//         password: user.password\n//       })\n//       .then(response => {\n//         var loggedInUser\n//         if (response.data) {\n//           loggedInUser = response.data.user\n//           dispatch({\n//             type: \"LOGIN_WITH_JWT\",\n//             payload: { loggedInUser, loggedInWith: \"jwt\" }\n//           })\n//           history.push(\"/\")\n//         }\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n// export const logoutWithJWT = () => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n// export const logoutWithFirebase = user => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n\nexport const logoutWithCustom = user => {\n  return dispatch => {\n    dispatch({\n      type: \"LOGOUT_WITH_CUSTOM\",\n      payload: {}\n    });\n    localStorage.clear();\n    history.push(\"/pages/login\");\n    localStorage.clear();\n    localStorage.removeItem('account');\n    window.location.reload(); // window.location.reload();\n  };\n}; // export const changeRole = role => {\n//   return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n// }\n\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n  console.log('custom : ', user);\n  return dispatch => {\n    let sql = `\n      select * from df_master_user where email = '` + user.email + `'\n    `;\n    axios.post(api_query, {\n      query: sql\n    }).then(response => {\n      var loggedInUser; // var _tempUser = response.data.response[0]\n\n      var _tempUser = response.data.response.rows[0];\n      console.log('response login custom : ', response.data.response.rows[0]); // console.log('response login custom : ', response.data.response[0])\n\n      if (_tempUser != undefined) {\n        if (_tempUser.password == user.password) {\n          // loggedInUser = response.data.response[0]\n          loggedInUser = response.data.response.rows[0];\n          dispatch({\n            type: \"LOGIN_WITH_CUSTOM\",\n            payload: {\n              email: _tempUser.email,\n              name: _tempUser.email,\n              role: _tempUser.role,\n              loggedInWith: \"custom\"\n            }\n          });\n          history.push(\"/\");\n          window.location.reload();\n        } else {\n          console.log('Password salah');\n        }\n      } else {\n        console.log('User tidak ada');\n      } // if (response.data) {\n      //   loggedInUser = response.data.user\n      //   dispatch({\n      //     type: \"LOGIN_WITH_CUSTOM\",\n      //     payload: { loggedInUser, loggedInWith: \"custom\" }\n      //   })\n      //   history.push(\"/\")\n      // }\n\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/rombak-react-vuexy2/src/redux/actions/auth/loginActions.js"],"names":["firebase","history","axios","api_query","logoutWithCustom","user","dispatch","type","payload","localStorage","clear","push","removeItem","window","location","reload","loginWithCustom","console","log","sql","email","post","query","then","response","loggedInUser","_tempUser","data","rows","undefined","password","name","role","loggedInWith","catch","err"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,SAAT,QAA0B,0BAA1B,C,CAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAGC,IAAI,IAAI;AACtC,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,oBAAR;AAA8BC,MAAAA,OAAO,EAAE;AAAvC,KAAD,CAAR;AACAC,IAAAA,YAAY,CAACC,KAAb;AACAT,IAAAA,OAAO,CAACU,IAAR,CAAa,cAAb;AACAF,IAAAA,YAAY,CAACC,KAAb;AACAD,IAAAA,YAAY,CAACG,UAAb,CAAwB,SAAxB;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GANiB,CAOjB;AACD,GARD;AASD,CAVM,C,CAYP;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAGX,IAAI,IAAI;AACrC;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBb,IAAzB;AAEA,SAAOC,QAAQ,IAAI;AAEjB,QAAIa,GAAG,GAAI;AACf,mDADc,GACsCd,IAAI,CAACe,KAD3C,GACkD;AAChE,KAFI;AAIAlB,IAAAA,KAAK,CACFmB,IADH,CACQlB,SADR,EACmB;AACfmB,MAAAA,KAAK,EAAGH;AADO,KADnB,EAIGI,IAJH,CAIQC,QAAQ,IAAI;AAChB,UAAIC,YAAJ,CADgB,CAEhB;;AACA,UAAIC,SAAS,GAAGF,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBI,IAAvB,CAA4B,CAA5B,CAAhB;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCM,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBI,IAAvB,CAA4B,CAA5B,CAAxC,EAJgB,CAKhB;;AAEA,UAAIF,SAAS,IAAIG,SAAjB,EAA4B;AAC1B,YAAGH,SAAS,CAACI,QAAV,IAAsBzB,IAAI,CAACyB,QAA9B,EAAuC;AACnC;AACAL,UAAAA,YAAY,GAAGD,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBI,IAAvB,CAA4B,CAA5B,CAAf;AAGAtB,UAAAA,QAAQ,CAAC;AACPC,YAAAA,IAAI,EAAE,mBADC;AAEPC,YAAAA,OAAO,EAAE;AACPY,cAAAA,KAAK,EAAGM,SAAS,CAACN,KADX;AAEPW,cAAAA,IAAI,EAAEL,SAAS,CAACN,KAFT;AAGPY,cAAAA,IAAI,EAAEN,SAAS,CAACM,IAHT;AAIPC,cAAAA,YAAY,EAAE;AAJP;AAFF,WAAD,CAAR;AAWAhC,UAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AAEAE,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAEH,SApBD,MAoBK;AACHE,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,OAxBD,MAwBK;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,OAjCe,CAmChB;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACD,KAjDH,EAkDGgB,KAlDH,CAkDSC,GAAG,IAAIlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ,CAlDhB;AAmDD,GAzDD;AA0DD,CA/DM","sourcesContent":["import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\n// import \"firebase/auth\"\n// import \"firebase/database\"\nimport axios from \"axios\"\n// import { config } from \"../../../authServices/firebase/firebaseConfig\"\nimport { api_query } from \"../../../api/ApiConstant\"\n\n// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n\n// let firebaseAuth = firebase.auth()\n\n// const initAuth0 = new auth0.WebAuth(configAuth)\n\n// export const submitLoginWithFireBase = (email, password, remember) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     firebaseAuth\n//       .signInWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: \"Admin\"\n//           })\n//           let name = result.user.displayName\n//           if (user) {\n//             userEmail = user.email\n//             loggedIn = true\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn,\n//                 loggedInWith: \"firebase\"\n//               }\n//             })\n//           }\n//           if (user && remember) {\n//             firebase\n//               .auth()\n//               .setPersistence(firebase.auth.Auth.Persistence.SESSION)\n//               .then(() => {\n//                 dispatch({\n//                   type: \"LOGIN_WITH_EMAIL\",\n//                   payload: {\n//                     email: userEmail,\n//                     name,\n//                     isSignedIn: loggedIn,\n//                     remember: true,\n//                     loggedInWith: \"firebase\"\n//                   }\n//                 })\n//               })\n//           }\n//           history.push(\"/\")\n//         })\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithFB = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.FacebookAuthProvider()\n//     provider.setCustomParameters({\n//       display: \"popup\"\n//     })\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(result => {\n//         // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n//         let token = result.credential.accessToken,\n//           // The signed-in user info.\n//           user = result.user.email\n//         dispatch({\n//           type: \"LOGIN_WITH_FB\",\n//           payload: {\n//             user,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         if (user) history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithTwitter = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.TwitterAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_TWITTER\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGoogle = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GoogleAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.user.displayName,\n//           photoUrl = result.user.photoURL\n//         dispatch({\n//           type: \"LOGIN_WITH_GOOGLE\",\n//           payload: {\n//             email: user,\n//             name: name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithGithub = () => {\n//   return dispatch => {\n//     let provider = new firebase.auth.GithubAuthProvider()\n//     firebaseAuth\n//       .signInWithPopup(provider)\n//       .then(function(result) {\n//         let token = result.credential.accessToken,\n//           user = result.user.email,\n//           name = result.additionalUserInfo.username,\n//           photoUrl = result.user.photoURL\n\n//         dispatch({\n//           type: \"LOGIN_WITH_GITHUB\",\n//           payload: {\n//             user,\n//             name,\n//             photoUrl,\n//             token,\n//             loggedInWith: \"firebase\"\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(function(error) {\n//         console.log(error)\n//       })\n//   }\n// }\n\n// export const loginWithJWT = user => {\n//   // ngambil dari loginJWT, dia ngirim params semua statenya\n//   return dispatch => {\n//     axios\n//       .post(\"/api/authenticate/login/user\", {\n//         email: user.email,\n//         password: user.password\n//       })\n//       .then(response => {\n//         var loggedInUser\n\n//         if (response.data) {\n//           loggedInUser = response.data.user\n\n//           dispatch({\n//             type: \"LOGIN_WITH_JWT\",\n//             payload: { loggedInUser, loggedInWith: \"jwt\" }\n//           })\n\n//           history.push(\"/\")\n//         }\n//       })\n//       .catch(err => console.log(err))\n//   }\n// }\n\n// export const logoutWithJWT = () => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_JWT\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n\n// export const logoutWithFirebase = user => {\n//   return dispatch => {\n//     dispatch({ type: \"LOGOUT_WITH_FIREBASE\", payload: {} })\n//     history.push(\"/pages/login\")\n//   }\n// }\n\nexport const logoutWithCustom = user => {\n  return dispatch => {\n    dispatch({ type: \"LOGOUT_WITH_CUSTOM\", payload: {} })\n    localStorage.clear();\n    history.push(\"/pages/login\")\n    localStorage.clear();\n    localStorage.removeItem('account');\n    window.location.reload();\n    // window.location.reload();\n  }\n}\n\n// export const changeRole = role => {\n//   return dispatch => dispatch({ type: \"CHANGE_ROLE\", userRole: role })\n// }\n\nexport const loginWithCustom = user => {\n  // ngambil dari loginJWT, dia ngirim params semua statenya\n\n  console.log('custom : ', user)\n\n  return dispatch => {\n\n    let sql = `\n      select * from df_master_user where email = '`+user.email+`'\n    `\n\n    axios\n      .post(api_query, {\n        query : sql\n      })\n      .then(response => {\n        var loggedInUser\n        // var _tempUser = response.data.response[0]\n        var _tempUser = response.data.response.rows[0]\n        console.log('response login custom : ', response.data.response.rows[0])\n        // console.log('response login custom : ', response.data.response[0])\n\n        if (_tempUser != undefined) {\n          if(_tempUser.password == user.password){\n              // loggedInUser = response.data.response[0]\n              loggedInUser = response.data.response.rows[0]\n\n\n              dispatch({\n                type: \"LOGIN_WITH_CUSTOM\",\n                payload: {\n                  email : _tempUser.email,\n                  name: _tempUser.email,\n                  role: _tempUser.role,\n                  loggedInWith: \"custom\"\n                }\n              })\n\n\n              history.push(\"/\")\n\n              window.location.reload();\n\n          }else{\n            console.log('Password salah')\n          }\n        }else{\n          console.log('User tidak ada')\n        }\n\n        // if (response.data) {\n        //   loggedInUser = response.data.user\n\n        //   dispatch({\n        //     type: \"LOGIN_WITH_CUSTOM\",\n        //     payload: { loggedInUser, loggedInWith: \"custom\" }\n        //   })\n\n        //   history.push(\"/\")\n        // }\n      })\n      .catch(err => console.log(err))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}