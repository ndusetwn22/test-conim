{"ast":null,"code":"import _classCallCheck from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/Users/pandusetiawan/Documents/react/df-v1.2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/pandusetiawan/Documents/react/df-v1.2/src/layouts/components/navbar/NavbarBookmarks.js\";\nimport React from \"react\";\nimport { NavItem, NavLink, UncontrolledTooltip, UncontrolledDropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport * as Icon from \"react-feather\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\nimport AutoComplete from \"../../../components/@vuexy/autoComplete/AutoCompleteComponent\";\nimport { history } from \"../../../history\";\nimport { connect } from \"react-redux\";\nimport { loadSuggestions, updateStarred } from \"../../../redux/actions/navbar/Index\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"; // a little function to help us with reordering the bookmarks\n\nvar reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nvar NavbarBookmarks = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(NavbarBookmarks, _React$PureComponent);\n\n  function NavbarBookmarks() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NavbarBookmarks);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavbarBookmarks)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showBookmarks: false,\n      value: \"\",\n      noSuggestions: false,\n      isStarred: false,\n      suggestions: [],\n      starredItems: []\n    };\n    _this.updateBookmarks = false;\n\n    _this.handleBookmarksVisibility = function () {\n      _this.setState({\n        showBookmarks: !_this.state.showBookmarks,\n        value: \"\",\n        suggestions: [],\n        noSuggestions: false,\n        starred: null\n      });\n    };\n\n    _this.onDragEnd = function (result) {\n      // dropped outside the list\n      if (!result.destination) {\n        return;\n      }\n\n      var starredItems = reorder(_this.state.starredItems, result.source.index, result.destination.index);\n\n      _this.setState({\n        starredItems: starredItems\n      });\n    };\n\n    _this.renderBookmarks = function () {\n      _this.updateBookmarks = true;\n      return /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: _this.onDragEnd,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        direction: \"horizontal\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }\n      }, function (provided, snapshot) {\n        return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          ref: provided.innerRef\n        }, provided.droppableProps, {\n          className: \"d-flex flex-sm-wrap flex-lg-nowrap draggable-cards\",\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }\n        }), _this.state.starredItems.map(function (item, index) {\n          var IconTag = Icon[item.icon ? item.icon : \"X\"];\n          return /*#__PURE__*/React.createElement(Draggable, {\n            key: item.target,\n            draggableId: item.target,\n            index: index,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }\n          }, function (provided, snapshot) {\n            return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 28\n              }\n            }), /*#__PURE__*/React.createElement(NavItem, {\n              className: \"nav-item d-none d-lg-block\",\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 23\n              }\n            }, /*#__PURE__*/React.createElement(NavLink, {\n              tag: \"span\",\n              id: item.target,\n              className: \"nav-link cursor-pointer\",\n              onClick: function onClick() {\n                return history.push(item.link);\n              },\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(IconTag, {\n              size: 21,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 27\n              }\n            })), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n              placement: \"bottom\",\n              target: item.target,\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 25\n              }\n            }, item.title)));\n          });\n        }), provided.placeholder);\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(NavbarBookmarks, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.bookmarks.starred.length !== this.state.starredItems.length && this.updateBookmarks === true) {\n        this.setState({\n          starredItems: this.props.bookmarks.starred\n        });\n        this.updateBookmarks = false;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          _this$props$bookmarks = _this$props.bookmarks,\n          suggestions = _this$props$bookmarks.suggestions,\n          starred = _this$props$bookmarks.starred,\n          loadSuggestions = _this$props.loadSuggestions;\n      this.setState({\n        suggestions: suggestions,\n        starredItems: starred\n      }, loadSuggestions());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          _this$props2$bookmark = _this$props2.bookmarks,\n          extraStarred = _this$props2$bookmark.extraStarred,\n          suggestions = _this$props2$bookmark.suggestions,\n          sidebarVisibility = _this$props2.sidebarVisibility,\n          updateStarred = _this$props2.updateStarred,\n          handleAppOverlay = _this$props2.handleAppOverlay;\n      var renderExtraStarred = extraStarred.length > 0 ? extraStarred.map(function (i) {\n        var IconTag = Icon[i.icon ? i.icon : null];\n        return /*#__PURE__*/React.createElement(DropdownItem, {\n          key: i.id,\n          href: i.link,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(IconTag, {\n          size: 15,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"align-middle ml-1\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }\n        }, i.title));\n      }) : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mr-auto float-left bookmark-wrapper d-flex align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-nav d-xl-none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(NavItem, {\n        className: \"mobile-menu mr-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(NavLink, {\n        className: \"nav-menu-main menu-toggle hidden-xs is-active\",\n        onClick: sidebarVisibility,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Icon.Menu, {\n        className: \"ficon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return NavbarBookmarks;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    bookmarks: state.navbar\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadSuggestions: loadSuggestions,\n  updateStarred: updateStarred\n})(NavbarBookmarks);","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/layouts/components/navbar/NavbarBookmarks.js"],"names":["React","NavItem","NavLink","UncontrolledTooltip","UncontrolledDropdown","DropdownItem","DropdownMenu","DropdownToggle","Icon","Link","classnames","AutoComplete","history","connect","loadSuggestions","updateStarred","DragDropContext","Droppable","Draggable","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","NavbarBookmarks","state","showBookmarks","value","noSuggestions","isStarred","suggestions","starredItems","updateBookmarks","handleBookmarksVisibility","setState","starred","onDragEnd","destination","source","index","renderBookmarks","provided","snapshot","innerRef","droppableProps","map","item","IconTag","icon","target","draggableProps","dragHandleProps","push","link","title","placeholder","prevProps","bookmarks","length","props","extraStarred","sidebarVisibility","handleAppOverlay","renderExtraStarred","i","id","PureComponent","mapStateToProps","navbar"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n  NavItem,\n  NavLink,\n  UncontrolledTooltip,\n  UncontrolledDropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle\n} from \"reactstrap\"\nimport * as Icon from \"react-feather\"\nimport { Link } from \"react-router-dom\"\nimport classnames from \"classnames\"\nimport AutoComplete from \"../../../components/@vuexy/autoComplete/AutoCompleteComponent\"\nimport { history } from \"../../../history\"\nimport { connect } from \"react-redux\"\nimport {\n  loadSuggestions,\n  updateStarred\n} from \"../../../redux/actions/navbar/Index\"\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"\n\n// a little function to help us with reordering the bookmarks\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list)\n  const [removed] = result.splice(startIndex, 1)\n  result.splice(endIndex, 0, removed)\n  return result\n}\n\nclass NavbarBookmarks extends React.PureComponent {\n  state = {\n    showBookmarks: false,\n    value: \"\",\n    noSuggestions: false,\n    isStarred: false,\n    suggestions: [],\n    starredItems: []\n  }\n\n  updateBookmarks = false\n\n  handleBookmarksVisibility = () => {\n    this.setState({\n      showBookmarks: !this.state.showBookmarks,\n      value: \"\",\n      suggestions: [],\n      noSuggestions: false,\n      starred: null\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.bookmarks.starred.length !== this.state.starredItems.length && this.updateBookmarks === true) {\n      this.setState({ starredItems: this.props.bookmarks.starred })\n      this.updateBookmarks = false\n    }\n  }\n\n  componentDidMount() {\n    let {\n      bookmarks: { suggestions, starred },\n      loadSuggestions\n    } = this.props\n    this.setState(\n      {\n        suggestions: suggestions,\n        starredItems: starred\n      },\n      loadSuggestions()\n    )\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return\n    }\n\n    const starredItems = reorder(\n      this.state.starredItems,\n      result.source.index,\n      result.destination.index\n    )\n\n    this.setState({\n      starredItems\n    })\n  }\n\n  renderBookmarks = () => {\n    this.updateBookmarks = true\n    return <DragDropContext onDragEnd={this.onDragEnd}>\n      <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"d-flex flex-sm-wrap flex-lg-nowrap draggable-cards\"\n          >\n            {this.state.starredItems.map((item, index) => {\n              const IconTag = Icon[item.icon ? item.icon : \"X\"]\n              return (\n                <Draggable key={item.target} draggableId={item.target} index={index}>\n                  {(provided, snapshot) => {\n                    return <div ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}>\n                      <NavItem className=\"nav-item d-none d-lg-block\">\n                        <NavLink\n                          tag=\"span\"\n                          id={item.target}\n                          className=\"nav-link cursor-pointer\"\n                          onClick={() => history.push(item.link)}\n\n                        >\n                          <IconTag size={21} />\n                        </NavLink>\n                        <UncontrolledTooltip placement=\"bottom\" target={item.target}>\n                          {item.title}\n                        </UncontrolledTooltip>\n                      </NavItem>\n                    </div>\n                  }}\n\n                </Draggable>\n              )\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  }\n\n\n\n  render() {\n    let {\n      bookmarks: { extraStarred, suggestions },\n      sidebarVisibility,\n      updateStarred,\n      handleAppOverlay\n    } = this.props\n\n    const renderExtraStarred =\n      extraStarred.length > 0\n        ? extraStarred.map(i => {\n          const IconTag = Icon[i.icon ? i.icon : null]\n          return (\n            <DropdownItem key={i.id} href={i.link}>\n              <IconTag size={15} />\n              <span className=\"align-middle ml-1\">{i.title}</span>\n            </DropdownItem>\n          )\n        })\n        : null\n\n    return (\n      <div className=\"mr-auto float-left bookmark-wrapper d-flex align-items-center\">\n        <ul className=\"navbar-nav d-xl-none\">\n          <NavItem className=\"mobile-menu mr-auto\">\n            <NavLink\n              className=\"nav-menu-main menu-toggle hidden-xs is-active\"\n              onClick={sidebarVisibility}\n            >\n              <Icon.Menu className=\"ficon\" />\n            </NavLink>\n          </NavItem>\n        </ul>\n        {/* NAVBAR BOOKMARK PANDU SUMBER MASALAH */}\n\n        {/* <ul className=\"nav navbar-nav bookmark-icons\">\n          {this.renderBookmarks()}\n          {extraStarred.length > 0 ? (\n            <NavItem>\n              <NavLink tag=\"div\">\n                <UncontrolledDropdown>\n                  <DropdownToggle tag=\"span\">\n                    <Icon.ChevronDown />\n                  </DropdownToggle>\n                  <DropdownMenu right>{renderExtraStarred}</DropdownMenu>\n                </UncontrolledDropdown>\n              </NavLink>\n            </NavItem>\n          ) : null}\n          <NavItem\n            className=\"nav-item d-none d-lg-block\"\n            onClick={this.handleBookmarksVisibility}\n          >\n            <NavLink>\n              <Icon.Star className=\"text-warning\" size={21} />\n            </NavLink>\n            <div\n              className={classnames(\"bookmark-input search-input\", {\n                show: this.state.showBookmarks\n              })}\n            >\n              <div className=\"bookmark-input-icon\">\n                <Icon.Search size={15} className=\"primary\" />\n              </div>\n\n              <AutoComplete\n                suggestions={suggestions}\n                className=\"form-control\"\n                filterKey=\"title\"\n                autoFocus={true}\n                suggestionLimit={this.state.value.length ? 6 : 100}\n                clearInput={this.state.showBookmarks}\n                defaultSuggestions={true}\n                onChange={e => this.setState({ value: e.target.value })}\n                externalClick={e => this.setState({ showBookmarks: false })}\n                onKeyDown={e => {\n                  if (e.keyCode === 27 || e.keyCode === 13) {\n                    this.setState({\n                      showBookmarks: false\n                    })\n                    handleAppOverlay(\"\")\n                  }\n                }}\n                customRender={(\n                  suggestion,\n                  i,\n                  filteredData,\n                  activeSuggestion,\n                  onSuggestionItemClick,\n                  onSuggestionItemHover,\n                  userInput\n                ) => {\n                  const IconTag = Icon[suggestion.icon ? suggestion.icon : \"X\"]\n                  if (userInput.length) {\n                    return (\n                      <li\n                        className={classnames(\n                          \"suggestion-item d-flex justify-content-between\",\n                          {\n                            active:\n                              filteredData.indexOf(suggestion) ===\n                              activeSuggestion\n                          }\n                        )}\n                        key={suggestion.target}\n                        onClick={e => {\n                          if (!this.state.showBookmarks) {\n                            e.stopPropagation()\n                          }\n                        }}\n                      >\n                        <Link\n                          to={suggestion.link}\n                          className=\"component-info w-100\"\n                          onClick={() =>\n                            this.setState({ showBookmarks: false })\n                          }\n                        >\n                          <IconTag size={15} />\n                          <span className=\"align-middle ml-1\">\n                            {suggestion.title}\n                          </span>\n                        </Link>\n                        <Icon.Star\n                          className={classnames({\n                            \"text-warning\": suggestion.starred === true\n                          })}\n                          size={17}\n                          onClick={e => {\n                            updateStarred(suggestion)\n                            e.stopPropagation()\n                          }}\n                        />\n                      </li>\n                    )\n                  } else {\n                    return suggestion.starred === true ? (\n                      <li\n                        key={suggestion.target}\n                        className={classnames(\n                          \"suggestion-item d-flex justify-content-between\",\n                          {\n                            active:\n                              filteredData.indexOf(suggestion) ===\n                              activeSuggestion\n                          }\n                        )}\n                        onClick={e => {\n                          if (!this.state.showBookmarks) {\n                            e.stopPropagation()\n                          }\n                        }}\n                      >\n                        <Link\n                          to={suggestion.link}\n                          className=\"component-info w-100\"\n                          onClick={e => this.setState({ showBookmarks: false })}\n                        >\n                          <IconTag size={15} />\n                          <span className=\"align-middle ml-1\">\n                            {suggestion.title}\n                          </span>\n                        </Link>\n                        <Icon.Star\n                          className={classnames({\n                            \"text-warning\": suggestion.starred === true\n                          })}\n                          size={17}\n                          onClick={e => {\n                            updateStarred(suggestion)\n                            e.stopPropagation()\n                          }}\n                        />\n                      </li>\n                    ) : null\n                  }\n                }}\n                onSuggestionsShown={userInput => {\n                  if (this.state.showBookmarks) {\n                    handleAppOverlay(userInput)\n                  }\n                }}\n              />\n            </div>\n          </NavItem>\n        </ul> */}\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    bookmarks: state.navbar\n  }\n}\n\nexport default connect(mapStateToProps, { loadSuggestions, updateStarred })(\n  NavbarBookmarks\n)\n"]},"metadata":{},"sourceType":"module"}