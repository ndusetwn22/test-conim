{"ast":null,"code":"var _jsxFileName = \"/Users/pandusetiawan/Documents/react/df-v1.1/src/views/ui-elements/syntax-highlighter/BasicUsage.js\";\nimport React from \"react\";\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"; // eslint-disable-next-line\n\nimport prism from \"prismjs\";\n\nclass BasicUsage extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }\n    }, \"Basic Usage\")), /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }\n    }, \"First You will need to import prism.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }\n    }, \"Prism does its best to encourage good authoring practices. Therefore, it only works with\", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, \"&ltcode&gt\"), \"elements, since marking up code without a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, \"&ltcode&gt \"), \"element is semantically invalid.\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, \"According to the HTML5 spec\"), \", the recommended way to define a code language is a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, \"language-xxxx\"), \"class, which is what Prism uses. To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 50\n      }\n    }, \"&ltcode&gt \"), \"elements have the same language, you can add the\", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"language-xxxx\"), \"class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 22\n      }\n    }, \"language-xxxx\"), \"class on the\", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, \"&ltbody&gt \"), \"or \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 40\n      }\n    }, \"&lthtml&gt\"), \"element.\", \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"If you want to opt-out of highlighting for a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"&ltcode&gt\"), \"element that is a descendant of an element with a declared code language, you can add the class \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 45\n      }\n    }, \"language-none\"), \"to it (or any non-existing language, really).\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, \"The\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"recommended way to mark up a code block\"), \"(both for semantics and for Prism) is a \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 53\n      }\n    }, \"&ltpre&gt\"), \"element with a \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 28\n      }\n    }, \"&ltcode&gt\"), \"element inside, like so:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \"code:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      className: \"language-markup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, `\n<pre>\n  <code class=\"language-css\">\n    p {\n        color: red\n      }\n  </code>\n</pre>\n  `)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"my-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, \"Output\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"code\", {\n      className: \"language-css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, `\np {\n  color: red\n}\n                `)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, \"If you use that pattern, the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 42\n      }\n    }, \"&ltpre&gt\"), \"will automatically get the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 35\n      }\n    }, \"language-xxxx\"), \"class (if it doesn't already have it) and will be styled as a code block.\")));\n  }\n\n}\n\nexport default BasicUsage;","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.1/src/views/ui-elements/syntax-highlighter/BasicUsage.js"],"names":["React","Card","CardHeader","CardTitle","CardBody","prism","BasicUsage","Component","render"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\n// eslint-disable-next-line\nimport prism from \"prismjs\"\nclass BasicUsage extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic Usage</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>First You will need to import prism.</p>\n          <p>\n            Prism does its best to encourage good authoring practices.\n            Therefore, it only works with\n            <code>&ltcode&gt</code>elements, since marking up code without a{\" \"}\n            <code>&ltcode&gt </code>element is semantically invalid.\n            <a\n              href=\"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              According to the HTML5 spec\n            </a>\n            , the recommended way to define a code language is a{\" \"}\n            <code>language-xxxx</code>class, which is what Prism uses. To make\n            things easier however, Prism assumes that this language definition\n            is inherited. Therefore, if multiple <code>&ltcode&gt </code>\n            elements have the same language, you can add the\n            <code>language-xxxx</code>class on one of their common ancestors.\n            This way, you can also define a document-wide default language, by\n            adding a <code>language-xxxx</code>class on the\n            <code>&ltbody&gt </code>or <code>&lthtml&gt</code>element.{\" \"}\n          </p>\n          <p>\n            If you want to opt-out of highlighting for a{\" \"}\n            <code>&ltcode&gt</code>\n            element that is a descendant of an element with a declared code\n            language, you can add the class <code>language-none</code>to it (or\n            any non-existing language, really).\n          </p>\n          <p>\n            The{\" \"}\n            <a\n              href=\"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              recommended way to mark up a code block\n            </a>\n            (both for semantics and for Prism) is a <code>&ltpre&gt</code>\n            element with a <code>&ltcode&gt</code>element inside, like so:\n          </p>\n          <p>code:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-css\">\n    p {\n        color: red\n      }\n  </code>\n</pre>\n  `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output</p>\n          <pre>\n            <code className=\"language-css\">\n              {`\np {\n  color: red\n}\n                `}\n            </code>\n          </pre>\n          <p className=\"mt-1\">\n            If you use that pattern, the <code>&ltpre&gt</code>will\n            automatically get the <code>language-xxxx</code>class (if it doesn't\n            already have it) and will be styled as a code block.\n          </p>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default BasicUsage\n"]},"metadata":{},"sourceType":"module"}