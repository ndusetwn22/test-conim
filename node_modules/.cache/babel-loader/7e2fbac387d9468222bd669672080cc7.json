{"ast":null,"code":"import axios from \"axios\";\nexport var getChats = function getChats() {\n  return function (dispatch) {\n    axios.get(\"api/app/chat/chats\").then(function (response) {\n      dispatch({\n        type: \"GET_CONTACTS\",\n        contacts: response.data.contacts,\n        chats: response.data.chats\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var getContactChats = function getContactChats() {\n  return function (dispatch) {\n    axios.get(\"api/app/chat/chat-contacts\").then(function (response) {\n      dispatch({\n        type: \"GET_CHAT_CONTACTS\",\n        chats: response.data\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var togglePinned = function togglePinned(id, value) {\n  return function (dispatch) {\n    axios.post(\"/api/apps/chat/set-pinned/\", {\n      contactId: id,\n      value: value\n    }).then(function (response) {\n      dispatch({\n        type: \"SET_PINNED\",\n        id: id,\n        value: value\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport var sendMessage = function sendMessage(id, isPinned, text) {\n  if (text.length > 0) {\n    return function (dispatch) {\n      var newMsg = {\n        textContent: text,\n        isSent: true,\n        isSeen: false,\n        time: new Date().toString()\n      };\n      axios.post(\"/api/app/chat/send-message\", {\n        contactId: id,\n        message: newMsg,\n        isPinned: isPinned\n      }).then(function (response) {\n        dispatch({\n          type: \"SEND_MESSAGE\",\n          msg: newMsg,\n          id: id,\n          isPinned: isPinned,\n          text: text\n        });\n        dispatch(getChats());\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n  } else {\n    return;\n  }\n};\nexport var changeStatus = function changeStatus(status) {\n  return function (dispatch) {\n    dispatch({\n      type: \"CHANGE_STATUS\",\n      status: status\n    });\n  };\n};\nexport var searchContacts = function searchContacts(query) {\n  return function (dispatch) {\n    dispatch({\n      type: \"SEARCH_CONTACTS\",\n      query: query\n    });\n  };\n};\nexport var markSeenAllMessages = function markSeenAllMessages(id) {\n  return function (dispatch) {\n    axios.post(\"/api/apps/chat/mark-all-seen/\", {\n      contactId: id\n    }).then(function (response) {\n      dispatch({\n        type: \"MARK_AS_SEEN\",\n        id: id\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.2/src/redux/actions/chat/index.js"],"names":["axios","getChats","dispatch","get","then","response","type","contacts","data","chats","catch","err","console","log","getContactChats","togglePinned","id","value","post","contactId","sendMessage","isPinned","text","length","newMsg","textContent","isSent","isSeen","time","Date","toString","message","msg","changeStatus","status","searchContacts","query","markSeenAllMessages"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nexport const getChats = () => {\n  return dispatch => {\n    axios\n      .get(\"api/app/chat/chats\")\n      .then(response => {\n        dispatch({\n          type: \"GET_CONTACTS\",\n          contacts: response.data.contacts,\n          chats: response.data.chats\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const getContactChats = () => {\n  return dispatch => {\n    axios\n      .get(\"api/app/chat/chat-contacts\")\n      .then(response => {\n        dispatch({\n          type: \"GET_CHAT_CONTACTS\",\n          chats: response.data\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const togglePinned = (id, value) => {\n  return dispatch => {\n    axios\n      .post(\"/api/apps/chat/set-pinned/\", {\n        contactId: id,\n        value\n      })\n      .then(response => {\n        dispatch({\n          type: \"SET_PINNED\",\n          id,\n          value\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n\nexport const sendMessage = (id, isPinned, text) => {\n  if (text.length > 0) {\n    return dispatch => {\n      let newMsg = {\n        textContent: text,\n        isSent: true,\n        isSeen: false,\n        time: new Date().toString()\n      }\n      axios\n        .post(\"/api/app/chat/send-message\", {\n          contactId: id,\n          message: newMsg,\n          isPinned\n        })\n        .then(response => {\n          dispatch({\n            type: \"SEND_MESSAGE\",\n            msg: newMsg,\n            id,\n            isPinned,\n            text\n          })\n          dispatch(getChats())\n        })\n        .catch(err => console.log(err))\n    }\n  } else {\n    return\n  }\n}\n\nexport const changeStatus = status => {\n  return dispatch => {\n    dispatch({\n      type: \"CHANGE_STATUS\",\n      status\n    })\n  }\n}\n\nexport const searchContacts = query => {\n  return dispatch => {\n    dispatch({\n      type: \"SEARCH_CONTACTS\",\n      query\n    })\n  }\n}\n\nexport const markSeenAllMessages = id => {\n  return dispatch => {\n    axios\n      .post(\"/api/apps/chat/mark-all-seen/\", {\n        contactId: id\n      })\n      .then(response => {\n        dispatch({\n          type: \"MARK_AS_SEEN\",\n          id\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}