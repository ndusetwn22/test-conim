{"ast":null,"code":"// import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"; // import \"firebase/auth\"\n// import \"firebase/database\"\n\nimport axios from \"axios\"; // import { config } from \"../../../authServices/firebase/firebaseConfig\"\n// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n// let firebaseAuth = firebase.auth()\n// export const signupWithFirebase = (email, password, name) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     // userName = null\n//     firebaseAuth\n//       .createUserWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: name\n//           })\n//           if (user) {\n//             userEmail = user.email\n//             // let userName = user.displayName\n//             loggedIn = true\n//             dispatch({\n//               type: \"SIGNUP_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn\n//               }\n//             })\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name\n//               }\n//             })\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error.message)\n//       })\n//   }\n// }\n\nexport const signupWithJWT = (email, password, name) => {\n  return dispatch => {\n    axios.post(\"/api/authenticate/register/user\", {\n      email: email,\n      password: password,\n      name: name\n    }).then(response => {\n      var loggedInUser;\n\n      if (response.data) {\n        loggedInUser = response.data.user;\n        localStorage.setItem(\"token\", response.data.token);\n        dispatch({\n          type: \"LOGIN_WITH_JWT\",\n          payload: {\n            loggedInUser,\n            loggedInWith: \"jwt\"\n          }\n        });\n        history.push(\"/\");\n      }\n    }).catch(err => console.log(err));\n  };\n};","map":{"version":3,"sources":["/Users/pandusetiawan/Documents/react/df-v1.1/src/redux/actions/auth/registerActions.js"],"names":["history","axios","signupWithJWT","email","password","name","dispatch","post","then","response","loggedInUser","data","user","localStorage","setItem","token","type","payload","loggedInWith","push","catch","err","console","log"],"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,kBAAxB,C,CACA;AACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,KAA2B;AACtD,SAAOC,QAAQ,IAAI;AACjBL,IAAAA,KAAK,CACFM,IADH,CACQ,iCADR,EAC2C;AACvCJ,MAAAA,KAAK,EAAEA,KADgC;AAEvCC,MAAAA,QAAQ,EAAEA,QAF6B;AAGvCC,MAAAA,IAAI,EAAEA;AAHiC,KAD3C,EAMGG,IANH,CAMQC,QAAQ,IAAI;AAChB,UAAIC,YAAJ;;AAEA,UAAGD,QAAQ,CAACE,IAAZ,EAAiB;AAEfD,QAAAA,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcC,IAA7B;AAEAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,QAAQ,CAACE,IAAT,CAAcI,KAA5C;AAEAT,QAAAA,QAAQ,CAAC;AACPU,UAAAA,IAAI,EAAE,gBADC;AAEPC,UAAAA,OAAO,EAAE;AAAEP,YAAAA,YAAF;AAAgBQ,YAAAA,YAAY,EAAE;AAA9B;AAFF,SAAD,CAAR;AAKAlB,QAAAA,OAAO,CAACmB,IAAR,CAAa,GAAb;AACD;AAEF,KAvBH,EAwBGC,KAxBH,CAwBSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAxBhB;AA0BD,GA3BD;AA4BD,CA7BM","sourcesContent":["// import * as firebase from \"firebase/app\"\nimport { history } from \"../../../history\"\n// import \"firebase/auth\"\n// import \"firebase/database\"\nimport axios from \"axios\"\n// import { config } from \"../../../authServices/firebase/firebaseConfig\"\n\n// Init firebase if not already initialized\n// if (!firebase.apps.length) {\n//   firebase.initializeApp(config)\n// }\n\n// let firebaseAuth = firebase.auth()\n\n// export const signupWithFirebase = (email, password, name) => {\n//   return dispatch => {\n//     let userEmail = null,\n//       loggedIn = false\n//     // userName = null\n\n//     firebaseAuth\n//       .createUserWithEmailAndPassword(email, password)\n//       .then(result => {\n//         firebaseAuth.onAuthStateChanged(user => {\n//           result.user.updateProfile({\n//             displayName: name\n//           })\n//           if (user) {\n//             userEmail = user.email\n//             // let userName = user.displayName\n//             loggedIn = true\n//             dispatch({\n//               type: \"SIGNUP_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name,\n//                 isSignedIn: loggedIn\n//               }\n//             })\n//             dispatch({\n//               type: \"LOGIN_WITH_EMAIL\",\n//               payload: {\n//                 email: userEmail,\n//                 name\n//               }\n//             })\n//           }\n//         })\n//         history.push(\"/\")\n//       })\n//       .catch(error => {\n//         console.log(error.message)\n//       })\n//   }\n// }\n\nexport const signupWithJWT = (email, password, name) => {\n  return dispatch => {\n    axios\n      .post(\"/api/authenticate/register/user\", {\n        email: email,\n        password: password,\n        name: name\n      })\n      .then(response => {\n        var loggedInUser\n\n        if(response.data){\n\n          loggedInUser = response.data.user\n\n          localStorage.setItem(\"token\", response.data.token)\n\n          dispatch({\n            type: \"LOGIN_WITH_JWT\",\n            payload: { loggedInUser, loggedInWith: \"jwt\" }\n          })\n\n          history.push(\"/\")\n        }\n\n      })\n      .catch(err => console.log(err))\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}