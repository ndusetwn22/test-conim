{"ast":null,"code":"const initialState = {\n  data: [],\n  params: null,\n  allData: [],\n  totalPages: 0,\n  filteredData: [],\n  totalRecords: 0,\n  sortIndex: []\n};\n\nconst determinePopularity = val => {\n  if (val >= 75) return {\n    popValue: val,\n    color: \"success\"\n  };else if (val < 75 && val >= 55) return {\n    popValue: val,\n    color: \"primary\"\n  };else if (val < 55 && val >= 35) return {\n    popValue: val,\n    color: \"warning\"\n  };else if (val < 35 && val >= 0) return {\n    popValue: val,\n    color: \"danger\"\n  };else return {\n    popValue: 0,\n    color: \"danger\"\n  };\n};\n\nconst moveIndex = (arr, from, to) => {\n  let el = arr[from];\n  arr.splice(from, 1);\n  arr.splice(to, 0, el);\n};\n\nconst getIndex = (arr, arr2, arr3, params = {}) => {\n  if (arr2.length > 0) {\n    let startIndex = arr.findIndex(i => i.id === arr2[0].id) + 1;\n    let endIndex = arr.findIndex(i => i.id === arr2[arr2.length - 1].id) + 1;\n    let finalArr = [startIndex, endIndex];\n    return arr3 = finalArr;\n  } else {\n    let finalArr = [arr.length - parseInt(params.perPage), arr.length];\n    return arr3 = finalArr;\n  }\n};\n\nconst DataListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return { ...state,\n        data: action.data,\n        totalPages: action.totalPages,\n        params: action.params,\n        sortIndex: getIndex(state.allData, action.data, state.sortIndex, action.params)\n      };\n\n    case \"GET_ALL_DATA\":\n      return { ...state,\n        allData: action.data,\n        totalRecords: action.data.length,\n        sortIndex: getIndex(action.data, state.data, state.sortIndex)\n      };\n\n    case \"FILTER_DATA\":\n      let value = action.value;\n      let filteredData = [];\n\n      if (value.length) {\n        filteredData = state.allData.filter(item => {\n          let startsWithCondition = item.name.toLowerCase().startsWith(value.toLowerCase()) || item.category.toLowerCase().startsWith(value.toLowerCase()) || item.price.toLowerCase().startsWith(value.toLowerCase()) || item.order_status.toLowerCase().startsWith(value.toLowerCase());\n          let includesCondition = item.name.toLowerCase().includes(value.toLowerCase()) || item.category.toLowerCase().includes(value.toLowerCase()) || item.price.toLowerCase().includes(value.toLowerCase()) || item.order_status.toLowerCase().includes(value.toLowerCase());\n\n          if (startsWithCondition) {\n            return startsWithCondition;\n          } else if (!startsWithCondition && includesCondition) {\n            return includesCondition;\n          } else return null;\n        }).slice(state.params.page - 1, state.params.perPage);\n        return { ...state,\n          filteredData\n        };\n      } else {\n        filteredData = state.data;\n        return { ...state,\n          filteredData\n        };\n      }\n\n    case \"ADD_DATA\":\n      let id = state.data.slice(-1)[0].id + 1;\n      state.data.push({ ...action.obj,\n        id,\n        popularity: determinePopularity(action.obj.popularity)\n      });\n      moveIndex(state.data, state.data.findIndex(item => item.id === id), 0);\n      return { ...state,\n        data: state.data,\n        totalRecords: state.allData.length,\n        sortIndex: getIndex(state.allData, state.data, state.sortIndex)\n      };\n\n    case \"UPDATE_DATA\":\n      state.data.find(item => {\n        if (item.id === action.obj.id) {\n          let popularity = determinePopularity(action.obj.popularity.popValue);\n          return Object.assign(item, { ...action.obj,\n            popularity\n          });\n        } else {\n          return item;\n        }\n      });\n      return { ...state\n      };\n\n    case \"DELETE_DATA\":\n      let index = state.data.findIndex(item => item.id === action.obj.id);\n      let updatedData = [...state.data];\n      updatedData.splice(index, 1);\n      return { ...state,\n        data: updatedData,\n        totalRecords: state.allData.length,\n        sortIndex: getIndex(state.allData, state.data, state.sortIndex, state.params)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default DataListReducer;","map":{"version":3,"sources":["E:/react/belajar-react/src/redux/reducers/data-list/index.js"],"names":["initialState","data","params","allData","totalPages","filteredData","totalRecords","sortIndex","determinePopularity","val","popValue","color","moveIndex","arr","from","to","el","splice","getIndex","arr2","arr3","length","startIndex","findIndex","i","id","endIndex","finalArr","parseInt","perPage","DataListReducer","state","action","type","value","filter","item","startsWithCondition","name","toLowerCase","startsWith","category","price","order_status","includesCondition","includes","slice","page","push","obj","popularity","find","Object","assign","index","updatedData"],"mappings":"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","sourcesContent":["const initialState = {\n  data: [],\n  params: null,\n  allData: [],\n  totalPages: 0,\n  filteredData: [],\n  totalRecords: 0,\n  sortIndex: []\n}\n\nconst determinePopularity = val => {\n  if (val >= 75) return { popValue: val, color: \"success\" }\n  else if (val < 75 && val >= 55) return { popValue: val, color: \"primary\" }\n  else if (val < 55 && val >= 35) return { popValue: val, color: \"warning\" }\n  else if (val < 35 && val >= 0) return { popValue: val, color: \"danger\" }\n  else return { popValue: 0, color: \"danger\" }\n}\n\nconst moveIndex = (arr, from, to) => {\n  let el = arr[from]\n  arr.splice(from, 1)\n  arr.splice(to, 0, el)\n}\n\nconst getIndex = (arr, arr2, arr3, params = {}) => {\n  if (arr2.length > 0) {\n    let startIndex = arr.findIndex(i => i.id === arr2[0].id) + 1\n    let endIndex = arr.findIndex(i => i.id === arr2[arr2.length - 1].id) + 1\n    let finalArr = [startIndex, endIndex]\n    return (arr3 = finalArr)\n  } else {\n    let finalArr = [arr.length - parseInt(params.perPage), arr.length]\n    return (arr3 = finalArr)\n  }\n}\n\nconst DataListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return {\n        ...state,\n        data: action.data,\n        totalPages: action.totalPages,\n        params: action.params,\n        sortIndex: getIndex(\n          state.allData,\n          action.data,\n          state.sortIndex,\n          action.params\n        )\n      }\n    case \"GET_ALL_DATA\":\n      return {\n        ...state,\n        allData: action.data,\n        totalRecords: action.data.length,\n        sortIndex: getIndex(action.data, state.data, state.sortIndex)\n      }\n    case \"FILTER_DATA\":\n      let value = action.value\n      let filteredData = []\n      if (value.length) {\n        filteredData = state.allData\n          .filter(item => {\n            let startsWithCondition =\n              item.name.toLowerCase().startsWith(value.toLowerCase()) ||\n              item.category.toLowerCase().startsWith(value.toLowerCase()) ||\n              item.price.toLowerCase().startsWith(value.toLowerCase()) ||\n              item.order_status.toLowerCase().startsWith(value.toLowerCase())\n\n            let includesCondition =\n              item.name.toLowerCase().includes(value.toLowerCase()) ||\n              item.category.toLowerCase().includes(value.toLowerCase()) ||\n              item.price.toLowerCase().includes(value.toLowerCase()) ||\n              item.order_status.toLowerCase().includes(value.toLowerCase())\n\n            if (startsWithCondition) {\n              return startsWithCondition\n            } else if (!startsWithCondition && includesCondition) {\n              return includesCondition\n            } else return null\n          })\n          .slice(state.params.page - 1, state.params.perPage)\n        return { ...state, filteredData }\n      } else {\n        filteredData = state.data\n        return { ...state, filteredData }\n      }\n    case \"ADD_DATA\":\n      let id = state.data.slice(-1)[0].id + 1\n      state.data.push({\n        ...action.obj,\n        id,\n        popularity: determinePopularity(action.obj.popularity)\n      })\n      moveIndex(\n        state.data,\n        state.data.findIndex(item => item.id === id),\n        0\n      )\n      return {\n        ...state,\n        data: state.data,\n        totalRecords: state.allData.length,\n        sortIndex: getIndex(state.allData, state.data, state.sortIndex)\n      }\n    case \"UPDATE_DATA\":\n      state.data.find(item => {\n        if (item.id === action.obj.id) {\n          let popularity = determinePopularity(action.obj.popularity.popValue)\n          return Object.assign(item, { ...action.obj, popularity })\n        } else {\n          return item\n        }\n      })\n      return { ...state }\n    case \"DELETE_DATA\":\n      let index = state.data.findIndex(item => item.id === action.obj.id)\n      let updatedData = [...state.data]\n      updatedData.splice(index, 1)\n      return {\n        ...state,\n        data: updatedData,\n        totalRecords: state.allData.length,\n        sortIndex: getIndex(\n          state.allData,\n          state.data,\n          state.sortIndex,\n          state.params\n        )\n      }\n    default:\n      return state\n  }\n}\n\nexport default DataListReducer\n"]},"metadata":{},"sourceType":"module"}