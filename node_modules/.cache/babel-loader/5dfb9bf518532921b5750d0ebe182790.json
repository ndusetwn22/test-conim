{"ast":null,"code":"import axios from \"axios\";\nimport { history } from \"../../../history\";\nexport const getTodos = routeParams => {\n  return async dispatch => {\n    await axios.get(\"api/apps/todo\", {\n      params: routeParams\n    }).then(result => {\n      dispatch({\n        type: \"GET_TODOS\",\n        todos: result.data,\n        routeParams\n      });\n    }).catch(err => console.log(err));\n  };\n};\nexport const completeTask = todo => {\n  return dispatch => {\n    dispatch({\n      type: \"COMPLETE_TASK\",\n      id: todo.id,\n      value: todo.isCompleted\n    });\n  };\n};\nexport const starTask = todo => {\n  return dispatch => {\n    Promise.all([dispatch({\n      type: \"STAR_TASK\",\n      id: todo.id,\n      value: todo.isStarred\n    })]);\n  };\n};\nexport const importantTask = todo => {\n  return dispatch => {\n    Promise.all([dispatch({\n      type: \"IMPORTANT_TASK\",\n      id: todo.id,\n      value: todo.isImportant\n    })]);\n  };\n};\nexport const trashTask = id => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam;\n    axios.post(\"/api/app/todo/trash-todo\", id).then(response => dispatch({\n      type: \"TRASH_TASK\",\n      id\n    })).then(dispatch(getTodos(params)));\n  };\n};\nexport const updateTodo = todo => {\n  const request = axios.post(\"/api/apps/todo/update-todo\", todo);\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam;\n    request.then(response => {\n      Promise.all([dispatch({\n        type: \"UPDATE_TODO\",\n        todos: response.data\n      })]).then(() => dispatch(getTodos(params)));\n    });\n  };\n};\nexport const updateTask = (id, title, desc) => {\n  return dispatch => {\n    dispatch({\n      type: \"UPDATE_TASK\",\n      id,\n      title,\n      desc\n    });\n  };\n};\nexport const updateLabel = (id, label) => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: \"UPDATE_LABEL\",\n      label,\n      id\n    });\n  };\n};\nexport const addNewTask = task => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam;\n    axios.post(\"/api/apps/todo/new-task\", {\n      task\n    }).then(response => {\n      dispatch({\n        type: \"ADD_TASK\",\n        task\n      });\n      dispatch(getTodos(params));\n    });\n  };\n};\nexport const searchTask = val => {\n  return dispatch => {\n    dispatch({\n      type: \"SEARCH_TASK\",\n      val\n    });\n  };\n};\nexport const changeFilter = filter => {\n  return dispatch => {\n    dispatch({\n      type: \"CHANGE_FILTER\",\n      filter\n    });\n    history.push(`/todo/${filter}`);\n    dispatch(getTodos({\n      filter\n    }));\n  };\n};","map":{"version":3,"sources":["E:/react/rombak-react-vuexy2/src/redux/actions/todo/index.js"],"names":["axios","history","getTodos","routeParams","dispatch","get","params","then","result","type","todos","data","catch","err","console","log","completeTask","todo","id","value","isCompleted","starTask","Promise","all","isStarred","importantTask","isImportant","trashTask","getState","todoApp","routeParam","post","response","updateTodo","request","updateTask","title","desc","updateLabel","label","addNewTask","task","searchTask","val","changeFilter","filter","push"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { history } from \"../../../history\"\n\nexport const getTodos = routeParams => {\n  return async dispatch => {\n    await axios\n      .get(\"api/apps/todo\", {\n        params: routeParams\n      })\n      .then(result => {\n        dispatch({\n          type: \"GET_TODOS\",\n          todos: result.data,\n          routeParams\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\nexport const completeTask = todo => {\n  return dispatch => {\n    dispatch({ type: \"COMPLETE_TASK\", id: todo.id, value: todo.isCompleted })\n  }\n}\n\nexport const starTask = todo => {\n  return dispatch => {\n    Promise.all([\n      dispatch({ type: \"STAR_TASK\", id: todo.id, value: todo.isStarred })\n    ])\n  }\n}\n\nexport const importantTask = todo => {\n  \n  return dispatch => {\n    Promise.all([\n      dispatch({ type: \"IMPORTANT_TASK\", id: todo.id, value: todo.isImportant })\n    ])\n  }\n}\n\nexport const trashTask = id => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    axios\n      .post(\"/api/app/todo/trash-todo\", id)\n      .then(response => dispatch({ type: \"TRASH_TASK\", id }))\n      .then(dispatch(getTodos(params)))\n  }\n}\n\nexport const updateTodo = todo => {\n  const request = axios.post(\"/api/apps/todo/update-todo\", todo)\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    request.then(response => {\n      Promise.all([\n        dispatch({\n          type: \"UPDATE_TODO\",\n          todos: response.data\n        })\n      ]).then(() => dispatch(getTodos(params)))\n    })\n  }\n}\n\nexport const updateTask = (id, title, desc) => {\n  return dispatch => {\n    dispatch({ type: \"UPDATE_TASK\", id, title, desc })\n  }\n}\n\nexport const updateLabel = (id, label) => {\n  return (dispatch, getState) => {\n    dispatch({ type: \"UPDATE_LABEL\", label, id })\n  }\n}\n\nexport const addNewTask = task => {\n  return (dispatch, getState) => {\n    const params = getState().todoApp.todo.routeParam\n    axios.post(\"/api/apps/todo/new-task\", { task }).then(response => {\n      dispatch({ type: \"ADD_TASK\", task })\n      dispatch(getTodos(params))\n    })\n  }\n}\n\nexport const searchTask = val => {\n  return dispatch => {\n    dispatch({\n      type: \"SEARCH_TASK\",\n      val\n    })\n  }\n}\n\nexport const changeFilter = filter => {\n  return dispatch => {\n    dispatch({ type: \"CHANGE_FILTER\", filter })\n    history.push(`/todo/${filter}`)\n    dispatch(getTodos({ filter }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}