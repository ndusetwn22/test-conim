{"ast":null,"code":"import _classCallCheck from\"/Users/pandusetiawan/Documents/react/df-v1.3 backup build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pandusetiawan/Documents/react/df-v1.3 backup build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/pandusetiawan/Documents/react/df-v1.3 backup build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/pandusetiawan/Documents/react/df-v1.3 backup build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{Card,CardHeader,CardTitle,CardBody,Container,Row,Col}from\"reactstrap\";// eslint-disable-next-line\nimport prism from\"prismjs\";var StackedHorizontally=/*#__PURE__*/function(_React$Component){_inherits(StackedHorizontally,_React$Component);var _super=_createSuper(StackedHorizontally);function StackedHorizontally(){_classCallCheck(this,StackedHorizontally);return _super.apply(this,arguments);}_createClass(StackedHorizontally,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardHeader,null,/*#__PURE__*/React.createElement(CardTitle,null,\"Stacked to horizontal\")),/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"p\",null,\"Don\\u2019t want your columns to simply stack in some grid tiers? Use a combination of different props for each tier as needed. See the example below for a better idea of how it all works.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"bd-example-row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"bd-example\"},/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"12\",md:\"8\"},\"sm=\\\"12\\\" md=\\\"8\\\"\"),/*#__PURE__*/React.createElement(Col,{sm:\"6\",md:\"4\"},\"sm=\\\"6\\\" md=\\\"4\\\"\")),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"4\",sm:\"12\"},\"md=\\\"4\\\" sm=\\\"12\\\"\"),/*#__PURE__*/React.createElement(Col,{md:\"4\",sm:\"12\"},\"md=\\\"4\\\" sm=\\\"12\\\"\"),/*#__PURE__*/React.createElement(Col,{md:\"4\",sm:\"12\"},\"md=\\\"4\\\" sm=\\\"12\\\"\")),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{sm:\"6\"},\"sm=\\\"6\\\"\"),/*#__PURE__*/React.createElement(Col,{sm:\"6\"},\"sm=\\\"6\\\"\"))))),/*#__PURE__*/React.createElement(\"pre\",{className:\"mt-2\"},/*#__PURE__*/React.createElement(\"code\",{className:\"language-html\"},\"\\n<Container>\\n<!-- Stack the columns on mobile by making one full-width and the other half-width -->\\n  <Row>\\n    <Col sm=\\\"12\\\" md=\\\"8\\\">\\n      sm=\\\"12\\\" md=\\\"8\\\"\\n    </Col>\\n    <Col sm=\\\"6\\\" md=\\\"4\\\">\\n      sm=\\\"6\\\" md=\\\"4\\\"\\n    </Col>\\n  </Row>\\n\\n  <!-- Columns start at 33.3% wide on desktop and bump down to 100% on mobile screens-->\\n  <Row>\\n    <Col lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\">\\n      lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\"\\n    </Col>\\n    <Col lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\">\\n      lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\"\\n    </Col>\\n    <Col lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\">\\n      lg=\\\"4\\\" md=\\\"4\\\" sm=\\\"12\\\"\\n    </Col>\\n  </Row>\\n\\n<!-- Columns are always 50% wide, on mobile and desktop -->\\n  <Row>\\n    <Col sm=\\\"6\\\">sm=\\\"6\\\"</Col>\\n    <Col sm=\\\"6\\\">sm=\\\"6\\\"</Col>\\n  </Row>\\n</Container>\\n    \"))));}}]);return StackedHorizontally;}(React.Component);export default StackedHorizontally;","map":null,"metadata":{},"sourceType":"module"}